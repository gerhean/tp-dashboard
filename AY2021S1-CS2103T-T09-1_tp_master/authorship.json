[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "# GradPad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad is a one-stop solution to **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Planning for modules has always been a tedious process but it does not have to be."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The current approach to planning and tracking graduation requirements is to open up tabs after tabs of NUS resources such as "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[NUSMods](https://nusmods.com/) and [websites](https://www.comp.nus.edu.sg/programmes/ug/cs/curr/) of the School of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Computing, which can be messy at times. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "So, the GradPad team has come up with the idea of an **easy-to-use**, **all-in-one application** that"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "can ease the process of **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad **consolidates** the modules you have taken and **displays** the remaining required modules to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ease your module planning process. A **module searching platform** is also included in GradPad, providing easy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**navigation** of modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Installation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Requirements"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad requires that you have a Java SE Runtime Environment (JRE) installed on your machine."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Steps"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Download the latest jar release of GradPad from this repository."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. Run the downloaded jar file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    - You can either double-click on the jar file, or"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    - Execute this command from your terminal: `java -jar GradPad.jar`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For detailed guidance on using GradPad, take a look at our user guide "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[here](https://ay2021s1-cs2103t-t09-1.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For developers, view our detailed documentation "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[here](https://ay2021s1-cs2103t-t09-1.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Contributing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Although GradPad is an open source project, it is currently not open to public contribution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Authors and acknowledgement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "silvernitro": 38,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    archiveName \u003d \u0027gradpad.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 2,
      "mhdsyfq": 1,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Lau Siaw Sam"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/silvernitro.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](https://github.com/silvernitro)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/silvernitro.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Lim Shao Kiat"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/shaokiat.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](http://github.com/shaokiat)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/shaokiat.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Muhammad Syafiq Bin Abas"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/mhdsyfq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](http://github.com/mhdsyfq)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/mhdsyfq.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Soon Xiang, Yan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/yan-soon.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](http://github.com/yan-soon)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/yan-soon.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "yan-soon": 22
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPad is an offline computer application meant to help Computer Science students from the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "National University of Singapore (NUS) plan their modules with more ease. All module information is"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "displayed through our simple and organised Graphical User Interface (GUI). GradPad is also optimised "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "for users who prefer working on a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The objectives of the application include:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Allowing NUS CS students to track their degree progress."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. Allowing NUS CS students to plan their modules for upcoming semesters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "3. Providing a fast and convenient way to view NUS CS module details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "## About this Guide"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "This is a Developer Guide written for developers who wish to contribute to or extend"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "our GradPad Project. The guide will explain the different components that make up GradPad"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "and how these components come together to implement GradPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* [**`Nusmods`**](#nusmods-component): Reads data from the NUSMODS public API."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ModuleListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. `Logic` uses the `GradPadParser` class to parse the user command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* stores the GradPad data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cModule\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can save the GradPad data in json format and read it back."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* stores required modules that are on the Computer Science curriculum, in the `RequiredCommandStorage` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* stores all General Education modules available in NUS, in the `GemCommandStorage` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Design considerations"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "We chose to set up the module-specific Storage classes, with the sole purpose of extracting and parsing the JSON data"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "so that GradPad can interact with it."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Rationale"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "This is done so that the `RequiredCommand`, `GemCommand` and `ScienceCommand` classes do not have to worry about"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "data retrieval and storage, such that they can focus on executing the command logic."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The two Storage classes are separated to avoid cluttering up `RequiredCommandStorage`, due to the hefty size of"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "General Education Modules."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Nusmods component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![Structure of the Nusmods Component](images/NusmodsClassDiagram.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**API** : [`NusmodsData.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/nusmods/NusmodsData.java)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `Nusmods` component,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can fetch module data from the NUSMODS public API."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can save fetched module data in the form of `ModuleInfo` objects to a local JSON file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can provide module information based on a module code, in the form of `ModuleInfo` objects."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Critically, the component is able to fall back on reading pre-fetched module information from a local file when "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "there\u0027s no internet connection."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "We chose to split the `Nusmods` component into two main parts that have the following responsibilities respectively:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Fetch module data - handled by `DataFetcher`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Allow other GradPad components to access module data - handled by `NusmodsData`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "##### Rationale"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "We chose to do this instead of clumping all the logic together to achieve better encapsulation and abstraction."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "With this, the `NusmodsData` class only needs to be concerned with reading available module data, processing it,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "and serving it up to the code who requested it. It doesn\u0027t need to care about how the data got there. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "That\u0027s the job of the `DataFetcher` class. As such, it is easy for us to swap out `DataFetcher`, or change its "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "implementation without the need to touch the public interface provided by `NusmodsData`. This will prove to be "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "useful when, for example, the NUSMODS API becomes obsolete, and we need to use another API, or if the NUSMODS "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "API changes, and we need to redesign how we fetch data from it."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Nusmods feature"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad is tightly integrated with the NUSMods public API by using it to retrieve NUS module information to display"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "to users. More specifically, GradPad can perform the following operations:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Retrieve information about a single module via the `/modules` API endpoint"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Retrieve a list of all NUS modules via the `/moduleList` API endpoint"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Store retrieved module information data from the aforementioned endpoints as local JSON files"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Read pre-fetched module information from local JSON files"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The last 2 operations are crucial to allow GradPad to operate even without an internet connection. This will"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "be elaborated further below."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### How a single module\u0027s data is retrieved (when connected to the internet)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad uses the `ModuleInfo` class to represent module information received from NUSMods. Besides storing the various"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "schema fields in the API\u0027s JSON response as plain old Java objects (POJOs), it also handles the massaging of these"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "fields when they are read. "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For e.g. the raw numerical semesters \"3\" and \"4\" must be mapped to \"Special Term I\" and \"Special Term II\" when read."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This is the flow of logic when a single module\u0027s data is fetched via the API:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Some client code calls the `getModuleInfo` method in the `NusmodsDataManager` class and passes in a "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "module code as a string parameter."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. `getModuleInfo` calls the `fetchModuleInfo` method in the `DataFetcherManager` class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `fetchModuleInfo` then makes a HTTP GET request to the NUSMods `/modules` endpoint via the `makeGETRequest`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "utility method defined within the `HttpUtil` class. It also specifies the module code of the module it wants to fetch."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. The `makeGETRequest` method returns the HTTP response as a string. In this case, the response returned is a "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JSON string. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. `fetchModuleInfo` then parses this JSON string into a `ModuleInfo` object."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Note: GradPad sets a 3s second timeout for all HTTP GET requests made. Adjust this where necessary."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates this flow:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![NusmodsFetchModuleSequenceDiagram](images/NusmodsFetchModuleSequenceDiagram.png)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### How a single module\u0027s data is retrieved (when disconnected from the internet)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Without an internet connection, GradPad clearly cannot retrieve module information via HTTP requests. Instead,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad provides a fallback by including pre-fetched CS curriculum modules in each app release. This is a compromise"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "we choose to take. While pre-fetched data implies that it might not be up-to-date, we feel that this is better than"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "completely disallowing users from using GradPad without an internet connection. On top of this, we only choose"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "to pre-fetch CS curriculum modules as scraping and saving all 5800+ NUS modules means we\u0027ll have to make ungraceful"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "API requests and bloat our releases. It is also not scalable in any way."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This is the flow of logic when a single module\u0027s data is retrieved without an internet collection:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Some client code calls the `getModuleInfo` method in the `NusmodsDataManager` class and passes in a "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "module code as a string parameter."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. `getModuleInfo` calls the `fetchModuleInfo` method in the `DataFetcherManager` class. However, as there is no"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " internet connection, this method call will fail with an exception."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. Catching this, `getModuleInfo` proceeds to call the `getModuleInfoFromFile` method within the same class instead."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. `getModuleInfoFromFile` then retrieves the local JSON file containing the module\u0027s information, reads it, and"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "parses it into a `ModuleInfo` object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates this flow:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![NusmodsFetchLocalModuleSequenceDiagram](images/NusmodsFetchLocalModuleSequenceDiagram.png)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### How module data is scraped and saved locally"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As explained in the previous section, GradPad is able to access pre-fetched module information stored as local"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JSON files. This section will explain the script used to scrape and save the 100+ CS curriculum modules that runs "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "before shipping out GradPad releases."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This is the script\u0027s flow of logic:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The entry point of this flow is the `fetchAndSaveModules` method within the `DataFetcherManager` class. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. `fetchAndSaveModules` starts by fetching a list of all modules from the `/moduleList` API endpoint via a call"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "to the `fetchModuleSummaryList` method."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `fetchModuleSummaryList` makes the HTTP GET request and parses the JSON string response into a list of"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " `ModuleSummary`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "objects. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. This list of `ModuleSummary` objects are then filtered to remove all non-CS curriculum modules by passing it through"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the `filterModuleSummaries` method."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. Now that this list only contains `ModuleSummary` objects related to the CS curriculum, it is then passed to the"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`generateModuleInfoMap` method."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "6. `generateModuleInfoMap`\u0027s main job is to create a map of module codes to `ModuleInfo` objects so that GradPad can "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "easily retrieve `ModuleInfo` objects given a module code. It does this by "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "iterating through every `ModuleSummary`, and fetching that module\u0027s module information from the `/modules` endpoint."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "It then parses each module\u0027s information into a `ModuleInfo` object and puts it in a hashmap."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "7. After this map is populated, it is then serialized and saved into a local JSON file."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Note: GradPad rate-limits step 6 with a 100ms delay between successive hits to the `/modules` endpoint. Adjust where"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "necessary."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates this flow:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![NusmodsScrapeModuleSequenceDiagram](images/NusmodsScrapeModuleSequenceDiagram.png)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Add feature"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPad allows users to add modules to their list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following fields of a module are required (* for optional):"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Module Code"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Modular Credits"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Tags*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "As with all operations in GradPad, the `AddCommand` class handles the execution of add operations."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `AddCommandParser` class helps to parse user\u0027s input before creating the correct add command."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Given below is how an add operation behaves at each step of its execution."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to an add operation."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand` method of the `gradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `gradPadParser.parseCommand()` sees that this is an add command, and so uses the `AddCommandParser` class to create a corresponding `AddCommand`, using the `AddCommandParser.parse()` method."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. In `AddCommandParser.parse()`, the string input is first split into tokens, i.e. new module code, new tags, etc."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. Then, in the same method call, a new `Module` object is created from these tokens. It now stores the values that we want to add into our list."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. Lastly, in the same method call, an `AddCommand` is created with the new populated `Module`, and is passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8. `Logic Manager` executes the newly created `AddCommand`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "9. Finally, the `Model` is then updated by adding the new `Module` object."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following sequence diagram shows how the add command is executed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![AddSequenceDiagram](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Edit feature"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad allows users to edit modules that have already been added. "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following fields of a module can be edited:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Module Code"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Modular Credits"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Tags"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `EditCommand` class handles the execution of edit operations."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `EditCommandParser` class helps to parse a user\u0027s input before creating the correct edit command."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad uses the `EditModuleDescriptor` class to facilitate edit operations. An `EditModuleDescriptor` is"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "a temporary bridge that holds the newly-edited fields of a module. You can set the `ModuleCode`,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`ModularCredit`, and `Tags` of an `EditModuleDescriptor`. It is also fine to omit any of them, which is important"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "as we don\u0027t want to be overly-concerned with which fields are to be edited and which are not."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is how an edit operation behaves at each step of its execution."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to an edit operation."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `gradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `gradPadParser.parseCommand()` sees that this is an edit command, and so uses the `EditCommandParser`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "class to create a corresponding `EditCommand`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. In `EditCommandParser`, the string input is first split into tokens, i.e. new module code, new tags, etc."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. Then, in the same method call, an `EditModuleDescriptor` object is created from these tokens. It now stores"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the new values that we want to update the target module with."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. An `EditCommand` is then created with this populated `EditModuleDescriptor`, and is passed back to the"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`LogicManager` in step 2."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8. `LogicManager` executes the newly created `EditCommand`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "9. The target module to be edited is retrieved. A copy of it is made and using the populated"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " `EditModuleDescriptor`, the fields that are to be updated are replaced with their new values."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "10. The `Model` is then updated by replacing the target module with its new updated copy."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram shows how the edit command is executed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![EditSequenceDiagram](images/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### Delete feature"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad allows users to delete modules that have already been added. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "As with all operations in GradPad, the `DeleteCommand` class handles the execution of delete operations."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The `DeleteCommandParser` class helps to parse a user\u0027s input before creating the correct delete command."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Given below is how a delete operation behaves at each step of its execution."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to a delete operation."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `gradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `gradPadParser.parseCommand()` sees that this is an delete command, and so uses the `DeleteCommandParser`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "class to create a corresponding `DeleteCommand`, using the `DeleteCommandParser.parse()` method."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. In `DeleteCommandParser`, the ModuleCode is first extracted from the string input. "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. A `DeleteCommand` is then created with the ModuleCode, and is passed back to the"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "`LogicManager` in step 2."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. `LogicManager` executes the newly created `DeleteCommand`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "8. The target module to be deleted is retrieved, if it exists in the Completed Modules of GradPad. "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "9. The `Model` is then updated by removing the target module."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The following sequence diagram shows how the delete command is executed."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "![DeleteSequenceDiagram](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPad allows users to find a specific module to check if that module has been added. This feature is especially useful "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "if there is a long list of modules currently in GradPad and users want to avoid the hassle of scrolling through the "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "entire list to find the module they are looking for.  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "As with all operations in GradPad, the `FindCommand` class handles the execution of find operations."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The `FindCommandParser` class helps to parse a user\u0027s input before creating the correct find command."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Given below is a series of steps to show how a find operation behaves during its execution."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to a find operation, e.g. \"find CS2103T\"."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a find command, and thus uses the `FindCommandParser`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "class to extract the string input as a predicate and subsequently create a corresponding `FindCommand` with said predicate."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. This `FindCommand` is then passed back to the`LogicManager` in step 2."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. `LogicManager` executes the newly created `FindCommand`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. `FindCommand.execute()` calls for `Model` to filter the GradPad list based on the given predicate."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8. Finally, a `CommandResult` is created and returned to show the result of the execution."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The following sequence diagram illustrates how the find command is executed."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `list` command shows all modules that have been added by the user in the `Completed Modules` list."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This is needed as certain commands can change the modules that are being displayed. One such command is the"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`find` command, which shows only matching modules in the list."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Before diving into how the `list` operation is executed, we must first gain a brief understanding of how the "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`Completed Modules` list displays its modules, and how this display can be changed by other commands."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `Completed Modules` list is implemented by the `ModuleListPanel` UI class."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This class contains a list of modules, which comes from GradPad\u0027s `Model` component, that it uses to "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "display to the user. To change the contents of the list, commands can apply filters to this list through `Model`."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For example, a command may ask `Model` to only show modules that have 4 modular credits."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "When this happens, `Completed Modules` naturally changes the modules it displays too."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following diagram illustrates this relationship:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![ModelFilteredListDiagram](images/ModelFilteredListClassDiagram.png)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "With this in mind, the aim of the `list` command is therefore to remove any existing filter on this module list,"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "effectively getting `Completed Modules` to display all modules once again."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a list operation behaves during its execution to achieve just this."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user input is parsed and constructs a `ListCommand` object. (Implementation details of the parser are omitted"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " here as they are not central in developing an understanding of the `list` operation)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. When this command is executed, it calls the `updateFilteredModuleList` method in the `Model` class and passes in"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "a predicate that lets all modules through the filter."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. The `Model` class updates its `filteredModules` list to include all modules as if it were unfiltered."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. The `ModuleListPanel` UI component listens to changes in `filteredModules` and updates whenever the list is updated."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "It thus updates to display all modules too."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates how the list command is executed."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![ListSequenceDiagram](images/ListSequenceDiagram.png)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### CheckMc feature"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `checkmc` command allows users to view a tally of the total no. of modular credits from the modules present "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "in the `Completed Modules` list."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `CheckMcCommand` class handles the execution of `checkmc` operations."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "In brief, it works by going through all modules in the `Completed Modules` list and summing up each module\u0027s"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "modular credits."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a `checkmc` operation behaves during its execution."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user enters the `checkmc` command string."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a checkmc command and thus creates a `CheckMcCommand`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "object."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "6. `LogicManager` executes the newly created `CheckMcCommand`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "7. `CheckMcCommand.execute()` retrieves the `GradPad` object stored within `Model` and accesses the `modules` field"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "within the `GradPad`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "8. It then loops through `modules`, which is a list of `Module` objects, and sums up all their modular credits."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "8. Finally, a `CommandResult` is created to show the total no. of modular credits calculated."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates how the `checkmc` command is executed."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![CheckMcDiagram](images/CheckMcSequenceDiagram.png)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Check required modules feature"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `required` command allows users to view the required modules in the NUS Computer Science curriculum "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "that they have yet to take."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "When the command is executed, it checks through the current modules in the `Completed Modules` list and ensures"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "that modules that have already been taken are not displayed in the list of remaining required modules."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "This is achieved with the `RequiredCommand` and `RequiredCommandStorage` class. The `RequiredCommandStorage` class"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "handles the extracting, parsing of JSON module data while the `RequiredCommand` handles the logic"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "behind filtering the undone modules."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `RequiredCommand` class handles the execution of `required` operations."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a `required` operation behaves during its execution."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user enters the `required` command string."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a required command and thus creates a `RequiredCommand`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "object."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "6. `LogicManager` executes the newly created `RequiredCommand`, which will contain the following uninitialised attributes,"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "list of `currentModules` in GradPad, all the `leftOverModules` and a `RequiredCommandStorage` to store all modules"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "in the syllabus."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "7. Then, `RequiredCommand.execute()` retrieves the `GradPad` object stored within `Model` and accesses the `modules"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "` field within the `GradPad` with a few method calls, before storing it in `currentModules`."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "8. `RequiredCommand.execute()` then calls its own method `setStorage` to create a `RequiredCommandStorage` object."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "9. Within the `setStorage` method, various method calls are made for each module category (Eg. Foundation, IT Professionalism)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " to set up the `RequiredCommandStorage` object with the all the relevant modules."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "10. Then, `RequireCommand.execute()` call its own method `compareAllGEs()` to check if any GE pillars have not been cleared."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "It then keeps track of which pillars have not been cleared."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "11. `RequireCommand.execute()` then proceeds to call its own methods `compareModules`, `compareScience` and `compareInternship`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "to keep track of undone modules by cross-referring to the `currentModules` list."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "12. Finally, a `CommandResult` is created with the `leftOverModules` to show the filtered list of remaining required modules."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following sequence diagram illustrates how the `required` command is executed."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![RequiredDiagram](images/RequiredSequenceDiagram.png)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Check all available Science Modules"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `science` command allows users to view all available Science modules available on the Computer Science curriculum."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "When the command is executed, a list of all available Science modules will be displayed on the `Command Line Display`."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "This is achieved by tapping into the `RequiredCommandStorage` class to extract and parse the Science modules, while the"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "`ScienceCommand` class handles the logic of displaying the modules. This command is separated from the `required`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "command to avoid cluttering of the `Command Line Display`. "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "As with all operations in GradPad, the `ScienceCommand` class handles the execution of `science` operations."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Given below is a series of steps to show how a `science` operation behaves during its execution."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. The user enters the `science` command string."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a science command and thus creates a `ScienceCommand`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "object."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "6. `LogicManager` executes the newly created `ScienceCommand`, which will contain an empty list of `scienceModules`,"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "to be filled up by fetching a `RequiredCommandStorage` object."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "7. Then, the `ScienceCommand.execute()` calls its own method, `setScienceModules()` which creates a"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "`RequiredCommandStorage` object."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "8. Inside the `setScienceModules()` method, the `setRequiredScience` method of the `RequiredCommandStorage` class"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "is invoked, which sets `scienceModules` with the list of available Science modules."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "9. Finally, a `CommandResult` is created with the `scienceModules` to display the modules."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following sequence diagram illustrates how the `science` command is executed."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![ScienceDiagram](images/ScienceSequenceDiagram.png)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Check all available General Education Modules"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `gem` command allows users to view all available General Education (GE) modules available in NUS."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "When the command is executed, a list of all available GE modules will be displayed on the `Command Line Display`."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "This is achieved with the `GemCommand` and `GemCommandStorage` class. The `GemCommandStorage` class"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "handles the extracting and parsing of JSON module data while the `GemCommand` handles the logic of displaying the"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "modules. This command is separated from `required` to avoid cluttering up the `Command Line Display` due to the hefty"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "amount of GE modules displayed."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "As with all operations in GradPad, the `GemCommand` class handles the execution of `gem` operations."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Given below is a series of steps to show how a `gem` operation behaves during its execution."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. The user enters the `gem` command string."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a gem command and thus creates a `GemCommand`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "object."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "6. `LogicManager` executes the newly created `GemCommand`, which will contain 2  uninitialised"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "`GemCommandStorage` attributes, used to store Semester 1 and 2 General Education Modules."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "7. `GemCommand.execute()` then calls its own method `setSem1Storage` and `setSem2Storage` to create 2 `GemCommandStorage`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "objects."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "8. Within the `setSem1Storage` and `setSem2Storage` methods, various method calls are made for each GE pillar (Eg. GET, GER)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "to set up the `sem1Storage` and `sem2Storage` objects with the all the relevant `sem1GeModules` and `sem2GeModules`."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "9. Finally, a `CommandResult` is created with both the `sem1GeModules` and `sem2GeModules`, displaying all the available"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GE modules by Semester."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following sequence diagram illustrates how the `gem` command is executed."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![GemDiagram](images/GemSequenceDiagram.png)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### Search feature"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The `search` command allows users to search for any module available in NUS and display the module details."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "To retrieve a module\u0027s information, the execution of this command interacts with the `Nusmods` component, which"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "contains all logic related to the access of module data from the NUSMODS public API. We will not go into detail"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "about the component here as we are mainly focused on the implementation of the search functionality."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `SearchCommand` class handles the execution of `search` operations."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a `search` operation behaves during its execution."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user enters a search command string containing a module code, e.g. \"search CS2103T\"."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "4. `GradPadParser.parseCommand()` sees that this is a search command, and so uses the `SearchCommandParser.parse()` "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "method in `SearchCommandParser`."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "5. In `SearchCommandParser`, `SearchCommandParser.parse()` extracts the ModuleCode from the string input."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "6. A `SearchCommand` is then created with the ModuleCode, and is passed back to the"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "`LogicManager` in step 2. "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "7. `LogicManager` executes the newly created `SearchCommand`."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "8. `SearchCommand.execute()` then creates an instance of `ModuleInfoSearcher` to call the `searchModule()` method by"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "passing in the module code."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "9. `searchModule()` method will then take in the module code and retrieve the `ModuleInfo` by calling"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`NusmodsData.getModuleInfo()` in the `Nusmods` package."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "10. The `ModuleInfo` of the searched module retrieved will then be accessed and formatted according to the display "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "requirement."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "11. Finally, a `CommandResult` is created to display the module information that has been retrieved."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The following sequence diagram illustrates how the `search CS2103T` command is executed."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "![SearchSequenceDiagram](images/SearchSequenceDiagram.png)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Tags feature"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad allows users to add tags to modules that they add, remove tags from existing modules, list out all"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "existing tags in GradPad, and filter the `Completed Modules` list by tags."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Tags are represented by `Tag` objects which are referenced by `Module` objects when modules are tagged. "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "To prevent duplicate tags from being created everytime a module is tagged (as was the case in the original AB3),"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the `GradPad` class uses a `UniqueTagMap` class to keep track of a collection of unique `Tag` objects. With this,"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "when a user tags a module with an existing tag, `UniqueTagMap` looks for the existing `Tag` object and adds it to"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "that `Module` object. As such, all modules who use a particular tag now reference that corresponding singular `Tag"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "` object."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The main benefit of this is evident when GradPad needs to print out a list of all tags, which can be simply done"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "by printing out `UniqueTagMap`\u0027s tags. Otherwise, one would have to iterate through all `Module` objects,"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "retrieve all their tags, and then filter them to remove any duplicates."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Following this, `UniqueTagMap` also has to handle the addition and deletion of modules, which is utilized by "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the `GradPad` class\u0027s add, edit, and delete operations for modules."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Adding a module with tags"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. When a module with tags is going to be added, the `GradPad` class within the `Model` component is passed that newly"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " constructed `Module` object from the `Logic` component (see [add feature](#add-feature))."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. Its `addModule` method is invoked with this object as a parameter."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. Before adding this module to its list of modules, this new module\u0027s tags will first be parsed and replaced with"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "existing tags where possible. This is done using the`checkAndReplaceTags` method in the `UniqueTagMap` class."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. The `checkAndReplaceTags` method basically loops through a list of `Tag` objects and checks each one against"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the collection of existing `Tag` objects it already holds. If it comes across a \"new\" `Tag` that already exists"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "within its collection of tags, it replaces that \"new\" `Tag` with its existing equivalent `Tag` object in the list."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Otherwise, it adds genuinely new `Tag` objects to its collection."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. Now that the new `Module` object\u0027s tags have been checked and replaced, the model adds this `Module` to its"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`UniqueModuleList`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following diagram illustrates this flow of logic."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![AddModuleTagsSequenceDiagram](images/AddModuleTagsSequenceDiagram.png)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Deleting a module with tags"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "When a module is being deleted, its `Tag` objects within cannot simply be deleted, since multiple"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`Module`s may share the same `Tag` object. Yet at the same time, when a `Tag` is no longer referenced by any `Module`,"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "it should be removed so that it doesn\u0027t loiter around in `UniqueTagMap`. To achieve this, `Tag` objects"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "store a count of the no. of modules that are currently using it. When this count hits 0, the `Tag` can be safely"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " removed."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This is the execution flow when a module is deleted:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The `removeModule` method in the `GradPad` class is invoked."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. The `remove` method in `UniqueTagMap` is then invoked with a set of all `Tag` objects belonging to the `Module` that"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "is to be removed."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. Within the `remove` method, each `Tag`\u0027s module count is decremented. If the count reaches 0 at this point,"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "then the `Tag` must be unused by all modules. It is thus removed from the collection of `Tag`s within"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`UniqueTagMap`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. The `Module` object can now be deleted from the `UniqueModuleList` in the `GradPad` class."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The diagram illustrates this flow of logic:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![DeleteModuleTagsSequenceDiagram](images/DeleteModuleTagsSequenceDiagram.png)"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Editing a module\u0027s tags"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "When editing a module\u0027s tags, the old tags are simply \"removed\" as when "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[a module is deleted](#deleting-a-module-with-tags), followed by \"adding\" the new tags, as when"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[a module is added](#adding-a-module-with-tags)."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedGradPad`. It extends `GradPad` with an undo/redo history, stored internally as an `gradPadStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* `VersionedGradPad#commit()` — Saves the current GradPad state in its history."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* `VersionedGradPad#undo()` — Restores the previous GradPad state from its history."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* `VersionedGradPad#redo()` — Restores a previously undone GradPad state from its history."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitGradPad()`, `Model#undoGradPad()` and `Model#redoGradPad()` respectively."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedGradPad` will be initialized with the initial GradPad state, and the `currentStatePointer` pointing to that single GradPad state."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 2. The user executes `delete c/CS2103T` command to delete the `CS2103T` Module from the Completed Modules. The `delete` command calls `Model#commitGradPad()`, causing the modified state of the GradPad after the `delete c/CS2103T` command executes to be saved in the `gradPadStateList`, and the `currentStatePointer` is shifted to the newly inserted GradPad state."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 3. The user executes `add c/CS2100 …​` to add a new module. The `add` command also calls `Model#commitGradPad()`, causing another modified GradPad state to be saved into the `gradPadStateList`."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitGradPad()`, so the GradPad state will not be saved into the `gradPadStateList`."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 4. The user now decides that adding the module was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoGradPad()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous GradPad state, and restores the GradPad to that state."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial GradPad state, then there are no previous GradPad states to restore. The `undo` command uses `Model#canUndoGradPad()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoGradPad()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the GradPad to that state."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `gradPadStateList.size() - 1`, pointing to the latest GradPad state, then there are no undone GradPad states to restore. The `redo` command uses `Model#canRedoGradPad()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the GradPad, such as `list`, will usually not call `Model#commitGradPad()`, `Model#undoGradPad()` or `Model#redoGradPad()`. Thus, the `gradPadStateList` remains unchanged."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitGradPad()`. Since the `currentStatePointer` is not pointing at the end of the `gradPadStateList`, all GradPad states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add c/CS2100 …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire GradPad."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the module being deleted)."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Anybody → Students → University Students → tech savvy University student → Computer Science students"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "NUS Computer Science undergraduate students, who wish to keep track of their necessary modules (how many are done, how many are left), and also the total MCs tabulation."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Keep track of your degree progress and modules taken during your time in NUS with ease. Faster and more lightweight than traditional GUI applications, view and update your progress by issuing simple text commands. Modules are conveniently categorized into their respective groupings e.g. Unrestricted Electives, Computer Science Foundations, etc."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | NUS Student                                | see my total Modular Credits   | know how many more I require to graduate                 |"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | NUS Student                                | see my past Modules            | know what I have taken before                                                                   |"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | user                                       | delete modules                 | remove entries that I no longer need                                 |"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | user                                       | add modules and MCs            | keep track of my Modular progress |"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* *`    | first-time user                            | access the available commands  | use the app efficiently                |"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* *`    | user                                     | save and load my Module data   | keep track of my Modular progress                                            |"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "(For all use cases below, the **System** is the `GradPad` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case: UC01 - Delete a Module from `Completed Modules`**"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1.  User requests to delete a specific Module in the `Completed Modules`"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2.  GradPad deletes the module"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "3.  GradPad displays the deleted module onto the `Command Line Display`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 1a. The module does not exist in `Completed Modules`."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 2a. The given module code is invalid."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 2a1. GradPad shows an error message."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC02 - Add a Module into `Completed Modules`**"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to add a module into the `Completed Modules`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad adds the module into `Completed Modules`"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "3. GradPad displays the module added onto the `Command Line Display`"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    "
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 1a1. GradPad shows an error message."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC03 - View help**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. User requests to view help commands"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. GradPad shows a list of commands"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    "
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC04 - View all current modules**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to view list of modules in `Completed Modules`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad shows all modules added into `Completed Modules`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case: UC05 - Edit a Module in `Completed Modules`**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to list all modules in `Completed Modules`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad shows the list of modules in `Completed Modules`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "3. User requests to edit a module in `Completed Modules`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "4. Module is replaced with updated fields"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 2a. The list of modules in `Completed Modules` is empty."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 3a1. GradPad shows an error message."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        "
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 3b. The input fields format is invalid."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 3b1. GradPad shows an error message."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        "
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC06 - View required modules in CS curriculum**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to view all required modules in CS curriculum"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad displays the required modules in CS curriculum onto the `Command Line Display`"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC07 - Search for module details**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to search for a module in the CS curriculum."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad displays the module details in the `Command Line Display`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 1a1. GradPad shows an error message."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      Use case ends.  "
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 2a. The module searched does not exist in the required module list."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 2a1. GradPad shows an error message."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        "
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        "
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC08 - exit GradPad**"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. User requests to exit GradPad"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. GradPad exits"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2.  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3.  Should be backwards compatible with data produced by earlier versions of the application."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4.  Should be able to hold up to 1000 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6.  Should be able to respond within one seconds."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7.  Should be usable by a novice who has never done module tracking of any sort."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8.  The application is not required to handle module tracking by NUS students outside of the Computer Science major. "
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Module Code**: Each module of study has a unique module code consisting of a two- or three-letter prefix that generally denotes the discipline, and four digits."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   * **First digit**: Represents the level of the module, i.e., 1000 indicates a Level 1 module and 2000, a Level 2 module, etc."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   * **Second digit**: Indicates the type of module, i.e., 1 for essential, 2 for elective, 3 for enrichment."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Modular Credit (MC)**: A unit of the effort, stated in terms of time, expected of a typical student in managing his/her workload. The MC-value of a module is derived by dividing the estimated total number of workload hours per week for that module by the credit factor of 2.5 (i.e., one MC is equivalent to 2.5 hours of study and preparation per week)."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "## **Appendix: Instructions for Manual Testing**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Launch and Shutdown"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Initial Launch"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Double-click the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      Expected: GUI runs with a set of sample modules. The window size may not be optimum."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Saving Window Preferences"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Shutdown"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Test case: Click the \"close\" button (red button) at the top of the window.\u003cbr\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      Expected: The window closes immediately."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Test case: `exit`\u003cbr\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      Expected: GUI shows a farewell message,\"Exiting GradPad as requested ...\" and delays for 1.5 seconds,"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      after which the window closes."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Test case: `exitt`\u003cbr\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      Expected: Window does not close. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Testing features"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Add a Module"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites: "
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module code must be specified."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format must be valid, e.g. \u0027CS2100\u0027 is a valid module code."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module to be added must exist in the valid modules list fetched from NUSMods, e.g. module code CS2100 is a"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   valid module, whereas module code CS1000 is an invalid module."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module added must not already exist in GradPad."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `add` format."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `add cs2100 t/fun`\u003cbr\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module is added into \u0027Completed Modules\u0027 in GradPad. Details of the added module are shown in the result display."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `add cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module added. _Duplicate module_ message is shown in the result display."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `add cs2100 t/funnn`\u003cbr\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module added. _Duplicate module_ message is shown in the result display."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `add cs2100 Computer Organisation`\u003cbr\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `add cs1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid module_ message is shown in the result display."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `add`\u003cbr\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `addd cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module added. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Delete a Module"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites: "
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code must be specified."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format must be valid."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be deleted must exist in the list being displayed in GradPad, e.g. CS2100 is in the list and CS2106 is not."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `delete` format, followed by `y`, `ye`, or `yes` formats for confirmation."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " "
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:     "
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `delete cs2100` followed by `y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100 module is deleted from \u0027Completed Modules\u0027 in GradPad. _Confirmation_ message followed by"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   details of the deleted module are shown in the result display."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `delete cs2100` followed by `n`\u003cbr\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module deleted. _Confirmation_ message followed by _Command aborted_ message are shown in the"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   result display."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete cs2100 Computer Ogranisation`\u003cbr\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete cs2106`\u003cbr\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Module not found_ message is shown in the result display."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete`\u003cbr\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `deleteee cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module deleted. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " "
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Force Delete a module"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites: "
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module code must be specified."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module code format must be valid."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module to be deleted must exist in the list being displayed in GradPad, e.g. CS2100 is in the list and CS2106 is not."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `fdelete` format."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " "
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:     "
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fdelete cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100 module is deleted from \u0027Completed Modules\u0027 in GradPad. Details of the deleted module are shown"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   in the result display."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fdelete cs2100 Computer Ogranisation`\u003cbr\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module deleted. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fdelete cs2106`\u003cbr\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module deleted. _Module not found_ message is shown in the result display."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      "
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fdelete`\u003cbr\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fdeleteee cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module deleted. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Clear current list of Modules"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites:"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `clear` format followed by `y`, `ye`, or `yes` formats for confirmation."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `clear` followed by `y`\u003cbr\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: All modules are cleared from GradPad. _Confirmation_ message followed by _GradPad cleared_ message"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   are shown in the result display."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `clearrr`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Modules are not cleared from GradPad. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Force Clear current list of Modules"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites:"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `fclear` format."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fclear`\u003cbr\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: All modules are cleared from GradPad. _GradPad cleared_ message is shown in the result display."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `fclearrr`"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Modules are not cleared from GradPad. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Edit a Module"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites:"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code of module to be edited must be specified."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format of module to be edited must be valid."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be edited must exist in the list being displayed in GradPad, e.g. CS2100 is in the list and CS2106 is not."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module replaced must be an existing module in NUS."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. At least 1 field to edit must be specified (module code/tags)"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Format of field to edit must be valid."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Replaced fields must be different from current fields."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `edit` format."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " "
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:  "
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 c/cs2103t`\u003cbr\u003e"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100 module is replaced with CS2103T. Details of the edited module are shown in the result display."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 Computer Organisation c/cs2103t`\u003cbr\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2106 c/cs2103t`\u003cbr\u003e"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Module not found_ message is shown in the result display."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 c/cs1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module edited. _Invalid module_ message is shown in the result display."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2100 c/cs2100s Computer Organisation II`\u003cbr\u003e"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 c/cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module edited. _Same module_ message is shown in the result display."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 t/fun`\u003cbr\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100 module tag is replaced with \"fun\" tag. Details of the edited module are shown in the result display."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 t/fun`\u003cbr\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module edited. _Same tag_ message is shown in the result display."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit cs2100 t/fun!!!`\u003cbr\u003e"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module edited. _Invalid tag format_ message is shown in the result display."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edit`\u003cbr\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  "
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `edittt cs2100 t/cool`\u003cbr\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module edited. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### List All Modules"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisite: "
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `list` format."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: The full list of \u0027Completed Modules\u0027 is displayed. \"Listed all modules\" message shown in the result display."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `listttt`\u003cbr\u003e"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Current list remains unchanged. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Find a Specific Module or a Group of Modules"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites: "
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Arguments must be specified."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module to be included must exist in the \u0027Completed Modules\u0027 in GradPad, e.g. CS2100 (fun), CS2101 (fun),"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   ST2334 (fun) and CS3230 are in the list and CS2106 is not. The words in the bracket represent the module tags."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `find` format."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:    "
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs2`\u003cbr\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100 and CS2101 are displayed. \"2 modules found!\" message shown in the result display."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs2 st`\u003cbr\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100, CS2101 and ST2334 are displayed. \"3 modules found!\" message shown in the result display."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs3230`\u003cbr\u003e"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS3230 is displayed. \"1 modules found!\" message shown in the result display."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs2106`\u003cbr\u003e"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No modules displayed. \"0 modules found!\" message shown in the result display."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `find fu`\u003cbr\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100, CS2101 and ST2334 are displayed. \"3 modules found!\" message shown in the result display."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `find fun`\u003cbr\u003e"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: CS2100, CS2101 and ST2334 are displayed. \"3 modules found!\" message shown in the result display."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `find funnnn`\u003cbr\u003e"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No modules displayed. \"0 modules found!\" message shown in the result display.  "
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find`\u003cbr\u003e"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Current list is unchanged. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `findd CS2101` \u003cbr\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No modules displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Check Total Modular Credits"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisite:"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `checkmc` format."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `checkmc` \u003cbr\u003e"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Total modular credits are calculated and displayed. If there are no modules in \u0027Completed Modules\u0027,"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   total modular credits will be 0."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `checkmccccc` \u003cbr\u003e"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Total modular credits are not calculated. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Open Help Page"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisite:"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `help` format."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `help` \u003cbr\u003e"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Help page is displayed."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `helppppp` \u003cbr\u003e"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Help page is not displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Show Required Modules"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisite:"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `required` format."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `required` \u003cbr\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: All required modules are displayed in the result display. Modules already in the \u0027Completed Modules\u0027 list in GradPad would not be displayed in the \u0027Required Modules\u0027 list."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `requiredddd` \u003cbr\u003e"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Required modules are not displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Show available Science Modules"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisite:"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `science` format."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `science` \u003cbr\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: All available Science modules are displayed in the result display. Modules already in the \u0027Completed Modules\u0027"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   list would not be displayed."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `scienceeeee` \u003cbr\u003e"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: Science modules are not displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Show available General Education Modules"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisite: "
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `gem` format."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `gem` \u003cbr\u003e"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: All available General Education modules are displayed in the result display. Modules already in the \u0027Completed Modules\u0027"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   list would not be displayed."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `gemmmmm` \u003cbr\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: General Education modules are not displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### Search Module Information"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites: "
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code must be specified."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format must be valid."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Module to be searched must exist in the valid modules list fetched from NUSMods,e.g. module code CS2100"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   is a valid module, whereas module code CS1000 is an invalid module."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `search` format."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module information is displayed in the result display."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `search cs2100 Computer Organisation`\u003cbr\u003e"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search cs1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid module_ message is shown in the result display."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search`\u003cbr\u003e"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. Other invalid search commands to try: `search c/cs2103t`, `search 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   Expected: No module information is displayed. _Invalid module_ message is shown in the result display."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `searchh cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No module information is displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "#### List all current Tags"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Prerequisites:"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   1. Command must follow the `tags` format."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Test Cases:"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `tags`\u003cbr\u003e"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: All tags currently in use will be shown in the result display."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   "
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Test case: `tagss`\u003cbr\u003e"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "   Expected: No tags displayed. _Unknown command_ message is shown in the result display."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   1. Corrupt the current saved data file under `./data/gradpad.json`. One way is to add `-` into one of the module "
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   code."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      "
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   1. Open the jar file `gradpad.jar`\u003cbr\u003e"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   Expected: No data shown in the Completed Modules list."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   "
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   1. Delete the data folder `./data`"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   "
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   1. Open the jar file `gradpad.jar`\u003cbr\u003e"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   Expected: Saved data will reset to sample data and will be shown in the Completed Modules list."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## **Appendix: Effort**"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### 1. NusMods  ![NUSMods](images/nusmods_small.png) \u003cbr\u003e"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad is tightly integrated with the NUSMods public API by using it to retrieve NUS module information to display to"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "users. This integration with NUSMods is definitely complex and not easy. Fortunately, one of our team members had some"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "experience with web development and managed to integrate the API into GradPad. This allows GradPad to "
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "retrieve up-to-date module data directly from NUSMods, making GradPad more relevant and adaptable."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As if integrating GradPad, a Java application, with a public web API isn\u0027t tedious enough, we also had to meet the"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "project constraint that GradPad should be able to function even without an active connection to the API. Ideally,"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "it would be straightforward for us to simply scrape data from the API and store it in our own database via a DBMS,"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "which is generally done in other applications to reduce dependency on external APIs. However, the module also"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "forbids the use of a DBMS, which meant we had to come up with a way to scrape and store data in local files instead."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "At the end of the day, we spent a considerable effort to write a script in Java that scrapes data from the API"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ", transforms them into Java objects, and serializes them into human-readable JSON files."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### 2. NUS CS Curriculum"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Our target audience is Computer Science Undergraduates and so we had to get the NUS CS curriculum and utilize"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "this data in GradPad. Our initial idea was to just store the entire list of modules in the CS curriculum into GradPad."
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "However, we soon realized that there are way more modules than we had anticipated as there is a list of GEMs and "
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "science modules that we had initially missed out. Besides this, there are also preclusions in some modules and"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "equivalent modules with different module codes. These are tough challenges that we had to brainstorm hard to come up"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "with innovative solutions to address them. Fortunately, our team managed to address these fundamental problems in the final product."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### 3. UI"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Our GradPad Team has spent a considerable amount of effort on the UI aspect, from choosing the position of the result"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "display and command box input, to the color theme that is the most pleasing to the audience. There should also be a"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "special mention to Syafiq for coming up with the logo of GradPad from scratch, personalizing GradPad\u0027s Ui to our target"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "audience. Our team absolutely loves the color theme we have ended up with and we believe our target audience (Computer"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Science Undergraduate) will too."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### 4. Overall"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As a whole, we believe that even though this project was rather demanding and time-consuming, we thoroughly enjoyed "
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "working with one another. Right from the start, we helped each other with the setting up of Github and the process of"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the project\u0027s workflow. All of us were also very encouraging and constantly reviewed each other\u0027s pull requests with"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "comprehensive comments, allowing us to learn from each other\u0027s strengths in coding. We are definitely proud of GradPad"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ", and believe that it will serve its purpose to the fullest potential."
      }
    ],
    "authorContributionMap": {
      "shaokiat": 172,
      "silvernitro": 390,
      "mhdsyfq": 184,
      "-": 278,
      "yan-soon": 417
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "## GradPad"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "We are a team of **Computer Science Undergraduates** working together to solve **module management** and **graduation planning** problems"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "faced by fellow Computer Science students. Below is the detailed User Guide for effective use of GradPad which can help you"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ease and improve your **module planning process**."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad is a one-stop solution to **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Planning for modules has always been a tedious process but it does not have to be."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The current approach to planning and tracking graduation requirements is to open up tabs after tabs of NUS resources such as "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[NUSMods](https://nusmods.com/) and [websites](https://www.comp.nus.edu.sg/programmes/ug/cs/curr/) of the School of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Computing, which can be messy at times. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "So, our team has come up with the idea of an **easy-to-use**, **all-in-one application** that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "can ease the process of **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad **consolidates** the modules you have taken and **displays** the remaining required modules to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ease your module planning process. A **module searching platform** is also included in GradPad, providing easy"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**navigation** of modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This user guide introduces what you can do with GradPad and the steps needed to do them. In addition,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "it includes a [quick start guide](#quick-start) that walks you through the installation and set-up process."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "With this guide, you\u0027ll be ready to use GradPad in no time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "## NUSMods integration  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "![NUSMods](images/nusmods.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "To streamline your module searching process with added convenience, GradPad integrates data from [NUSMods](https://nusmods.com/). With this, "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "you no longer have to visit NUSMods separately to look up module information. Instead, GradPad offers you all that data "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "in the same app you use to plan your modules itself."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "We have requested and was granted permission from NUSMods to utilise their platform to retrieve data such as NUS course catalogues"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "and **module information**. These data are retrieved on the go in **realtime**, directly from NUSMods."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Follow the steps below to learn how to get started with GradPad!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Download the latest `GradPad.jar` from [here](https://github.com/AY2021S1-CS2103T-T09-1/tp/releases)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your GradPad."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. Ensure you have **internet connectivity** to fully utilise GradPad with the latest data from [NUSMods](https://nusmods.com/)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. Double-click the file to start the app. The Main Page similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   ![Ui](images/AnnotatedUi.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Type a command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " display the help page.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   * **`list`** : Lists all added modules."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   * **`add`** `CS2103T` : Adds a module named `CS2103T` to the GradPad."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   * **`delete`** `CS2103T` : Deletes the module named `CS2103T` in the current list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   * **`search`** `CS2103T` : Searches for module named `CS2103T` from the NUSMods database "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   (if connected to the internet) or from a local saved file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* You can still use GradPad without an internet connection. However, you will only be able to access modules"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "within the NUS Computer Science [curriculum](https://www.comp.nus.edu.sg/programmes/ug/cs/curr/) while you\u0027re offline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Detailed explanation of each command can be found [here](#commands)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Refer to the [Feature Summary List](#feature-summary-list) below for a summary of all commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Feature Summary List"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "A consolidated view of GradPad\u0027s feature list is listed below in a table form for easy reference."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " Features                         |    Description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " ----------------------------------------|------------"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Add a Module                            | Allows you to add any module of choice to the `Completed Modules` list for tracking purposes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " View Added Modules                      | Allows you to check all the modules you\u0027ve added  to `Completed Modules`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Find Modules from Completed Modules     | Allows you to look for modules in `Completed Modules` using keywords"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Delete a Module                         | Allows you to delete unwanted modules in `Completed Modules`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Edit a Module                           | Allows you to edit the details of a module you\u0027ve already added to `Completed Modules`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Check Modular Credits                   | Allows you to check your current modular credit tally"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " View all Required Modules               | Allows you to display all required modules in the Computer Science curriculum onto the `Result Display`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " View all General Education Modules      | Allows you to display all available General Education Modules offered in NUS, onto the `Result Display`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " View all Science Modules                | Allows you to display all viable Science modules in the Computer Science curriculum onto the `Result Display`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " Search for a Module                     | Allows you to search for any module available in NUS and display the module details in the `Result Display`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " Find Tags from Completed Modules        | Allows you to check all tags that are used in `Completed Modules`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " View Help                               | Allows you to view a list of all possible commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Exit the Program                        | Allows you to terminate the GradPad program"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Refer to [Commands](#commands) below for details on all commands."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Detailed explanations of each commands and their respective usage are listed under this section."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**:information_source: Notes about the Command Format and Feature Descriptions:**\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* When a command requires parameters, they can be entered in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "For example, if the command specifies `edit MODULE_CODE c/NEW_MODULE_CODE t/core`, `edit MODULE_CODE t/core c/NEW_MODULE_CODE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "` is also acceptable."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* When a command does not require parameters, e.g. `help`, adding extraneous words, e.g `help me` will not affect the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " command, allowing the command to run as per normal."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* Highlighted words (e.g. `this`) refer to actual commands or sections on the GradPad user interface."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Adding a module: `add`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "You have just completed the CS2101 module, and you want to add the module into GradPad to track your academic progress. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "You found the module to be enjoyable so you would like to add tags to remind yourself of how fun the module was."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `add` command allows you to add a module you have completed into the Completed Modules list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "You can add a module by specifying a valid module code. You can also include multiple tags using the prefix `t/` but they are optional."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Conveniently, you don\u0027t have to specify the module title or modular credits of the module you are adding - GradPad"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "automatically retrieves them for you using data from NUSMods."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* You cannot add a module that has been previously added as GradPad does not allow duplicate modules."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* You can use multiple words in a tag. However, there should only be a single space between any 2 words."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Tags **within a single module** are case-insensitive, i.e. \"core\", \"CORE\", and \"CoRe\" are all considered the same."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "In such a case, only the first tag amongst a group of duplicates will be added. For e.g."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`add cs2103t t/core t/CORE t/CoRe` results in only \"core\" being added."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To add the module:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Type `add cs2101 t/superbmodule t/superfun` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Add1](images/Add1.png)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"The following module has been successfully added\", along with the details of the module. You will then be able to see the CS2101 module at the bottom of the Completed Modules list.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Add2](images/Add2.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Viewing all added modules: `list`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "You have filtered the Completed Modules list to show modules whose module codes contain \u0027cs1\u0027, and you wish to restore the list to view all the modules you have added."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `list` command allows you to view all the modules you have added into the Completed Modules list in GradPad using this command. This is especially useful when you have previously used a command that filters the list (i.e. `find`) and you wish to restore the list to its original state."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To view all modules:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `list` into the command box, and press **Enter** to execute it."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![List1](images/List1.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"All your modules have been listed!\", and you will be able to view all your previously added modules in the Completed Modules list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![List2](images/List2.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Viewing all added tags: `tags`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "You wish to filter your `Completed Modules` list to display modules tagged as \"foundation\". However, you\u0027ve added"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "tons of tags to tons of modules and so you can\u0027t remember if this tag actually exists. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `tags` command allows you to view all the tags currently in your `Completed Modules` list in"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " GradPad. This is useful when you want to see what tags you can filter your `Completed Modules` by (see the "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " `find` command below)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "To view all tags:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Type `tags` into the command box, and press **Enter** to execute it."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![Tags1](images/Tags1.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display a list of all existing tags."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![Tag2](images/Tags2.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Editing module details: `edit`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "When you were a freshman, you added a module with tags \"superbmodule\" and \"superfun\". But now that you\u0027re graduating,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "you actually think that the module was the best you\u0027d taken in NUS."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `edit` command allows you to edit the details of a module that you have added into GradPad."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You can edit a module by specifying the module code of the module in the Completed Modules list, followed by the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "fields you wish to edit with their respective prefixes: `c/` for new module code, `t/` for new tag. You may edit"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " multiple fields in a"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "single `edit` command. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The respective module title and modular credits for a module code will be automatically updated with data from NUSMods."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " \u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " **:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* When you edit tags, instead of changing the descriptions of the existing tags, editing tags replaces"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " them with new ones."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Instead of deleting that module and adding it again with new tags, you can simply edit the module and replace the tags."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " \u003c/div\u003e "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "To edit the tag of an existing module:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `edit cs2101 t/bestmodule` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Edit1](images/Edit1.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. The result display box will display the message \"The following module has been successfully edited\", along with the "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "newly edited details of the module. You will also be able to see that the tags of the module displayed in the Completed "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Modules list have been replaced."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Edit2](images/Edit2.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Finding a specific module or a group of modules: `find`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Let\u0027s say you have been adding a huge number of modules into GradPad, and you have lost track of the modules you "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "have added. You want to check and see all MA-coded modules with the \"bestmodule\" tag."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `find` command allows you to filter the Completed Modules list to display the modules that you want to see. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You can do this by specifying parts of the module code of the module(s) you wish to display."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Additionally, you can also specify the tags of the module(s) you wish to display. Likewise, you can also simply"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "specify parts of a tag instead of the entire tag."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Instead of scrolling through the long Completed Modules list and checking the modules one by one, you can easily filter the list to display that module by `find`-ing said module."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To find the module:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `find ma bestmodule` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Find1](images/Find1.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"2 modules found!\" and you will be able to see only the modules "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "whose module codes contain \"ma\" and modules with \"bestmodule\" as a tag in the Completed Modules list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Find2](images/Find2.png)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### Deleting a Module: `delete`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "You have added several modules into GradPad but you realised that you accidentally added an additional module \u0027CS2107\u0027 that you have not completed yet. If you no longer want that module in your Completed Modules list, you can simply delete it."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `delete` command allows you to remove a module you have added into GradPad."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "You can delete a module by specifying the **module code** of the module. (Case insensitive)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To delete the module:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `delete cs2107` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete1](images/Delete1.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. When you are prompted for a confirmation, type `yes` into the command box, and press **Enter**.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete2](images/Delete2.png)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. The result display will display the message \"The following module has been successfully deleted\" along with the details of the module you deleted."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete3](images/Delete3.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Checking total modular credits: `checkmc`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Note:** A **Modular Credit** (MC) is a unit of the effort, stated in terms of time, expected of a typical student in managing his/her workload, with"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "an average of 20 MCs per semester."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Scenario:\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You want to make sure you have hit the minimum criteria of 70MCs required for applying internship modules or the 160MCs graduation requirement."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The `checkmc` command allows you to check the total amount of modular credits you have accumulated so far using this command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "This gives you a rough gauge of the progress of your graduation planning."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To check total modular credits:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `checkmc` into the command box, and press **Enter** to execute it."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![CheckMc1](images/CheckMc1.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display a message telling you how many modular credits you have accumulated so far."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![CheckMc2](images/CheckMc2.png)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Checking required modules: `required`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario: \u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "You have added several modules into your GradPad so far but you are unsure if they are part of the Computer Science curriculum. You can simply check by using the `required` command."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `required` command allows you to check the modules of the Computer Science curriculum you have yet to take, based on your `Completed Modules` list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**:bulb: Tip:**\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `required` command is able to identify equivalent and precluded Modules! (Eg. CS1010X and CS1101S)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "To check required modules:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Type `required` into the command box, press **Enter** to execute it."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Required1](images/Required1.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will then display all the modules you have yet to take for each particular field, as shown below."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Required2](images/Required2.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Checking General Education Modules: `gem`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario: \u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "You wish to take some GE modules to clear your GE requirement, but you are unsure what modules are available. You can simply check by using the `gem` command."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `gem` command allows you to check all the available General Education (GE) modules that are available in NUS. To ease your planning, the `gem` command indicates which modules are available in Semester 1 and/or 2."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "To check GE modules:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Type `gem` into the command box, press **Enter** to execute it."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Gem1](images/Gem1.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will then display all the available GE modules that you can take, categorised into Semester 1 and 2, as shown below."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Gem2](images/Gem2.png)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Checking Science modules: `science`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario: \u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "You wish to take a Science module to clear your Science requirement, but you forgot what modules are available. You can simply check by using the `science` command."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `science` command allows you to check all the available Science modules of the Computer Science curriculum."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "To check Science modules:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Type `science` into the command box, press **Enter** to execute it."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Science1](images/Science1.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will then display all the available Science modules that you can take, as shown below."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Science2](images/Science2.png)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Searching for a module: `search`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario: \u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "After viewing the required modules you have yet to take, you wish to find out more about those modules (Eg. What are they about? "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Do they have any pre-requisites?). You can simply look up those details by using the `search` command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `search` command allows you to search for any module available in NUS."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "You can search for a module by specifying the module code of the module. The essential module details will then be retrieved "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "from NUSMods database directly and displayed in the result display box."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**:information_source: Note:**\u003cbr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "If you are not connected to the internet, you can only search for modules that are in the NUS Computer Science"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " curriculum."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Type `search MA1521` into the command box, press **Enter** to execute it."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Search1](images/Search1.png)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will then display all the relevant information about the module \"MA1521\", as shown below."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Search2](images/Search2.png)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Showing the help display: `help`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Scenario: \u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "You are in the midst of planning your modules, but you suddenly forgot what commands are available to you. Simply refresh your memory by using the `help` command to see all available commands and their respective functions."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `help` command displays all of GradPad\u0027s available commands and how to use them, to you. This command is useful for first-timers or users who generally do not know how to use GradPad."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "To show the help display:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Type `help` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![Help1](images/Help1.png)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. The result display box will display all of GradPad\u0027s commands along with examples on how to use them.\u003cbr\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![Help2](images/Help2.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Exiting GradPad: `exit`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Besides clicking the \"close\" button (red button) at the top of the GradPad window, you can exit GradPad using the `exit` command."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To exit:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `exit` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Exit](images/Exit1.png)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"Take care!\" and after a 1.5 second delay, the application will terminate.\u003cbr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Exit2](images/Exit2.png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous GradPad home folder."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "This section is the table of all the commands available and their respective usage example in GradPad."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**:information_source: Notes about the Command summary:**\u003cbr\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* Words in curly braces (e.g. `{module code}`) refers to **compulsory** input that is required for the command to function."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* Words in square brackets (e.g. `[c/module code]`) refers to **optional** input that can be entered."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "--------|-------|----------"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Add** | `add {module code} [t/tags]` | `add CS2100 t/core`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Edit** | `edit {module code} [c/module code] [t/tags]` | `edit cs2103 c/CS2103T t/core`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Delete** | `delete {module code}` | `delete CS2103T`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Completed Modules** | `list`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Find** | `find {module code or tag}` | `find CS2103T foundation fun`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Check MCs** | `checkmc`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Required Modules** | `required`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**General Education Modules** | `gem`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**Science Modules** | `science`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Search module details** | `search {module code}` | `search CS2103T`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**Check existing Tags** | `tags`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 86,
      "silvernitro": 84,
      "mhdsyfq": 69,
      "-": 106,
      "yan-soon": 90
    }
  },
  {
    "path": "docs/diagrams/AddModuleTagsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPad\" as GradPad MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":UniqueTagMap\" as UniqueTagMap MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":UniqueModuleList\" as UniqueModuleList MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e GradPad : addModule(m)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPad"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad -\u003e UniqueTagMap : checkAndReplaceTags(m.tags)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate UniqueTagMap"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "UniqueTagMap --\u003e GradPad : replacedTagSet"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate UniqueTagMap"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad -\u003e UniqueModuleList : addModule(mWithReplacedTags)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate UniqueModuleList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "UniqueModuleList --\u003e GradPad"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate UniqueModuleList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--GradPad"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPad"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 27
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Module\" as Module LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"e:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[-\u003e LogicManager : execute(\"add c/CS1231 cr/4\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"add c/CS1231 cr/4\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e AddCommandParser : parse(\"c/CS1231 cr/4\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseModuleCode(\"CS1231\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ParserUtil --\u003e AddCommandParser : code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseModularCredits(\"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ParserUtil --\u003e AddCommandParser : credits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseTags(\"\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ParserUtil --\u003e AddCommandParser : tagList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create Module"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e Module : Module(code, credits, tagList)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate Module"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Module --\u003e AddCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate Module"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e AddCommand : AddCommand(Module)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser --\u003e GradPadParser : a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand -\u003e Model : addModule(Module)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 96
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main #grey"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class Nusmods NUSMODS_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "UI -[#green]\u003e Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right[#green]-\u003e Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -[#blue]-\u003e Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down[#blue]-\u003e Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Logic -right[#blue]-\u003e Nusmods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e UI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Main -up[#grey]-\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Nusmods .right.\u003e File"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Storage .right[STORAGE_COLOR].\u003eFile"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "User ..\u003e UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 3,
      "-": 31
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete c/CS2103T\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete c/CS2103T\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteModule(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveGradPad(gradPad)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad *-right-\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueTagList -[hidden]down- UniqueModuleList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueTagList -[hidden]down- UniqueModuleList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueModuleList o-right-\u003e Module"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleCode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModularCredits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 9,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CheckMcSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"C:CheckMcCommand\" as CheckMcCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"gradpad:GradPad\" as GradPad MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e LogicManager : execute(\"checkmc\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"checkmc\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CheckMcCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e CheckMcCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CheckMcCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e GradPadParser : C"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CheckMcCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser --\u003e LogicManager : C"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e CheckMcCommand : execute()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CheckMcCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e Model : getGradPad()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model --\u003e CheckMcCommand : gradpad"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e GradPad : getModuleList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPad"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad -\u003e CheckMcCommand : modules"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPad"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e CheckMcCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CheckMcCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "note left: sum up MCs of all modules"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e CheckMcCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CheckMcCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CommandResult --\u003e CheckMcCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CheckMcCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 66
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "if () then ([command commits GradPad])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    :Save GradPad to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    gradPadStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteModuleTagsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPad\" as GradPad MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":UniqueTagMap\" as UniqueTagMap MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":UniqueModuleList\" as UniqueModuleList MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Tag\" as Tag MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e GradPad : removeModule(m)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPad"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad -\u003e UniqueTagMap : remove(m.tags)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate UniqueTagMap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "loop for tag in m.tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "UniqueTagMap -\u003e Tag : decrementModuleCount()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Tag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Tag --\u003e UniqueTagMap"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "UniqueTagMap --\u003e GradPad"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate UniqueTagMap"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad -\u003e UniqueModuleList : remove(m)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate UniqueModuleList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "UniqueModuleList --\u003e GradPad"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate UniqueModuleList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--GradPad"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPad"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 38
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "[-\u003e LogicManager : execute(\"delete CS2103T\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"delete CS2103T\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e DeleteCommandParser : parse(\"CS2103T\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser -\u003e ParserUtil : parseModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ParserUtil --\u003e DeleteCommandParser : code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser --\u003e GradPadParser : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommand -\u003e Model : deleteModule(\"CS2103T\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 19,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/EditSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":EditModuleDescriptor\" as EditModuleDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"e:EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e LogicManager : execute(\"edit 1 c/CS2103T\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"edit 1 c/CS2103T\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e EditCommandParser : parse(\"1 c/CS2103T\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ParserUtil --\u003e EditCommandParser : code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create EditModuleDescriptor"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e EditModuleDescriptor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditModuleDescriptor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditModuleDescriptor --\u003e EditCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditModuleDescriptor"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e EditModuleDescriptor : setModuleCode(code)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditModuleDescriptor"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditModuleDescriptor --\u003e EditCommandParser : desc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditModuleDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e EditCommand : EditCommand(1, desc)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand --\u003e EditCommandParser : e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser --\u003e GradPadParser : e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e EditCommand : execute()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand -\u003e Model : setModule(moduleToEdit, editedModule)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model --\u003e EditCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CommandResult --\u003e EditCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 90
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "[-\u003e LogicManager : execute(\"find CS2103T\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"find CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPadParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPadParser -\u003e FindCommandParser : parse(\" CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser --\u003e GradPadParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPadParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand -\u003e Model : updateFilteredModuleList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 69
    }
  },
  {
    "path": "docs/diagrams/GemSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"G:GemCommand\" as GemCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"sem1Storage:GemCommandStorage\" as GemCommandStorage LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"sem2Storage:GemCommandStorage\" as GemCommandStorage2 LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[-\u003e LogicManager : execute(\"gem\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"gem\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create GemCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e GemCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand --\u003e GradPadParser : G"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser --\u003e LogicManager : G"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e GemCommand : execute()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e GemCommand : setSem1Storage()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create GemCommandStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e GemCommandStorage : sem1Storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommandStorage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommandStorage --\u003e GemCommand : sem1Storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommandStorage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e GemCommandStorage : setGeModules(SEM_1_PATH)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommandStorage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommandStorage --\u003e GemCommand : sem1GeModules"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommandStorage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e GemCommand : setSem2Storage()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create GemCommandStorage2"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e GemCommandStorage2 : sem2Storage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommandStorage2"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommandStorage2 --\u003e GemCommand : sem2Storage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommandStorage2"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e GemCommandStorage2 : setGeModules(SEM_2_PATH)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GemCommandStorage2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommandStorage2 --\u003e GemCommand : sem2GeModules"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommandStorage2"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand -\u003e CommandResult : sem1GeModules + sem2GeModules"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "CommandResult --\u003e GemCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GemCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 84
    }
  },
  {
    "path": "docs/diagrams/ListSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"L:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e LogicManager : execute(\"list\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"list\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e ListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand -\u003e GradPadParser : L"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser --\u003e LogicManager : L"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand -\u003e Model : updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CommandResult --\u003e ListCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 52
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Class GradPadParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager --\u003e\"1\" GradPadParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "yan-soon": 3
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Interface ReadOnlyGradPad \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class GradPad"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ReadOnlyGradPad"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Package Module {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class Module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ModuleName"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ModuleCode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ModularCredits"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class UniqueModuleList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class UniqueTagMap"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad .up.|\u003e ReadOnlyGradPad"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModelManager o--\u003e \"1\" GradPad"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad *--\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad *--\u003e \"1\" UniqueTagMap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "UniqueTagMap o--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueModuleList o--\u003e \"*\" Module"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleCode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModularCredits"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleName"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Module --\u003e \"*\" Tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModuleCode -[hidden]right-\u003e ModularCredits"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModularCredits -[hidden]right-\u003e ModuleName"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModelManager --\u003e\"1\" Module : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 19,
      "silvernitro": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/ModelFilteredListClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Package Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class ModuleListPanel UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Package Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class FilteredModules"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Package Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class XYZCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ModuleListPanel .down[UI_COLOR].\u003e FilteredModules : displays modules from \u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model .left.\u003e FilteredModules : filters \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "XYZCommand .up[LOGIC_COLOR].\u003e Model : applies list filters via \u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 22
    }
  },
  {
    "path": "docs/diagrams/NusmodsClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowColor NUSMODS_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam classBackgroundColor NUSMODS_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Interface NusmodsData \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class \"{abstract}\\nDataFetcher\" as DataFetcher"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class DataFetcherManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class NusmodsDataManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class ModuleSummary"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class ModuleInfo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager -up-|\u003e NusmodsData"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager .down.\u003e ModuleInfo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager .right.\u003e DataFetcher : may get module data from \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager .left.|\u003e DataFetcher"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager ..\u003e ModuleSummary"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager ..\u003e ModuleInfo : creates \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 21
    }
  },
  {
    "path": "docs/diagrams/NusmodsFetchLocalModuleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Nusmods NUSMODS_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":NusmodsDataManager\" as NusmodsDataManager NUSMODS_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":DataFetcherManager\" as DataFetcherManager NUSMODS_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e NusmodsDataManager : getModuleInfo(code)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate NusmodsDataManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager -\u003e DataFetcherManager : fetchModuleInfo(code)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager --\u003e NusmodsDataManager : NusmodsException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager -\u003e NusmodsDataManager : getModuleInfoFromFile(code)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate NusmodsDataManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager --\u003e NusmodsDataManager : moduleInfo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate NusmodsDataManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--NusmodsDataManager : moduleInfo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate NusmodsDataManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 26
    }
  },
  {
    "path": "docs/diagrams/NusmodsFetchModuleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Nusmods NUSMODS_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":NusmodsDataManager\" as NusmodsDataManager NUSMODS_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":DataFetcherManager\" as DataFetcherManager NUSMODS_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Commons LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":HttpUtil\" as HttpUtil LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e NusmodsDataManager : getModuleInfo(code)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate NusmodsDataManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager -\u003e DataFetcherManager : fetchModuleInfo(code)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e HttpUtil : makeGETRequest(API_URL)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate HttpUtil"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "HttpUtil --\u003e DataFetcherManager : moduleJsonResponse"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate HttpUtil"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager --\u003e NusmodsDataManager : moduleInfo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--NusmodsDataManager : moduleInfo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate NusmodsDataManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 30
    }
  },
  {
    "path": "docs/diagrams/NusmodsScrapeModuleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Nusmods NUSMODS_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":DataFetcherManager\" as DataFetcherManager NUSMODS_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Commons LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":HttpUtil\" as HttpUtil LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e DataFetcherManager : fetchAndSaveModules()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e DataFetcherManager : fetchModuleSummaryList()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager --\u003e DataFetcherManager : summaries"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e DataFetcherManager : filterModuleSummaries(summaries)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager --\u003e DataFetcherManager : filteredSummaries"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e DataFetcherManager : generateModuleInfoMap(summaries)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "loop for summary in summaries"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e DataFetcherManager : fetchModuleInfo(module)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate DataFetcherManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e HttpUtil : makeGETRequest(API_URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate HttpUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "HttpUtil --\u003e DataFetcherManager : moduleJsonResponse"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate HttpUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e DataFetcherManager : moduleInfo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager -\u003e DataFetcherManager : moduleInfoMap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--DataFetcherManager :"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate DataFetcherManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 49
    }
  },
  {
    "path": "docs/diagrams/RequiredSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"R:RequiredCommand\" as RequiredCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"Rs:RequiredCommandStorage\" as RequiredCommandStorage LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[-\u003e LogicManager : execute(\"required\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"required\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create RequiredCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e RequiredCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand --\u003e GradPadParser : R"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser --\u003e LogicManager : R"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e RequiredCommand : execute()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e Model : getGradPad()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Model --\u003e RequiredCommand : GradPad"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e Model : getModuleList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Model --\u003e RequiredCommand : currentModules"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : setStorage()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create RequiredCommandStorage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommandStorage : RequiredCommandStorage()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommandStorage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommandStorage --\u003e RequiredCommand :Rs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommandStorage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommandStorage : setRequiredXXX(XXX_PATH)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommandStorage"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommandStorage --\u003e RequiredCommand : requiredXXX"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommandStorage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : compareAllGEs()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "alt allGEsCleared"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : MESSAGE_SUCCESS_GE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "else"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : MESSAGE_FAILURE_GE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : compareModules(XXX_PATH)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : compareScience(SCIENCE_PATH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e RequiredCommand : compareInternship(INTERNSHIP_PATH)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand -\u003e CommandResult : CommandResult(leftOverModules)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "CommandResult --\u003e RequiredCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 90
    }
  },
  {
    "path": "docs/diagrams/ScienceSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"S:ScienceCommand\" as ScienceCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"Rs:RequiredCommandStorage\" as RequiredCommandStorage LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[-\u003e LogicManager : execute(\"science\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"science\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create ScienceCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e ScienceCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ScienceCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ScienceCommand --\u003e GradPadParser : S"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ScienceCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser --\u003e LogicManager : S"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e ScienceCommand : execute()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ScienceCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ScienceCommand -\u003e ScienceCommand : setScienceModules(SCIENCE_PATH)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ScienceCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create RequiredCommandStorage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ScienceCommand -\u003e RequiredCommandStorage : RequiredCommandStorage()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommandStorage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommandStorage --\u003e ScienceCommand : Rs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommandStorage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ScienceCommand -\u003e RequiredCommandStorage : setRequiredScience(SCIENCE_PATH)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate RequiredCommandStorage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommandStorage --\u003e ScienceCommand : scienceModules"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate RequiredCommandStorage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ScienceCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ScienceCommand -\u003e CommandResult : scienceModules"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "CommandResult --\u003e ScienceCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ScienceCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ScienceCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 65
    }
  },
  {
    "path": "docs/diagrams/SearchSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":SearchCommandParser\" as SearchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \"s:SearchCommand\" as SearchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":ModuleInfoSearcher\" as ModuleInfoSearcher LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "[-\u003e LogicManager : execute(\"search CS2103T\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"search CS2103T\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "create SearchCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e SearchCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate SearchCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate SearchCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e SearchCommandParser : parse(\"CS2103T\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate SearchCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommandParser -\u003e ParserUtil : parseModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ParserUtil --\u003e SearchCommandParser : ModuleCode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "create SearchCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommandParser -\u003e SearchCommand : SearchCommand(\"CS2103T\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate SearchCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommand --\u003e SearchCommandParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate SearchCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommandParser --\u003e GradPadParser : s"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate SearchCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "destroy SearchCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "LogicManager -\u003e SearchCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate SearchCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "create ModuleInfoSearcher"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommand -\u003e ModuleInfoSearcher"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate ModuleInfoSearcher"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModuleInfoSearcher --\u003e SearchCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate ModuleInfoSearcher"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommand -\u003e ModuleInfoSearcher : searchModule(\"CS2103T\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate ModuleInfoSearcher"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModuleInfoSearcher --\u003e SearchCommand : ModuleInfo"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate ModuleInfoSearcher"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommand -\u003e CommandResult : ModuleInfo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "CommandResult --\u003e SearchCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "SearchCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate SearchCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 80
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Interface GradPadStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class JsonGradPadStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Class RequiredCommandStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Class GemCommandStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "StorageManager o--\u003e GradPadStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonGradPadStorage .left.|\u003e GradPadStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonGradPadStorage .down.\u003e JsonSerializableGradPad"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonSerializableGradPad .right.\u003e JsonAdaptedModule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonAdaptedModule .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "RequiredCommandStorage .down.\u003e JsonSerializableGradPad"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GemCommandStorage .down.\u003e JsonSerializableGradPad"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 7,
      "-": 17,
      "yan-soon": 5
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Class ModuleListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Class ModuleCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "MainWindow *-down-\u003e ModuleListPanel"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleListPanel -down-\u003e ModuleCard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleCard --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleCard ..\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 7,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "title After command \"delete CS2103T\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "title After command \"add c/CS2100\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "note right on link: State gp2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":VersionedGradPad\" as VersionedGradPad MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UndoCommand --\u003e GradPadParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UndoCommand -\u003e Model : undoGradPad()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Model -\u003e VersionedGradPad : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate VersionedGradPad"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "VersionedGradPad -\u003e VersionedGradPad :resetData(ReadOnlyGradPad)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "VersionedGradPad --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate VersionedGradPad"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!define NUSMODS_COLOR #BD0074"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!define NUSMODS_COLOR_T1 #FFA7DD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 3,
      "-": 75
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "title: GradPad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T09-1/tp/branch/master/graph/badge.svg?token\u003dfUjXb3CBD3)](https://codecov.io/gh/AY2021S1-CS2103T-T09-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**GradPad is a desktop application for managing your NUS modules.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad is a one-stop solution to **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Planning for modules has always been a tedious process but it does not have to be."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad **consolidates** the modules you have taken and **displays** the remaining required modules to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ease your module planning process. A **module searching platform** is also included in GradPad, providing easy"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**navigation** of modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* If you are interested in using GradPad, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* If you are interested about developing GradPad, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 13,
      "-": 13
    }
  },
  {
    "path": "docs/team/mhdsyfq.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "title: Muhammad Syafiq Bin Abas\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "## Project: GradPad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPad provides an all-in-one solution to **Module Management** for Computer Science Undergraduates. It"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "**consolidates** all the processes required for students to **plan their modules** and **track their academic progress** "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "into a single platform. The first of its kind - GradPad offers a **collaboration** like no other, allowing students to "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "manage their modules more efficiently without the need to use several platforms all at once. Users interact with"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPad using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmhdsyfq\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **New Feature**: Added the ability to choose to `delete`/`clear` with a confirmation prompt, or to force delete or"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "force clear using `fdelete`/`fclear`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * What it does:\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    Allows users to provide confirmation whether or not they want to proceed with deleting or clearing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    data, and also allows users to force delete or clear data without a confirmation prompt."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Justification:\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    This feature is significant because users can make mistakes in certain commands that results in them"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    losing data and the app should provide a convenient way for users to avoid making those mistakes by prompting users"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    for a confirmation before executing the commands. Some users (usually regulars or experts), however, may find it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    troublesome to have to constantly provide confirmation, so the app should also provide a way for users to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    instantly execute these commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Highlights:\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    This enhancement of adding a confirmation prompt affects some existing commands and commands to be "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    added in future. The implementation was fairly challenging and it required an in-depth analysis of design alternatives as there was a need to stall the original "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    command, prompt for a confirmation, and then execute or stop the execution of the command (based on the confirmation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    provided). After figuring out the implementation, however, the extension to other existing commands was relatively"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    straightforward."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **New Feature**: Added the ability to check accumulated Modular Credits (MCs) using `checkmc`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * What it does:\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  Allows users to check how many Modular Credits they have attained based on the modules that they have"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  completed/added into GradPad."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Justification:\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  This feature improves the application slightly as users might want to occasionally check how much "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  MCs they have attained so far so as to gauge how close they are to graduation without having to check the MCs for each"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  module and manually count. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Refactored the Address Book 3 `ui` package and components [\\#37](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/37)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Improved flexibility of `find` feature [\\#77](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/77)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Improved implementation of `add` and `edit` features [\\#111](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/111)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Added a 1.5 second delay before closing GradPad window for `exit` feature [\\#95](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/95)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Added assertions to the `core`, `logic` and `module` packages [\\#92](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/92)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Changed the entire outlook of the Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      * Changed arrangement of GUI components [\\#51](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/51)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      * Updated GUI color scheme [\\#66](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/66)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      * Added introduction display with original GradPad logo [\\#127](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/127)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Came up with product name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Changed product icon"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Designed GradPad logo"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Designed and added images with mark-ups for the User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Documented Non-Functional Requirements and Glossary to the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Consolidated all messages into a single class"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Added documentation for `help`,`add` and `find` features [\\#24](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/24)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Updated command descriptions [\\#102](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/102)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Added documentation for `find` feature, including sequence diagram [\\#62](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/62)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Updated `Ui` component documentation, including class diagram [\\#62](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/62)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    * Updated manual testing [\\#87](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/87)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  * Assisted in testing and reporting bugs for another team\u0027s product:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#1](https://github.com/mhdsyfq/ped/issues/1),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#2](https://github.com/mhdsyfq/ped/issues/2),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#3](https://github.com/mhdsyfq/ped/issues/3),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#4](https://github.com/mhdsyfq/ped/issues/4),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#5](https://github.com/mhdsyfq/ped/issues/5),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#6](https://github.com/mhdsyfq/ped/issues/6),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#7](https://github.com/mhdsyfq/ped/issues/7),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  [\\#8](https://github.com/mhdsyfq/ped/issues/8)"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 90
    }
  },
  {
    "path": "docs/team/shaokiat.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "title: Lim Shao Kiat\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "## Project: GradPad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad is a one-stop solution to **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad **consolidates** the modules you have taken and **displays** the remaining required modules to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ease your module planning process. A **module searching platform** is also included in GradPad, providing easy"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**navigation** of modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dshaokiat\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003dshaokiat\u0026zR\u003dAY2021S1-CS2103T-T09-1%2Ftp%5Bmaster%5D\u0026zACS\u003d239.02341137123747\u0026zS\u003d2020-08-14\u0026zFS\u003dt09\u0026zU\u003d2020-11-05\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **New Feature**: Added a `search` feature to search for modules from NUSMods and display it to the user. [\\#100](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/100)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * What it does: Allows users to search for module details using module code and displaying all module information"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    onto the Result Display. Module information are fetch directly from NUSMods if internet is available, else it will "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    be fetched from local saved JSON file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Justification: This feature is required for users to look up relevant module details that they want to find out"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   about when planning for which modules to take. This command displays the module code, module title, modular credits,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   semesters, descriptions, prerequisites and preclusion directly from NUSMods. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Highlights: To implement this feature, I created a logic class `ModuleInfoSearcher` to utilize the nusmods package"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   previously created by my team mates. This logic class make method calls `NusmodsDataManager` to retrieve module "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   information directly from NUSMods using the NUSMods API. The search command then utilize `ModuleInfoSearcher` class"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   to search for module information and display the information accordingly in the Result Display."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Team tasks**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Updated the User Guide according to Peers and Tutors comments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Updated the project\u0027s logfile to gradpad.log"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Added introduction section to the user guide."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Recorded comments by Peers and Tutors with regards to GradPad especially on User Guide and Developer Guide."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Addressed issues on User Guide from mock PE."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Reviews and comments to team mates PR. [Example: \\#111](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/111)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Refactored the `Delete` feature and command to take in module code as parameters instead of index. [\\#120](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/120)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Refactored the `Model` package and component of AddressBook into GradPad. [\\#55](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/55)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Added assertions to `StorageManager`. [\\#105](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/105)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Added semester data field to `ModuleInfo` class. [\\#174](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/174)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added Ui Markup for User Guide. [\\#52](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/52)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added documentation for the v1.2 feature `delete` [\\#23](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/23)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added documentation for the v1.3 feature `search` [\\#75](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/75)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added documentation for the v1.3 feature `required` [\\#75](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/75)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added introduction and NUSMods section to User Guide. [\\#52](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/52) \u0026 [\\#130](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/130)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Updated documentation with comments from CS2101 Tutor and CS2103T TA. [\\#130](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/130)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Updated command summary in documentation. [\\#75](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/75)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Updated feature summary list into table form. [\\#75](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/75)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Updated documentation with issues reported from mock PE for v1.4. [\\#172](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/172)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "   "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Refactored the `Model` component class diagram and description. [\\#55](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/55)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added implementation details of the `delete` feature. [\\#55](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/55)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Refactored the `Undo/Redo` proposed implementation. [\\#75](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/75)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * Added use cases for GradPad in the documentation. [\\#75](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/75)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Review/mentoring contributions**:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#58](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/58), "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#35](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/35), "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#111](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/111)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Assisted teammates with any Git queries or issues, specifically on SourceTree."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Assisted in testing and reporting bugs for another team\u0027s product:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#1](https://github.com/shaokiat/ped/issues/1),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#2](https://github.com/shaokiat/ped/issues/2),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#3](https://github.com/shaokiat/ped/issues/3),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#4](https://github.com/shaokiat/ped/issues/4),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  [\\#5](https://github.com/shaokiat/ped/issues/5)"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 76
    }
  },
  {
    "path": "docs/team/silvernitro.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "title: Lau Siaw Sam\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Project: GradPad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad is a one-stop solution to **module management** for Computer Science Undergraduates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad **consolidates** the modules you have taken and **displays** the remaining required modules to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ease your module planning process. A **module searching platform** is also included in GradPad, providing easy"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**navigation** of modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsilvernitro\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **New Feature**: Implemented the back-end logic to fetch and use module data from the NUSMods API."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * What it does: Allows GradPad to send HTTP requests to the public NUSMods API to retrieve module summaries "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  and specific module information data. Additionally, it also has a script to scrape all CS modules to save locally."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Justification: This feature is core to GradPad\u0027s module searching platform as it allows users to view"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  the most up-to-date information, that can\u0027t be achieved if GradPad simply used an archive of pre-fetched data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  Additionally, since GradPad must not be reliant on an internet connection, we also had to scrape and save CS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  module data to a local file and ship that with GradPad releases, so that users can still search for CS modules"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  even when offline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Highlights: The feature was not trivial to implement as it consists of several major parts: fetching module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   summaries, fetching module information, deserializing JSON data received into Java objects, serializing these"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   objects into JSON save files compatible with GradPad, and also making module info available even without an internet"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   connection. On the whole, I found it difficult to handle API requests and JSON data in Java and had to read up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   quite a bit on the topic."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   To make it easier for other developers to use NUSMods data,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   I designed the NUSMods package with a high degree of encapsulation and a lean public interface."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   As such, client code elsewhere in GradPad can simply pass in module codes and get back module info using simple"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   function calls. There is no need to handle the fetching, storing, or the fall-back to local data (when offline)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   anywhere else in GradPad."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Credits: Code reuse was minimal. However, the basic logic to make HTTP GET requests is rather boilerplate and may"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   seem to be the same in any Java application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **New Feature**: Added a feature to allow filtering of modules by tags"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * What it does: Allows users to key in tags that they wish to search for, and view all modules with those tags."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Justification: This feature allows users to use tags to organize their list of modules and navigate that list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    conveniently when their no. of modules are large."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Highlights: To implement this feature, I had to create a new predicate to test if a module contained certain tags."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    After that, I had to tweak the existing `find` command to allow it to search by tags too. However, in order to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    retain the original functionality of searching by module code keywords, I had to come up with a way to combine"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    both search predicates. In order to make things more extensible, I decided to create a new compound predicate class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    that handles the chaining of multiple predicates.      "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **New Feature**: Added a command to allow users to view all tags in GradPad"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * What it does: Allows users to view a list of all the tags they\u0027ve added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Justification: This feature allows user check if a certain tag exists. This is especially useful when they need"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    to know what tags they can use to filter their list of modules (see feature above)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Highlights: The implementation of this feature is not as straightforward as it sounds. In the original AB3"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    project, a module\u0027s tags were implemented by storing a list of `Tag` objects within each `Module`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    However, this provided no way to easily retrieve all tags without duplicates. To do so, one would"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    have to iterate through every module in GradPad, iterate through each module\u0027s list of `Tag` objects, filter them,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    and then display them."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    As such, I re-implemented the tags feature by creating a central class to hold a collection of unique tags in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    GradPad. All `Module` objects thus referenced unique `Tag` objects within this collection, rather than store their"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    own duplicate copies of `Tag`s. Printing out all tags would just involve printing this collection out. This"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    also meant that I had to rework the implementation for the addition, editing, and deletion of modules to use"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    this new collection of unique tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Team tasks**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Set up assertions in Gradle."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Updated the project\u0027s readme page to reflect the project\u0027s features and direct all hyperlinks to GradPad pages."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Updated GradPad\u0027s Jekyll config (remove AB3-specific content)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Added feature summary list and command summary table to the user guide."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Managed releases `v1.3-trial` and `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Refactored the entire AB3 `Person` package and its containing classes to GradPad\u0027s `Module` package."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Added assertions to the `NUSMods` package."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Allow multi-word tags and substring module searches by tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Add case-insensitive check for duplicate tags when users add a module."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added documentation for the feature `tag` [\\#131](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/131)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added documentation for the feature `edit` [\\#64](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/64)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added documentation to explain the automatic addition of module titles and modular credits "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#83](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/64)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Updated documentation for the features `add`, `find`, `edit` "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#131](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/131)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Updated introduction to include the purpose of the guide"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#113](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/113)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added architecture details and design considerations for the `NUSMods` component, including a class diagram."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#78](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/78)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added implementation details of the `tags` feature, including sequence diagrams."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#192](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/192)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added implementations details of GradPad\u0027s NUSMods integration, including sequence diagrams."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#198](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/198)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Added implementation details of the `edit`, `list`, `checkmc`, `required`, `search` command features, including"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    all sequence diagrams."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#78](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/78) \u0026 "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#42](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/42)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    * Updated the `Storage` component class diagram."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    [\\#42](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/42)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Review/mentoring contributions**:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#94](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/94), "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#97](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/97), "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#111](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/111),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#133](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/133), "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#169](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/169),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#176](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/176),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#197](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/197)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Assisted teammates with any Git queries or issues."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Assisted in the program design of adding confirmation prompts when executing `delete` and `clear` commands."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  * Assisted in testing and reporting bugs for another team\u0027s product:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#1](https://github.com/Silvernitro/ped/issues/1),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#2](https://github.com/Silvernitro/ped/issues/2),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#3](https://github.com/Silvernitro/ped/issues/3),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#4](https://github.com/Silvernitro/ped/issues/4),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#5](https://github.com/Silvernitro/ped/issues/5),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#6](https://github.com/Silvernitro/ped/issues/6),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  [\\#7](https://github.com/Silvernitro/ped/issues/7)"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 128
    }
  },
  {
    "path": "docs/team/yan-soon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "title: Soon Xiang, Yan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "## Project: GradPad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPad is an offline computer application meant to help Computer Science students from the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "National University of Singapore (NUS) plan their modules with more ease. All module information is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "displayed through our simple and organised Graphical User Interface (GUI) created with JavaFX."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPad is also optimised for users who prefer working on a Command Line Interface (CLI). It is written"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "in Java, and has about 11k LoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **New Feature**: Added `required` command to check left-over required modules from the Computer Science Curriculum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * What it does: Allows the user to check any undone required modules by cross-referring their current list of completed modules"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  against the list of all the required modules that we store within GradPad. Modules are split into separate categories"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  (Eg. Foundation, GE, Etc) for enhanced readability. The command also accounts for equivalent modules and preclusion (Eg. CS1010X \u0026 CS1101S). "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Justification: This feature enhances the product significantly as users no longer have to refer manually to the NUS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  website, just to see a list of modules that they have not completed. Also, they do not have to manually filter our their"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  completed modules, just to check what are the left-over modules, saving them loads of time during their module planning."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Highlights: This enhancement is a vital selling point of GradPad and will affect our future features. As the command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  deals with a lot of data and functionality, it required an in-depth analysis of design alternatives and OOP. The implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  was also tedious as it required a lot of testing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **New Feature**: Added `science` command to check all the available Science Modules under the Computer Science Curriculum."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * What it does: Allows the user to check all the available Science modules in the curriculum."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Justification: This feature enhances the product as users no longer have to refer to the School website just to view"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  the available Science Modules. It is separated from the `required` command from making the required command too"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  cluttered, thus improving overall user experience. Separating the two commands also makes it easier to update our storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  as we can now update our database for science modules without touching the other databases."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Highlights: This enhancement is vital to GradPad as it is part of our core `required` command feature. The command deals"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  with a fair bit of data and testing, making the implementation slightly difficult."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Credits:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **New Feature** Added `gem` command to check all the available General Education Modules available in NUS."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * What it does: Allows the users to check all the available General Education Modules, sorted according to their availability"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  by Semester."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Justification: Saves users the time from searching and sieving through NUS websites and databases. Also, having the modules"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  sorted by their Semester Availability saves the user even more time, thus greatly improving user experience."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Highlights: This enhancement is vital to GradPad as it is part of our core `required` command feature. The command deals"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  with a fair bit of data and testing, making the implementation slightly difficult."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Credits: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyan-soon\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Minutes Taker during meetings and consultations."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Assign weekly workload to team."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Provide feedback constantly, to teammate\u0027s code."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [(Example: #111)](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/111)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Refactored `Command`, `Parser` and `Storage` Component of AB3 code base"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  (Pull request [\\#35](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/35))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Updated `help` command to display instructions directly instead of a link to the UG."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  (Pull request [\\#70](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/70))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Added Assertions to Model Component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  (Pull request [\\#99](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/99))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Added documentation for the features `required`, `science`, `gem`, `checkmc`, and `exit`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull requests [\\#16](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/16),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    [\\#117](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/117),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    [\\#134](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/134))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Used Markdown to write Tips and Notes to make UG more visually stunning."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull requests [\\#134](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/134))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Improved sentence structuring and language use in UG to make it more user-centric."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull requests [\\#45](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/45),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    [\\#70](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/70),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    [\\#117](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/117),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    [\\#134](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/134))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Added implementation details for the features `add`, `required`, `science` and `gem`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull requests [\\#45](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/45))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Added Introduction and \u0027About This Guide\u0027 section to the DG."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull request [\\#70](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/70))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Added Target User Profile, Value Proposition, User Stories and Use Cases to the DG."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull request [\\#19](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/19))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    * Refactored `Logic` component portion of DG."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    (Pull request [\\#45](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/45))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#100](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/100),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#111](https://github.com/AY2021S1-CS2103T-T09-1/tp/pull/111)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  (examples: [\\#1](https://github.com/yan-soon/ped/issues/1),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#2](https://github.com/yan-soon/ped/issues/2),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#3](https://github.com/yan-soon/ped/issues/3),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#4](https://github.com/yan-soon/ped/issues/4),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#5](https://github.com/yan-soon/ped/issues/5),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#6](https://github.com/yan-soon/ped/issues/6),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#7](https://github.com/yan-soon/ped/issues/7),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#8](https://github.com/yan-soon/ped/issues/8),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#9](https://github.com/yan-soon/ped/issues/9),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  [\\#10](https://github.com/yan-soon/ped/issues/10))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.GradPadStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing GradPad ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPadStorage gradPadStorage \u003d new JsonGradPadStorage(userPrefs.getGradPadFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s GradPad and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * The data from the sample GradPad will be used instead if {@code storage}\u0027s GradPad is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * or an empty GradPad will be used instead if errors occur when reading {@code storage}\u0027s GradPad."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPadOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ReadOnlyGradPad initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            gradPadOptional \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (!gradPadOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample GradPad\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            initialData \u003d gradPadOptional.orElseGet(SampleDataUtil::getSampleGradPad);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty GradPad\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            initialData \u003d new GradPad();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradPad\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            initialData \u003d new GradPad();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradPad\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        logger.info(\"Starting GradPad \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping GradPad ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 11,
      "mhdsyfq": 4,
      "-": 160,
      "yan-soon": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(windowWidth \u003e 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(windowHeight \u003e 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 77,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final String LOG_FILE \u003d \"gradpad.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(config !\u003d null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the currentLogLevel attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return currentLogLevel attribute of type Level."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Level getCurrentLogLevel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return currentLogLevel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 1,
      "-": 111,
      "yan-soon": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // module components constraints"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_CREDITS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \"Modular credits should only contain numbers, and it should be either 1 or 2 digits long.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_CODE \u003d \"A module code must have 2 or more characters as \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"its prefix followed by 1 or more digits as its numerical code. It can optionally end with 1 or \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"more characters as a suffix. It is also case-insensitive.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TITLE \u003d \"Module titles should only contain alphanumeric \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"characters and spaces.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TAG \u003d \"Tag descriptions should be alphanumeric and non-empty.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // general"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_NEED_HELP \u003d \"If you need help, type \\\"help\\\".\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_MORE_INFO \u003d \"For more information, type \\\"help\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_EMPTY_FIELD \u003d \"Please enter a command.\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_NEED_HELP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"You have entered an unknown command. Please try \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"again.\\n\\n\" + MESSAGE_NEED_HELP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Please use the correct format for the \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"following command: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module with module code %1$s already exists!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"Module with module code %1$s cannot be found in \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"GradPad!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_EMPTY_GRADPAD \u003d \"GradPad is empty!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_MODULES_FOUND_OVERVIEW \u003d \"%1$d modules found!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CODE \u003d \"%1$s is an invalid module code. Please try\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \" again.\\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Note:\\n\" + MESSAGE_CONSTRAINTS_CODE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"\\\"%1$s\\\" is an invalid tag. Please try again.\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Note:\\n\" + MESSAGE_CONSTRAINTS_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String LINE \u003d \"----------------------------------------------------------------------\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"--------------------------------------\\n\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    // ModuleInfoSearcher"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String MESSAGE_FAILED_TO_FIND_MODULE \u003d \"Failed to find module: %s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String MESSAGE_EMPTY_SEARCH \u003d \"Search is empty\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // add command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String ADD_COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_ADD_USAGE \u003d ADD_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Format:\\nadd MODULE_CODE [t/TAG]...\\n\\nNote:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 [ ] indicate optional fields.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 ... indicate fields that may have multiple instances.\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_MORE_INFO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_ADD_SUCCESS \u003d \"The following module has been successfully added:\\n\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"%1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // checkmc command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CHECKMC_COMMAND_WORD \u003d \"checkmc\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CHECKMC_SUCCESS \u003d \"You have accumulated a total of %.1f MCs so \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"far!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // clear command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CLEAR_COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FORCE_CLEAR_COMMAND_WORD \u003d \"fclear\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"GradPad has been cleared!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CLEAR_CONFIRMATION \u003d \"Are you sure you wish to clear all modules? \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"(yes/no)\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // delete command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String DELETE_COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FORCE_DELETE_COMMAND_WORD \u003d \"fdelete\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_DELETE_USAGE \u003d DELETE_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Format:\\ndelete MODULE_CODE\\n\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_MORE_INFO;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_FORCE_DELETE_USAGE \u003d FORCE_DELETE_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Format:\\nfdelete MODULE_CODE\\n\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_MORE_INFO;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"The following module has been successfully \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"deleted:\\n\\n%1$s\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_DELETE_CONFIRMATION \u003d \"Are you sure you wish to delete the following\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \" module? (yes/no)\\n\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // edit command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String EDIT_COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_EDIT_USAGE \u003d EDIT_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Format:\\nedit MODULE_CODE [c/NEW_MODULE_CODE] [t/TAG]...\\n\\nNote:\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 At least 1 field to edit must be specified.\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 [ ] indicate optional fields.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 ... indicate fields that may have multiple instances.\\n\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_MORE_INFO;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"The following module has been successfully edited:\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\n\\n%1$s\\n\\nEdited module:\\n\\n%2$s\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"You must provide at least one field to edit!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MESSAGE_ALL_EDIT_FIELDS_SAME \u003d \"The new fields provided have the same values as the \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                      + \"current ones.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // exit command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String EXIT_COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Take care!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // find command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FIND_COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_FIND_USAGE \u003d FIND_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Format:\\nfind [KEYWORD]... [TAG]...\\n\\nNote:\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 At least 1 keyword or tag to find must be specified.\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 [ ] indicate optional fields.\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\u2022 ... indicate fields that may have multiple instances.\\n\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_MORE_INFO;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // help command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String HELP_COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String ADD_COMMAND \u003d \"To add a module:\\tType \\\"add\\\" followed by a valid module \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"code and tags.\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t(Tags are optional and you can have any number of tags)\\n\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tExample(s):\\tadd cs1231\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\tadd cs1231 t/Foundation t/Core\\n\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"To delete a module:\\tType \\\"delete\\\" followed by a valid \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"module code.\\n\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tNote:\\n\" + \"\\t\\t\\t\\tThis command prompts for a confirmation before deleting.\\n\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tExample(s):\\tdelete cs1231\\n\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FORCE_DELETE_COMMAND \u003d \"To force delete\" + \"\\t\\tType \\\"fdelete\\\" followed by\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \" a valid module code.\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"a module:\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tNote:\\n\" + \"\\t\\t\\t\\tThis command does not prompt for a confirmation before\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tdeleting.\\n\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tExample(s):\\tfdelete cs1231\\n\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String EDIT_COMMAND \u003d \"To edit a module:\\tType \\\"edit\\\" followed by a valid module \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"code and the fields\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tyou wish to edit (at least 1 field must be provided). You can\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tonly edit the module code and tags of a module by using the\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tprefixes \\\"c/\\\" and \\\"t/\\\" respectively.\\n\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tNote:\\n\" + \"\\t\\t\\t\\tEditing tags replaces existing tags with new ones instead of\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tchanging their respective descriptions. You can remove tags of a\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tmodule simply by including the aforementioned prefix without a\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tdescription as one of the edit fields, i.e., \\\"t/\\\".\\n\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tExample(s):\\tedit cs1231 c/cs2100\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\tedit cs1231 c/cs2100 t/Foundation\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\tedit cs1231 t/ (to remove tags)\\n\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FIND_COMMAND \u003d \"To find a\" + \"\\t\\t\\tType \\\"find\\\" followed by the respective \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"keywords or tags.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"specific module\" + \"\\t\\t(You can specify multiple keywords or tags)\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"or a group of\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"modules with\" + \"\\t\\tNote:\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"common tags\" + \"\\t\\tKeywords can be specified as a sequence of characters of a\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"or keywords:\" + \"\\t\\tmodule code whereas tags must be specified fully.\\n\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tExample(s):\\tfind cs1231\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\tfind cs st (to find modules which module codes\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\tcontain \\\"cs\\\" or \\\"st\\\")\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\tfind foundation (to find modules with\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\t\\t\\t\\t\\\"foundation\\\" as a tag)\\n\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String SEARCH_COMMAND \u003d \"To view details\" + \"\\t\\tType \\\"search\\\" followed by a \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"valid module code.\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"of a module:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tExample(s):\\tsearch cs1231\\n\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String REQUIRED_COMMAND \u003d \"To view all\" + \"\\t\\t\\tType \\\"required\\\".\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"your required\\nmodules:\\n\\n\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String SCIENCE_COMMAND \u003d \"To view all\" + \"\\t\\t\\tType \\\"science\\\".\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"available Science\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"modules:\" + \"\\t\\t\\tNote:\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tThis command shows a list of Science modules you can take\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tto satisfy the Science component of your module requirements.\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tOnce you have completed one of the modules specified in the\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tlist, this command will be of zero significance to you.\\n\\n\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String GEM_COMMAND \u003d \"To view all\" + \"\\t\\t\\tType \\\"gem\\\".\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"available GE\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"modules:\" + \"\\t\\t\\tNote:\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tThis command shows a list of General Education (GE) modules you\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tcan take to satisfy your University Level Requirements. Once you\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\thave completed one module for each of the five GE pillars, this\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tcommand will be of zero significance to you.\\n\\n\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CHECKMC_COMMAND \u003d \"To check\\t\\t\\tType \\\"checkmc\\\".\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"your total MCs:\\n\\n\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String TAG_COMMAND \u003d \"To view all\" + \"\\t\\t\\tType \\\"tags\\\".\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"your tags:\\n\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"To list all\" + \"\\t\\t\\tType \\\"list\\\".\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"your completed\\nmodules:\\n\\n\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CLEAR_COMMAND \u003d \"To clear GradPad:\\tType \\\"clear\\\".\\n\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tNote:\\n\" + \"\\t\\t\\t\\tThis command prompts for a confirmation before clearing.\\n\\n\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FORCE_CLEAR_COMMAND \u003d \"To force clear\" + \"\\t\\tType \\\"fclear\\\".\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"GradPad:\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tNote:\\n\" + \"\\t\\t\\t\\tThis command does not prompt for a confirmation before\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"\\t\\t\\t\\tclearing.\\n\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String EXIT_COMMAND \u003d \"To exit:\\t\\t\\tType \\\"exit\\\".\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d ADD_COMMAND + LINE + DELETE_COMMAND + LINE"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + FORCE_DELETE_COMMAND + LINE + EDIT_COMMAND + LINE + FIND_COMMAND + LINE + SEARCH_COMMAND + LINE"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + REQUIRED_COMMAND + LINE + SCIENCE_COMMAND + LINE + GEM_COMMAND + LINE + CHECKMC_COMMAND + LINE"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + TAG_COMMAND + LINE + LIST_COMMAND + LINE + CLEAR_COMMAND + LINE + FORCE_CLEAR_COMMAND + LINE"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + EXIT_COMMAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // list command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String LIST_COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_LIST_SUCCESS \u003d \"All your modules have been listed!\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // required command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String REQUIRED_COMMAND_WORD \u003d \"required\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // gem command"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String GEM_COMMAND_WORD \u003d \"gem\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_GEM_SUCCESS \u003d \"--------------- Available GE Modules ---------------\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_GEM_FAILURE \u003d \"There was an error loading the required GE Modules.\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // science command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String SCIENCE_COMMAND_WORD \u003d \"science\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_SCIENCE_SUCCESS \u003d \"--------------- Available Science Modules \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"---------------\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_FAILURE_SCIENCE \u003d \"Oh no, there was an error loading the required \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Science Modules...\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // search command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String SEARCH_COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_SEARCH_USAGE \u003d SEARCH_COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Format:\\nsearch MODULE_CODE\\n\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + MESSAGE_MORE_INFO;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_SEARCH_SUCCESS \u003d \"Module details for %1$s \\n\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Module Title: %3$s \\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        + \"Modular Credits: %2$s\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        + \"Semesters: %7$s \\n\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Module Description: \\n%4$s \\n\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Preclusion(s): \\n%5$s\\n\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        + \"Prerequisite(s): \\n%6$s\\n\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // tags command"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String TAGS_COMMAND_WORD \u003d \"tags\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_TAGS_SUCCESS \u003d \"All tags:\\n\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_NO_TAGS \u003d \"You have not included any tags.\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // yes command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String YES_COMMAND_WORD \u003d \"yes\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String YE_COMMAND_WORD \u003d \"ye\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String Y_COMMAND_WORD \u003d \"y\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_NO_CONFIRMATION \u003d \"There is nothing to confirm!\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    // logic manager messages"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_CANCEL \u003d \"Command aborted - \";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 6,
      "silvernitro": 3,
      "mhdsyfq": 215,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/HttpUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.http.HttpClient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.http.HttpRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.http.HttpResponse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Utilities for HTTP requests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class HttpUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final HttpUtil SINGLETON \u003d new HttpUtil();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Makes a HTTP GET request to a URL and returns the response as a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param urlString The URL to send the GET request to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The HTTP response as a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException an error occurs while making the request."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //CHECKSTYLE.OFF: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //CHECKSTYLE.ON: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        HttpClient client \u003d HttpClient.newHttpClient();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        HttpRequest request \u003d HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .timeout(Duration.ofSeconds(3))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .uri(URI.create(urlString))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .GET()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            HttpResponse\u003cString\u003e response \u003d client.send(request, HttpResponse.BodyHandlers.ofString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return response.body();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException | InterruptedException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonSerializableGradPad;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Converts a given JSON file via its runtime path, into a list of Modules."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param file Converted file content of type String."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return List of modules taken from the JSON file via the runtime path."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the file is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ObservableList\u003cModule\u003e getModulesFromJsonFile(String file) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad jsonGradPad \u003d JsonUtil.fromJsonString(file, JsonSerializableGradPad.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return jsonGradPad.toModelType().getModuleList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static Map\u003cString, String\u003e getPreclusionMapFromJsonFile(String file) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        TypeReference\u003cMap\u003cString, String\u003e\u003e targetType \u003d new TypeReference\u003c\u003e() {};"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return objectMapper.readValue(file, targetType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "yan-soon": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if the {@code moduleCode} contains the {@code charSequence}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   Ignores case, a partial match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *       containsCharSequenceIgnoreCase(\"ABc\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *       containsCharSequenceIgnoreCase(\"def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *       containsCharSequenceIgnoreCase(\"ABc\", \"AB\") \u003d\u003d true // partial match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param moduleCode cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param charSequence cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static boolean containsCharSequenceIgnoreCase(String moduleCode, String charSequence) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(charSequence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String preppedModuleCode \u003d moduleCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String preppedCharSequence \u003d charSequence.trim().toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        checkArgument(!preppedCharSequence.isEmpty(), \"CharSequence parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        checkArgument(preppedCharSequence.split(\"\\\\s+\").length \u003d\u003d 1, \"CharSequence parameter should be a \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return preppedModuleCode.contains(preppedCharSequence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Ensures that the charSequence is in the correct String format as the module code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @param charSequence cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @return the upper case of the module code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static String ignoreCase(String charSequence) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String preppedCharSequence \u003d charSequence.trim().toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        checkArgument(!preppedCharSequence.isEmpty(), \"CharSequence parameter cannot be empty\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        checkArgument(preppedCharSequence.split(\"\\\\s+\").length \u003d\u003d 1, \"CharSequence parameter should be a \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                + \"single word\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return preppedCharSequence;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 12,
      "mhdsyfq": 16,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the GradPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @see seedu.address.model.Model#getGradPad()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    ReadOnlyGradPad getGradPad();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns the user prefs\u0027 GradPad file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "mhdsyfq": 1,
      "-": 41,
      "yan-soon": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_CONFIRMATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFIRMATION_CANCEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_CONFIRMATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_GRADPAD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.YesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.parser.GradPadParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final GradPadParser gradPadParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Command stalledCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private String stalledCommandText;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert (model !\u003d null \u0026\u0026 storage !\u003d null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gradPadParser \u003d new GradPadParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private CommandResult handleStall(Command command, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (command instanceof ClearCommand) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            assignStalledComponents(command, commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_CLEAR_CONFIRMATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Module moduleToBeDeleted \u003d ((DeleteCommand) command).getModuleToDelete(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            assignStalledComponents(command, commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_CONFIRMATION + moduleToBeDeleted);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private void assignStalledComponents(Command command, String commandText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        stalledCommand \u003d command;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        stalledCommandText \u003d commandText;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            command \u003d gradPadParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            if (stalledCommand !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                stalledCommand \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new CommandResult(MESSAGE_CONFIRMATION_CANCEL"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    + String.format(\"\\\"%s\\\"\", stalledCommandText));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        boolean isCancel \u003d stalledCommand !\u003d null \u0026\u0026 !(command instanceof YesCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        boolean isConfirmation \u003d stalledCommand !\u003d null \u0026\u0026 command instanceof YesCommand;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (isCancel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            stalledCommand \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_CONFIRMATION_CANCEL"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + String.format(\"\\\"%s\\\"\", stalledCommandText));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (isConfirmation) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            command \u003d stalledCommand;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            stalledCommand \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (command.requiresStall()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            if (model.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                throw new CommandException(MESSAGE_EMPTY_GRADPAD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return handleStall(command, commandText);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            storage.saveGradPad(model.getGradPad());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getGradPad();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getGradPadFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "mhdsyfq": 56,
      "-": 69,
      "yan-soon": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ModuleInfoSearcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.NusmodsDataManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Logic for searching a module from the Computer Science curriculum."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class ModuleInfoSearcher {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private NusmodsDataManager dataManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ModuleInfoSearcher() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        dataManager \u003d new NusmodsDataManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ModuleInfoSearcher(NusmodsDataManager dataManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.dataManager \u003d dataManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Perform search function on NUSMods using dataManager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @param moduleCode from SearchCommandParser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @return ModuleInfo of the module searched."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @throws CommandException if an error occurs during the search process."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ModuleInfo searchModule(String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo moduleInfo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMPTY_SEARCH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            Optional\u003cModuleInfo\u003e moduleDetails \u003d dataManager.getModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            if (moduleDetails.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_FAILED_TO_FIND_MODULE, moduleCode));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            moduleInfo \u003d moduleDetails.get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        } catch (NusmodsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Adds a Module to the GradPad."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public AddCommand(Module module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_MODULE, toAdd.getModuleCode()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 5,
      "-": 30,
      "yan-soon": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckMcCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CHECKMC_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Displays the cumulative Modular Credits of the modules in the GradPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class CheckMcCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private ObservableList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private double totalMc \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        modules \u003d model.getGradPad().getModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            totalMc +\u003d Double.parseDouble(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKMC_SUCCESS, totalMc));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Clears the GradPad."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.setGradPad(new GradPad());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 7,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Checks if the command requires confirmation from the user and needs to be stalled."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return generally returns false as most commands do not require confirmation from the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 8,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return Objects.hash(feedbackToUser, exit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Deletes a Module identified using a Module\u0027s ModuleCode."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final ModuleCode code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a DeleteCommand to delete the module with the specified {@code ModuleCode}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public DeleteCommand(ModuleCode code) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Retrieves the module to be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param model The Model which the command operates on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return The module to be deleted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @throws CommandException if the module cannot be found in Completed Modules."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Module getModuleToDelete(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        List\u003cModule\u003e modules \u003d model.getGradPad().getModuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Optional\u003cModule\u003e moduleToDelete \u003d modules.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                .filter(module -\u003e module.getModuleCode().equals(code)).findFirst();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (moduleToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_MODULE, code.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return moduleToDelete.get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module moduleToDelete \u003d getModuleToDelete(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 code.equals(((DeleteCommand) other).code)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 13,
      "mhdsyfq": 18,
      "-": 33,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ALL_EDIT_FIELDS_SAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Edits the details of an existing module in the GradPad."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final ModuleCode code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param code of the module in GradPad to edit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param editModuleDescriptor details to edit the module with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public EditCommand(ModuleCode code, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        List\u003cModule\u003e modules \u003d model.getGradPad().getModuleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Optional\u003cModule\u003e moduleToEdit \u003d modules.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .filter(x -\u003e x.getModuleCode().equals(code)).findFirst();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (moduleToEdit.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MODULE, code.toString()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit.get(), editModuleDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (moduleToEdit.get().equals(editedModule)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new CommandException(MESSAGE_ALL_EDIT_FIELDS_SAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (!moduleToEdit.get().isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_MODULE, editedModule.getModuleCode()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        model.setModule(moduleToEdit.get(), editedModule);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, moduleToEdit.get(), editedModule));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode updatedCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleTitle updatedTitle \u003d editModuleDescriptor.getModuleTitle()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .orElse(moduleToEdit.getModuleTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModularCredits updatedCredits \u003d editModuleDescriptor.getModularCredits()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .orElse(moduleToEdit.getModularCredits());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editModuleDescriptor.getTags().orElse(moduleToEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new Module(updatedCode, updatedTitle, updatedCredits, updatedTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return code.equals(e.code)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        private ModuleCode code;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        private ModuleTitle title;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        private ModularCredits credits;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            setModuleCode(toCopy.code);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            setModuleTitle(toCopy.title);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            setModularCredits(toCopy.credits);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return CollectionUtil.isAnyNonNull(code, title, credits, tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public void setModuleCode(ModuleCode code) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            this.code \u003d code;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public void setModuleTitle(ModuleTitle title) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public Optional\u003cModuleTitle\u003e getModuleTitle() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public void setModularCredits(ModularCredits credits) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            this.credits \u003d credits;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public Optional\u003cModularCredits\u003e getModularCredits() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return Optional.ofNullable(credits);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u0026\u0026 getModuleTitle().equals(e.getModuleTitle())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u0026\u0026 getModularCredits().equals(e.getModularCredits())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "silvernitro": 5,
      "mhdsyfq": 53,
      "-": 121,
      "yan-soon": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Finds and lists all modules in GradPad whose name or tag contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final Predicate\u003cModule\u003e predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a FindCommand to filter module(s) based on the specified predicate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param predicate the predicate used to filter relevant module(s)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public FindCommand(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String.format(Messages.MESSAGE_MODULES_FOUND_OVERVIEW, model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "silvernitro": 6,
      "mhdsyfq": 7,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ForceClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Force clears the GradPad."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ForceClearCommand extends ClearCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ForceDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Force deletes a Module identified using a Module\u0027s ModuleCode."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ForceDeleteCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a ForceDeleteCommand to force delete the module with the specified {@code ModuleCode}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public ForceDeleteCommand(ModuleCode code) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        super(code);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.LINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GEM_FAILURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GEM_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GEH_SEM1_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GEH_SEM2_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GEQ_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GER_PATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GES_SEM1_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GES_SEM2_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GET_SEM1_PATH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GET_SEM2_PATH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.GemCommandStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GemCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private GemCommandStorage sem1Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private GemCommandStorage sem2Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private String compiledModules;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the attribute sem1Storage of a GemCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return storage attribute of type GemCommandStorage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public GemCommandStorage getSem1Storage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return sem1Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the attribute sem2Storage of a GemCommand object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return storage attribute of type GemCommandStorage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public GemCommandStorage getSem2Storage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return sem2Storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the sem1Storage attribute with Semester 1 GE Modules by using"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * the various set() methods from the GemCommandStorage class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the path in invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setSem1Storage() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem1Storage \u003d new GemCommandStorage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem1Storage.setGehModules(GEH_SEM1_PATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem1Storage.setGeqModules(GEQ_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem1Storage.setGerModules(GER_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem1Storage.setGesModules(GES_SEM1_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem1Storage.setGetModules(GET_SEM1_PATH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the sem2Storage attribute with Semester 2 GE Modules by using"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * the various set() methods from the GemCommandStorage class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the path in invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setSem2Storage() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem2Storage \u003d new GemCommandStorage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem2Storage.setGehModules(GEH_SEM2_PATH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem2Storage.setGeqModules(GEQ_PATH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem2Storage.setGerModules(GER_PATH);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem2Storage.setGesModules(GES_SEM2_PATH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sem2Storage.setGetModules(GET_SEM2_PATH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets up the all the GE modules in the sem1Storage and sem2Storage and displays them"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * with the CommandResult object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return a CommandResult displaying all the available GE modules."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setSem1Storage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setSem2Storage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String modulesToAdd \u003d \"\\n\\nSemester 1:\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            setCompiledModules(sem1Storage, model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            modulesToAdd +\u003d compiledModules;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            modulesToAdd +\u003d \"\\n\\n\" + LINE + \"Semester 2:\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            setCompiledModules(sem2Storage, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            modulesToAdd +\u003d compiledModules;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_GEM_SUCCESS + modulesToAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } catch (IOException | IllegalValueException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_GEM_FAILURE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Takes a List of Modules and extracts out their Module Code and Modular Credits."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param modules List of Modules."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return String of Module Codes and Modular Credits."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public StringBuilder moduleExtractor(ObservableList\u003cModule\u003e modules, Model model) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert modules !\u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String moduleToAdd \u003d module.getModuleCode() + \"\\t\" + module.getModuleTitle()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return modulesToAdd;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Loads the compiledModules attribute with all the relevant GE modules in String form."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param storage Contains list of GE modules."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void setCompiledModules(GemCommandStorage storage, Model model) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        compiledModules \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        compiledModules +\u003d \"Human Cultures\\n\" + moduleExtractor(storage.getGehModules(), model) + \"\\n\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        compiledModules +\u003d \"Thinking and Expression\\n\" + moduleExtractor(storage.getGetModules(), model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            + \"\\n\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        compiledModules +\u003d \"Singapore Studies\\n\" + moduleExtractor(storage.getGesModules(), model) + \"\\n\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        compiledModules +\u003d \"Asking Questions\\n\" + moduleExtractor(storage.getGeqModules(), model) + \"\\n\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        compiledModules +\u003d \"Quantitative Reasoning\\n\" + moduleExtractor(storage.getGerModules(), model);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns compiledModules attribute of GemCommandStorage object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return compiledModules attribute of type String."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String getCompiledModules() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return compiledModules;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 56,
      "yan-soon": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 13,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Lists all modules in GradPad to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RequiredCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.FOUNDATION_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.INTERNSHIP_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.ITPROF_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MATH_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FAILURE_GE_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FAILURE_GE_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FOUNDATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_ITPROF;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_MATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SCIENCE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_FOUNDATION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_GE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_ITPROF;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_MATH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_SCIENCE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.PRECLUSION_PATH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.RequiredCommandStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e currentModules;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private String leftOverModules \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private RequiredCommandStorage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the leftOverModules attribute of a RequiredCommand object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return leftOverModules of type String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public String getLeftOverModules() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return leftOverModules;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the attribute storage of a RequiredCommand object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return storage attribute of type RequiredCommandStorage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public RequiredCommandStorage getStorage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets up the storage attribute with all the relevant modules from various fields."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file violates some constraints."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setStorage() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage \u003d new RequiredCommandStorage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredFoundation(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredITprof(ITPROF_PATH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredMath(MATH_PATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredScience(SCIENCE_PATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredInternship(INTERNSHIP_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setPreclusionMap(PRECLUSION_PATH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the currentModules attribute of an Required Command object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return currentModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getCurrentModules() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return currentModules;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets the argument modules as the attribute currentModules."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules target argument of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setCurrentModules(ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        currentModules \u003d modules;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Checks if a Module already exists in a given Module List."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param module Module that you wish to check."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules Module List that you wish to check against."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return True if the module already exists, false otherwise."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public boolean doesModuleAlreadyExist(Module module, ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module mod : modules) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (module.isSameModule(mod)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Checks if a Module is a valid preclusion."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param module Module to check."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules Module list to check against."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return True if module is a preclusion, false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public boolean isModuleAPreclusion(Module module, ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Map \u003cString, String\u003e preclusionMap \u003d storage.getPreclusionMap();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String modToCheckAgainst \u003d module.getModuleCode().toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (preclusionMap.containsKey(modToCheckAgainst)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            String modulePreclusion \u003d preclusionMap.get(modToCheckAgainst);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            for (Module mod : modules) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                String currentModName \u003d mod.getModuleCode().toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                if (modulePreclusion.contains(currentModName)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Cross references the user\u0027s current list of Modules against the given"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * modules argument and marks out any undone Modules. Displays a successMessage"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * if all modules are done, and a failMessage if there are left over modules."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules List of Modules of a certain category (Eg. Foundation, IT Professsionalism)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param failMessage Fail message for particular category of Modules."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param successMessage Success message for particular category of Modules."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareModules(ObservableList\u003cModule\u003e modules, String failMessage, String successMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        boolean areModulesCleared \u003d true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (!doesModuleAlreadyExist(module, currentModules)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    \u0026\u0026 !isModuleAPreclusion(module, currentModules)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String moduleToAdd \u003d module.getModuleCode() + \"\\t\" + module.getModuleTitle()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                areModulesCleared \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } if (areModulesCleared) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d successMessage + \"\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d failMessage + modulesToAdd + \"\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        leftOverModules +\u003d \"\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Cross references the user\u0027s current list of Modules and marks out"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * any undone Science Modules."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param requiredScience List of required Science Modules."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareScience(ObservableList\u003cModule\u003e requiredScience) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        boolean isScienceCleared \u003d false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : requiredScience) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (doesModuleAlreadyExist(module, currentModules)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                leftOverModules +\u003d MESSAGE_SUCCESS_SCIENCE + \"\\n\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                isScienceCleared \u003d true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } if (!isScienceCleared) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_SCIENCE + \"\\n\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        leftOverModules +\u003d \"\\n\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Cross references the user\u0027s current list of Modules and marks out"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * any undone Internship Modules. Also calculates current MC score"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * achieved from Internship Modules."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param requiredInternship List of required Internship Modules."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareInternship(ObservableList\u003cModule\u003e requiredInternship) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int modularScore \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder leftOverInternship \u003d new StringBuilder();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : requiredInternship) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (doesModuleAlreadyExist(module, currentModules)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                int modularCredits \u003d Integer.parseInt(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                modularScore +\u003d modularCredits;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String moduleToAdd \u003d module.getModuleCode() + \"\\t\" + module.getModuleTitle()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                leftOverInternship.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } if (modularScore \u003c 12) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            String modScore \u003d \" You are currently at \" + modularScore + \" MCs. \";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_INTERN_1 + modScore + MESSAGE_INTERN_2 + leftOverInternship;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Checks if particular GE field is cleared in the current GradPad."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param ge The GE field that you wish to check (Eg. \u0027GEQ\u0027 or \u0027GEH\u0027)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return True if the GE field is cleared, false otherwise."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public boolean isGePresent(String ge) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : currentModules) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            String moduleCode \u003d module.getModuleCode().toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (moduleCode.startsWith(ge)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Checks which GE fields are not clear in the current GradPad and"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * adds to the attribute leftOverModules if that particular GE field"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * has not been cleared."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareAllGEs() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String uncompletedGEs \u003d \"\\n\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        boolean allGEsCleared \u003d true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!isGePresent(\"GEH\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            uncompletedGEs +\u003d \"GEH\" + \"\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            allGEsCleared \u003d false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!isGePresent(\"GEQ\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            uncompletedGEs +\u003d \"GEQ\" + \"\\n\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            allGEsCleared \u003d false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!isGePresent(\"GER\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            uncompletedGEs +\u003d \"GER\" + \"\\n\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            allGEsCleared \u003d false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!isGePresent(\"GES\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            uncompletedGEs +\u003d \"GES\" + \"\\n\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            allGEsCleared \u003d false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!isGePresent(\"GET\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            uncompletedGEs +\u003d \"GET\" + \"\\n\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            allGEsCleared \u003d false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (allGEsCleared) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_SUCCESS_GE + \"\\n\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_FAILURE_GE_1 + uncompletedGEs + MESSAGE_FAILURE_GE_2 + \"\\n\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        leftOverModules +\u003d \"\\n\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets up the reference modules and the current modules in gradPad and compares all the modules."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return a CommandResult displaying all the undone modules."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            currentModules \u003d model.getGradPad().getModuleList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setStorage();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredFoundation \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredITprof \u003d storage.getRequiredITprof();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredMath \u003d storage.getRequiredMath();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredScience \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredInternship \u003d storage.getRequiredInternship();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareAllGEs();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareModules(requiredFoundation, MESSAGE_FOUNDATION, MESSAGE_SUCCESS_FOUNDATION);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareModules(requiredITprof, MESSAGE_ITPROF, MESSAGE_SUCCESS_ITPROF);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareModules(requiredMath, MESSAGE_MATH, MESSAGE_SUCCESS_MATH);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareScience(requiredScience);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareInternship(requiredInternship);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(leftOverModules);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } catch (IOException | IllegalValueException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 4,
      "yan-soon": 282
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScienceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FAILURE_SCIENCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SCIENCE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.RequiredCommandStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ScienceCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e scienceModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns the scienceModules attribute of a given ScienceCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return scienceModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getScienceModules() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return scienceModules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the scienceModules attribute with Science Modules by using"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * the setRequiredScience() method from the RequiredCommandStorage class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the Science Modules file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the path in invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setScienceModules(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        RequiredCommandStorage storage \u003d new RequiredCommandStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredScience(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        scienceModules \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Goes through the scienceModules attribute and parses all Science Modules, to be read by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return CommandResult Object with the relevant Science Modules or Failure Message if modules"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * are absent."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setScienceModules(SCIENCE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            for (Module module : scienceModules) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                if (!model.hasModule(module)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    String moduleToAdd \u003d module.getModuleCode() + \"\\t\" + module.getModuleTitle()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_SCIENCE_SUCCESS + \"\\n\" + modulesToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } catch (IOException | IllegalValueException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE_SCIENCE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 8,
      "yan-soon": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SEARCH_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Search for a module to display its module details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Module Code matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Creates a SearchCommand to search for a module from the Computer Science"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * curriculum {@code Module}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public SearchCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfoSearcher moduleInfoSearcher \u003d new ModuleInfoSearcher();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo searchResult \u003d moduleInfoSearcher.searchModule(moduleCode.moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // preclusions and prerequisites could be null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String preclusion \u003d Optional.ofNullable(searchResult.getPreclusion()).orElse(\"None\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String prerequisite \u003d Optional.ofNullable(searchResult.getPrerequisite()).orElse(\"None\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String searchDisplay \u003d String.format(MESSAGE_SEARCH_SUCCESS, searchResult.getModuleCode(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                searchResult.getModuleCredit(), searchResult.getTitle(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                searchResult.getDescription(), preclusion, prerequisite, searchResult.getSemesters());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new CommandResult(searchDisplay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((SearchCommand) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 44,
      "silvernitro": 7,
      "mhdsyfq": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAGS_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Lists all tags in GradPad."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class TagsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e tagNames \u003d model.getGradPad().getTags().getTagNames();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (tagNames.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TAGS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String tags \u003d String.join(\"\\n\", tagNames);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(MESSAGE_TAGS_SUCCESS + tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 25,
      "mhdsyfq": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/YesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_CONFIRMATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Confirms a command that requires confirmation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class YesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(MESSAGE_NO_CONFIRMATION);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ModuleInfoSearcher moduleInfoSearcher;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs an AddCommandParser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public AddCommandParser() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        moduleInfoSearcher \u003d new ModuleInfoSearcher();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs an AddCommandParser with a custom ModuleInfoSearcher object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This is mainly used for stubbing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleInfoSearcher - the custom ModuleInfoSearcher"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public AddCommandParser(ModuleInfoSearcher moduleInfoSearcher) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.moduleInfoSearcher \u003d moduleInfoSearcher;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or if the module does"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * not exist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (trimmedArgs.isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_ADD_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String moduleCodeText \u003d StringUtil.ignoreCase(moduleCode.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleInfo moduleInfo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            moduleInfo \u003d moduleInfoSearcher.searchModule(moduleCodeText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleTitle moduleTitle \u003d ParserUtil.parseModuleTitle(moduleInfo.getTitle());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModularCredits modularCredits \u003d ParserUtil.parseModularCredits(moduleInfo.getModuleCredit());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleTitle, modularCredits, tagList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new AddCommand(module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 18,
      "mhdsyfq": 26,
      "-": 30,
      "yan-soon": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Prefix PREFIX_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Prefix PREFIX_CREDITS \u003d new Prefix(\"cr/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_DELETE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode code \u003d ParserUtil.parseModuleCode(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new DeleteCommand(code);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 5,
      "mhdsyfq": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ModuleInfoSearcher moduleInfoSearcher;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs an EditCommandParser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public EditCommandParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        moduleInfoSearcher \u003d new ModuleInfoSearcher();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs an EditCommandParser with a custom ModuleInfoSearcher object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This is mainly used for stubbing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleInfoSearcher - the custom ModuleInfoSearcher"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public EditCommandParser(ModuleInfoSearcher moduleInfoSearcher) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.moduleInfoSearcher \u003d moduleInfoSearcher;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_CODE, PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (trimmedArgs.isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                MESSAGE_EDIT_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode code \u003d ParserUtil.parseModuleCode(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleInfo moduleInfo;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CODE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            ModuleCode newCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                moduleInfo \u003d moduleInfoSearcher.searchModule(newCode.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                editModuleDescriptor.setModuleCode(newCode);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                editModuleDescriptor.setModuleTitle(ParserUtil.parseModuleTitle(moduleInfo.getTitle()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                editModuleDescriptor.setModularCredits("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ParserUtil.parseModularCredits(moduleInfo.getModuleCredit()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editModuleDescriptor::setTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new EditCommand(code, editModuleDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 18,
      "mhdsyfq": 27,
      "-": 53,
      "yan-soon": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FIND_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.CompoundFindPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_FIND_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(trimmedArgs.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new FindCommand(new CompoundFindPredicate(keywords));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 4,
      "mhdsyfq": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ForceDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FORCE_DELETE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.ForceDeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Parses input arguments and creates a new ForceDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ForceDeleteCommandParser implements Parser\u003cForceDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ForceDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * and returns a ForceDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public ForceDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                MESSAGE_FORCE_DELETE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode code \u003d ParserUtil.parseModuleCode(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new ForceDeleteCommand(code);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradPadParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.ADD_COMMAND_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.CHECKMC_COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.CLEAR_COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.EDIT_COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.EXIT_COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.FIND_COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.FORCE_CLEAR_COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.FORCE_DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.GEM_COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.LIST_COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.REQUIRED_COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.SCIENCE_COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.SEARCH_COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.TAGS_COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.YES_COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.YE_COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.Y_COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.CheckMcCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.ForceClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.GemCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.RequiredCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.ScienceCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.logic.commands.TagsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.YesCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GradPadParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_EMPTY_FIELD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case ADD_COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case EDIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case FORCE_DELETE_COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new ForceDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case CLEAR_COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case FORCE_CLEAR_COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new ForceClearCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case FIND_COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case LIST_COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case EXIT_COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case HELP_COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case CHECKMC_COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CheckMcCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case SEARCH_COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case REQUIRED_COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new RequiredCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case SCIENCE_COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new ScienceCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case YES_COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case YE_COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case Y_COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new YesCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case TAGS_COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return new TagsCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case GEM_COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new GemCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "silvernitro": 3,
      "mhdsyfq": 51,
      "-": 61,
      "yan-soon": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Parses a {@code String ModuleTitle} into a {@code ModuleTitle}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws ParseException if the given {@code moduleTitle} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static ModuleTitle parseModuleTitle(String moduleTitle) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(moduleTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String trimmedModuleTitle \u003d moduleTitle.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new ModuleTitle(trimmedModuleTitle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Parses a {@code String code} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ModuleCode parseModuleCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String modifiedCode \u003d code.trim().toUpperCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(modifiedCode)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_MODULE_CODE, modifiedCode));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new ModuleCode(modifiedCode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Parses a {@code String credits} into a {@code ModularCredits}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ModularCredits parseModularCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new ModularCredits(trimmedCredits);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TAG, trimmedTag));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        final Set\u003cString\u003e tagNameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            if (!tagNameSet.contains(tagName.toLowerCase())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                tagNameSet.add(tagName.toLowerCase());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 4,
      "mhdsyfq": 15,
      "-": 78,
      "yan-soon": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SEARCH_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_SEARCH_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new SearchCommand(moduleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 27,
      "mhdsyfq": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GradPad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.UniqueTagMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Wraps all data at the GradPad level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPad implements ReadOnlyGradPad {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final UniqueTagMap tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Creates a GradPad using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad(ReadOnlyGradPad toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert modules !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Replaces the current tags with {@code tags}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setTags(UniqueTagMap tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Resets the existing data of this {@code GradPad} with {@code newData}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData(ReadOnlyGradPad newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        setTags(newData.getTags());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    //// list checking operations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return modules.isEmpty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the GradPad."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Adds a module to the GradPad."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module must not already exist in the GradPad."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert m !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Reuse existing tags if possible"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module toAdd \u003d getModuleWithReplacedTags(m);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        modules.add(toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code target} must exist in the GradPad."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the GradPad."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // \"untag\" all tags in the module we\u0027re going to edit"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags.remove(target.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Get new tags and reuse existing tags if possible"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedModuleToAdd \u003d getModuleWithReplacedTags(editedModule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        modules.setModule(target, editedModuleToAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Removes {@code key} from this {@code GradPad}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code key} must exist in the GradPad."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert key !\u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags.remove(key.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Module getModuleWithReplacedTags(Module m) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e replacedTags \u003d tags.checkAndReplaceTags(m.getTags());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new Module(m.getModuleCode(), m.getModuleTitle(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                          m.getModularCredits(), replacedTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public UniqueTagMap getTags() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                || (other instanceof GradPad // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 modules.equals(((GradPad) other).modules));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 116,
      "silvernitro": 34,
      "mhdsyfq": 8,
      "yan-soon": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the user prefs\u0027 GradPad file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Sets the user prefs\u0027 GradPad file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void setGradPadFilePath(Path gradPadFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces GradPad data with the data in {@code gradPad}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void setGradPad(ReadOnlyGradPad gradPad);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /** Returns the GradPad */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ReadOnlyGradPad getGradPad();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the GradPad."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if the GradPad is empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module must exist in the GradPad."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code module} must not already exist in the GradPad."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code target} must exist in the GradPad."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the GradPad."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 26,
      "mhdsyfq": 2,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Represents the in-memory model of the GradPad data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final GradPad gradPad;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Initializes a ModelManager with the given GradPad and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ModelManager(ReadOnlyGradPad gradPad, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireAllNonNull(gradPad, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        logger.fine(\"Initializing with GradPad: \" + gradPad + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPad \u003d new GradPad(gradPad);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.gradPad.getModuleList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this(new GradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return userPrefs.getGradPadFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath(Path gradPadFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(gradPadFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        userPrefs.setGradPadFilePath(gradPadFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradPad \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPad(ReadOnlyGradPad gradPad) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPad.resetData(gradPad);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return gradPad.hasModule(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return gradPad.isEmpty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.removeModule(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert module !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        gradPad.addModule(module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.setModule(target, editedModule);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code versionedGradPad}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad.equals(other.gradPad)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 35,
      "mhdsyfq": 8,
      "-": 114,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyGradPad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.UniqueTagMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Unmodifiable view of a GradPad"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public interface ReadOnlyGradPad {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the unique tags in the GradPad."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    UniqueTagMap getTags();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 17,
      "silvernitro": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private Path gradPadFilePath \u003d Paths.get(\"data\" , \"gradpad.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        setGradPadFilePath(newUserPrefs.getGradPadFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPadFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath(Path gradPadFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(gradPadFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPadFilePath \u003d gradPadFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 gradPadFilePath.equals(o.gradPadFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Objects.hash(guiSettings, gradPadFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + gradPadFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/CompoundFindPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class CompoundFindPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public CompoundFindPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Predicate\u003cModule\u003e moduleCodePredicate \u003d new ModuleCodeContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Predicate\u003cModule\u003e tagsPredicate \u003d new ModuleContainsTagsPredicate(keywords);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // chain the predicates"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCodePredicate.or(tagsPredicate).test(module);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       || (other instanceof CompoundFindPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                   \u0026\u0026 keywords.equals(((CompoundFindPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModularCredits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents a Module\u0027s no. of modular credits in the GradPad."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " *  * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModularCredits {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,2}\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs a {@code ModularCredits}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param credits A valid value of modular credits."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModularCredits(String credits) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof ModularCredits // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 value.equals(((ModularCredits) other).value)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 39,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents a Module in the GradPad."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ModuleCode code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final ModuleTitle title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ModularCredits credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Module(ModuleCode code, ModuleTitle title, ModularCredits credits, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireAllNonNull(code, title, credits, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public ModuleTitle getModuleTitle() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModularCredits getModularCredits() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if both modules of the same module code have at least one other field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if both modules have the same fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModule.getModularCredits().equals(getModularCredits())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u0026\u0026 otherModule.getModuleTitle().equals(getModuleTitle())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 otherModule.getTags().equals(getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return Objects.hash(code, title, credits, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        builder.append(\"Module Code: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .append(\"\\t\\t\" + getModuleCode())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .append(\"\\nModule Title: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .append(\"\\t\\t\" + getModuleTitle())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .append(\"\\nModular Credits: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .append(\"\\t\" + getModularCredits())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .append(\"\\nTags: \\t\\t\\t\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            builder.append(\"None\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 92,
      "mhdsyfq": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSTRAINTS_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents a Module\u0027s module code in the GradPad."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    A module code must have 2 or more characters as its prefix followed by 1 or more digits as its numerical"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    code. It can optionally end with 1 or more characters as a suffix. It is also case-insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}]{2,}\\\\d+[\\\\p{Alpha}]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS_CODE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 54,
      "mhdsyfq": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCodeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code module code} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCodeContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new ModuleCodeContainsKeywordsPredicate to test whether a module code matches the contains"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * the keywords in the specified list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param keywords list of keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleCodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(keywords !\u003d null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharSequenceIgnoreCase(module.getModuleCode().moduleCode,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof ModuleCodeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleCodeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 30,
      "mhdsyfq": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleContainsTagsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Tests that a {@code Module} contains a {@code Tag} matching any of the tag names given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleContainsTagsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final List\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Creates a new ModuleContainsTagsPredicate to test whether a module contains any tag that"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * matches any of the tag names in the specified list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param tagNames list of tag names."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleContainsTagsPredicate(List\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.tagNames \u003d tagNames;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return tagNames.stream().anyMatch(name -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "              module.getTags().stream().anyMatch(tag -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                     StringUtil.containsCharSequenceIgnoreCase(tag.tagName, name)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleTitle.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a Module\u0027s module title in the GradPad."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * * Guarantees: immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ModuleTitle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public final String moduleTitle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Constructs a {@code ModuleTitle}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param moduleTitle A valid module title."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public ModuleTitle(String moduleTitle) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(moduleTitle);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.moduleTitle \u003d moduleTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return moduleTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                || (other instanceof ModuleTitle // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u0026\u0026 moduleTitle.equals(((ModuleTitle) other).moduleTitle)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return moduleTitle.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 38,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * updating of modules uses Module#isSameModule(Module) for equality so as to ensure that the module being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueModuleList. However, the removal of a module"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * uses Module#equals(Object) so as to ensure that the Module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if the list is empty."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * The module {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof UniqueModuleList// instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 136,
      "mhdsyfq": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 10,
      "mhdsyfq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Signals that the operation is unable to find the specified Module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 5,
      "mhdsyfq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSTRAINTS_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a Tag in the GradPad."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\p{Alnum}+\\\\p{Blank}?)+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private int moduleCount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs a {@code Tag}. By default, a tag has a module count of 1 since is it constructed by a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * module that contains it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        moduleCount \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the no. of modules that contain this tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return the module count"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int getModuleCount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Increments the no. of modules that contain this tag. This is used when:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * 1. A new module with this tag is created"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * 2. An existing module is edited to contain this tag"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void incrementModuleCount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        moduleCount++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Decrements the no. of modules that contain this tag. This is used when:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * 1. A module with this tag is deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * 2. An existing module is edited and no longer contains this tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void decrementModuleCount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        moduleCount--;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Checks if this tag is being used by any {@code Module} in GradPad."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return True if the tag is no longer used by any {@code Module}, false if otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCount \u003d\u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 41,
      "mhdsyfq": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Encapsulates data and logic to maintain a set of unique {@code Tag} objects in GradPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * With this, duplicate tags are not created in GradPad unnecessarily, thus encouraging reuse of {@code Tag} objects"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * across {@code Module} objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class UniqueTagMap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * A map of tag names to actual {@code Tag} objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final Map\u003cString, Tag\u003e tagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Replaces the current map of {@code Tag} objects with the contents of a new {@code UniqueTagMap}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param replacement The replacement {@code UniqueTagMap} to copy from."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setTags(UniqueTagMap replacement) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagMap.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagMap.putAll(replacement.tagMap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Given a set of {@code Tags}, decreases the module count of each tag, and if the tag ends up as not being"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * used by any {@code Module}, removes it from {@code UniqueTagMap}. This is used to effect \"untagging\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * operations, where a module no longer uses these tags, or if a module is deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param tags The set of tags to \"untag\"."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            tag.decrementModuleCount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            if (tag.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                tagMap.remove(tag.tagName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Given a set of {@code Tags}, checks if each tag already exists in {@code UniqueTagMap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * If it does, then it replaces that tag with the existing tag so that there is no need to create a new tag."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Else, it adds that new tag to GradPad."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param tagsToCheck The set of tags to check through."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The new set of tags which has any duplicate new tags replaced with their existing equivalent."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Set\u003cTag\u003e checkAndReplaceTags(Set\u003cTag\u003e tagsToCheck) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e replacedTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (Tag tag : tagsToCheck) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            if (tagMap.containsKey(tag.tagName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                Tag existingTag \u003d tagMap.get(tag.tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                existingTag.incrementModuleCount();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                replacedTagSet.add(existingTag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                tagMap.put(tag.tagName, tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                replacedTagSet.add(tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return replacedTagSet;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns a list of tag names of all tags in {@code UniqueTagMap}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return a list of tag names"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public List\u003cString\u003e getTagNames() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new ArrayList\u003c\u003e(tagMap.keySet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return tagMap.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Contains utility methods for populating {@code GradPad} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2103T\"), new ModuleTitle(\"Software Engineering\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new ModularCredits(\"4\"), getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS1010\"), new ModuleTitle(\"Programming Methodology\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new ModularCredits(\"4\"), getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2101\"), new ModuleTitle(\"Effective Communication for Computing \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"Professionals\"), new ModularCredits(\"4\"), getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2105\"), new ModuleTitle(\"Introduction to Computer Networks\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new ModularCredits(\"4\"), getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"MA1521\"), new ModuleTitle(\"Calculus for Computing\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new ModularCredits(\"4\"), getTagSet(\"MathSci\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2107\"), new ModuleTitle(\"Introduction to Information Security\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new ModularCredits(\"4\"), getTagSet(\"BreadthDepth\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ReadOnlyGradPad getSampleGradPad() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad sampleAb \u003d new GradPad();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "silvernitro": 6,
      "mhdsyfq": 14,
      "-": 27,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/DataFetcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public abstract class DataFetcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String DATA_FILE_PATH \u003d \"data/modules.json\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String SAVE_DATA_FILE_PATH \u003d \"./src/main/resources/data/modules.json\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MODULE_SUMMARY_LIST_URL \u003d \"https://api.nusmods.com/v2/2020-2021/moduleList.json\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MODULE_INFO_URL \u003d \"https://api.nusmods.com/v2/2020-2021/modules/%s.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    abstract void fetchAndSaveModules() throws NusmodsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    abstract Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/DataFetcherManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.nusmods.NusmodsKeywords.MODULE_FILTER_KEYWORDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.HttpUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Handles API requests made by GradPad to the NUSMods public API to retrieve module data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class DataFetcherManager extends DataFetcher {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DataFetcher.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final HttpUtil httpUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final String dataFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    DataFetcherManager() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        httpUtil \u003d HttpUtil.SINGLETON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        dataFilePath \u003d DataFetcher.SAVE_DATA_FILE_PATH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    DataFetcherManager(HttpUtil httpUtil) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(httpUtil !\u003d null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.httpUtil \u003d httpUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        dataFilePath \u003d DataFetcher.SAVE_DATA_FILE_PATH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    DataFetcherManager(HttpUtil httpUtil, String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(httpUtil !\u003d null \u0026\u0026 !filePath.trim().isEmpty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.httpUtil \u003d httpUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.dataFilePath \u003d filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches a list of all NUS module summaries, then fetches module info for all CS modules (only) and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * saves them to a JSON file locally."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while fetching data from NUSMods API or while saving data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchAndSaveModules() throws NusmodsException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e moduleSummaries \u003d fetchModuleSummaryList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e filteredModules \u003d filterModuleSummaries(moduleSummaries, MODULE_FILTER_KEYWORDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e moduleInfoMap \u003d generateModuleInfoMap(filteredModules);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            JsonUtil.saveJsonFile(moduleInfoMap, Paths.get(getDataFilePath()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches the module info for a single module from the NUSMods API."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module code of the module to fetch data for."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The fetched data in a {@code ModuleInfo} object or {@code Optional.empty()} if data not found."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while fetching data or if data does not contain valid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code ModuleInfo}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        logger.info(\"Fetching module info for: \" + moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String jsonResponse \u003d httpUtil.makeGETRequest(String.format(MODULE_INFO_URL, moduleCode));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return Optional.of(JsonUtil.fromJsonString(jsonResponse, ModuleInfo.class));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches a list of all modules and their summaries from the NUSMods API."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return A list of {@code ModuleSummary} objects."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while fetching data or if the data does not contain valid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code ModuleSummary}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private List\u003cModuleSummary\u003e fetchModuleSummaryList() throws NusmodsException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        logger.info(\"Fetching list of module summaries from NUSMods API...\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String jsonResponse \u003d httpUtil.makeGETRequest(MODULE_SUMMARY_LIST_URL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return mapper.readValue(jsonResponse, new TypeReference\u003cList\u003cModuleSummary\u003e\u003e(){});"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Filters a list of {@code ModuleSummary} objects\u0027 module codes by a list of keywords."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param modules The list of ModuleSummary objects to filter."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param keywords The keywords to match in each ModuleSummary object\u0027s module code."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The filtered list of ModuleSummary objects where every one of their module codes contains any"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * one (or more) of the keywords specified."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    List\u003cModuleSummary\u003e filterModuleSummaries(List\u003cModuleSummary\u003e modules, String... keywords) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // checks if a module summary\u0027s module code contains ANY of the filter keywords"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Predicate\u003cModuleSummary\u003e moduleCodePredicate \u003d module -\u003e Arrays.stream(keywords)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                 .anyMatch(keyword -\u003e module.getModuleCode().contains(keyword));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return modules.stream().filter(moduleCodePredicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches module info for all modules given a list of {@code ModuleSummary} objects, then maps each"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * module\u0027s code to its {@code ModuleInfo} object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleSummaries The list of {@code ModuleSummary} objects to fetch info for."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return A mapping of module codes to their respective {@code ModuleInfo}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Map\u003cString, ModuleInfo\u003e generateModuleInfoMap(List\u003cModuleSummary\u003e moduleSummaries) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        logger.info(\"Fetching module info for all modules...\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e moduleInfoMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (ModuleSummary summary : moduleSummaries) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            String moduleCode \u003d summary.getModuleCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                // delay each API call to adhere to rate limits"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                Thread.sleep(150);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                Optional\u003cModuleInfo\u003e info \u003d fetchModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                info.ifPresent(moduleInfo -\u003e moduleInfoMap.put(moduleCode, moduleInfo));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (NusmodsException | InterruptedException ex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                logger.warning(\"Module info not found for: \" + moduleCode);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleInfoMap;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getDataFilePath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return dataFilePath;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/ModuleInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents jackson-friendly module information from NUSMods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@JsonIgnoreProperties(ignoreUnknown \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String moduleCredit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private List\u003cInteger\u003e semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getModuleCredit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public String getSemesters() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return semesters.stream().map(Object::toString).map(this::parseSemester).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private String parseSemester(String semester) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return \"Special Term I\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return \"Special Term II\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return semester;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @JsonProperty(\"semesterData\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private void unpackNested(List\u003cMap\u003cString, Object\u003e\u003e semesterData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        for (Map\u003cString, Object\u003e semester : semesterData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            Object sem \u003d semester.get(\"semester\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            semesters.add((Integer) sem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!(other instanceof ModuleInfo)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ModuleInfo otherModuleInfo \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModuleInfo.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getModuleCredit().equals(getModuleCredit())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getSemesters().equals(getSemesters())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 equalsIfNotNull(otherModuleInfo.getPreclusion(), getPreclusion())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 equalsIfNotNull(otherModuleInfo.getPrerequisite(), getPrerequisite());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private boolean equalsIfNotNull(Object o1, Object o2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return o1 \u003d\u003d null || o2 \u003d\u003d null || o1.equals(o2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Objects.hash(moduleCode, title, moduleCredit, semesters, description, preclusion, prerequisite);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return getModuleCode() + \" \" + getTitle() + \" \" + getModuleCredit();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 32,
      "silvernitro": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/ModuleSummary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents jackson-friendly module summaries from NUSMods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@JsonIgnoreProperties(ignoreUnknown \u003d true)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleSummary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private List\u003cInteger\u003e semesters;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public List\u003cInteger\u003e getSemesters() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!(other instanceof ModuleSummary)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ModuleSummary otherModuleSummary \u003d (ModuleSummary) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModuleSummary.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleSummary.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleSummary.getSemesters().equals(getSemesters());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return Objects.hash(moduleCode, title, semesters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return getModuleCode() + \" \" + getTitle() + \" \" + getSemesters();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/NusmodsData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public interface NusmodsData {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Optional\u003cString\u003e getModuleTitle(String moduleCode) throws NusmodsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Optional\u003cModuleInfo\u003e getModuleInfo(String moduleCode) throws NusmodsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/NusmodsDataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Encapsulates operations to retrieve NUSMods module information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class NusmodsDataManager implements NusmodsData {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final DataFetcher dataFetcher;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Default public constructor to create an NusmodsDataManager object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public NusmodsDataManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        dataFetcher \u003d new DataFetcherManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        filePath \u003d DataFetcher.DATA_FILE_PATH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructor to change the DataFetcher class used. Mainly used for testing to provide stubs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param dataFetcher The class used to invoke static methods in this class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    NusmodsDataManager(DataFetcher dataFetcher, String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(dataFetcher !\u003d null \u0026\u0026 !filePath.trim().isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.dataFetcher \u003d dataFetcher;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the module title of a module given its module code."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module code to search for."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The module title or {@code Optional.empty()} if not found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while retrieving module info."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Optional\u003cString\u003e getModuleTitle(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return getModuleInfo(moduleCode).map(ModuleInfo::getTitle);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the {@code ModuleInfo} of a module given its module code."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This method attempts to fetch the latest info from the NUSMods API if possible. Otherwise, it will"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * still return the info stored locally."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module code to search for."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The {@code ModuleInfo} or {@code Optional.empty()} if not found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while retrieving module info."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Optional\u003cModuleInfo\u003e getModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return dataFetcher.fetchModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (NusmodsException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return getModuleInfoFromFile(moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the {@code ModuleInfo} for a given module code by retrieving it locally."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module coed to search for."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The {@code ModuleInfo} or {@code Optional.empty()} if not found."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while retrieving module info."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Optional\u003cModuleInfo\u003e getModuleInfoFromFile(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            String jsonString \u003d getFileFromResource(getFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            TypeReference\u003cHashMap\u003cString, ModuleInfo\u003e\u003e targetType \u003d new TypeReference\u003c\u003e(){};"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            Map\u003cString, ModuleInfo\u003e moduleInfoMap \u003d mapper.readValue(jsonString, targetType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return Optional.ofNullable(moduleInfoMap.get(moduleCode));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(new IOException(\"Error reading module info from local file.\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String getFileFromResource(String fileName) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // The class loader that loaded the class"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        InputStream inputStream \u003d classLoader.getResourceAsStream(fileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (inputStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            StringBuilder dataString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            Reader reader \u003d new BufferedReader(new InputStreamReader(inputStream,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                     Charset.forName(StandardCharsets.UTF_8.name())));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            int c \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            while ((c \u003d reader.read()) !\u003d -1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                dataString.append((char) c);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return dataString.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/NusmodsKeywords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Class to contain module keywords used by the {@code Nusmods} package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public final class NusmodsKeywords {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String[] MODULE_FILTER_KEYWORDS \u003d {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        \"CS\", \"CP\", \"IS1103\", \"IS4010\", \"TR3202\", \"MA1521\", \"MA1101R\", \"ST2334\", \"CM1121\", \"CM1131\", \"CM1417\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        \"LSM1102\", \"LSM1105\", \"LSM1106\", \"LSM1301\", \"LSM1306\", \"PC1141\", \"PC1142\", \"PC1143\", \"PC1144\" , \"PC1221\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        \"PC1222\", \"PC1432\", \"ES2660\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // make constructor private so that this constant class cannot be instantiated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private NusmodsKeywords() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/exceptions/NusmodsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class NusmodsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public NusmodsException(Exception cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GemCommandPaths.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GemCommandPaths {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String GEH_SEM1_PATH \u003d \"data/GEM/GEHsem1.json\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GEH_SEM2_PATH \u003d \"data/GEM/GEHsem2.json\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GEQ_PATH \u003d \"data/GEM/GEQ.json\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GER_PATH \u003d \"data/GEM/GER.json\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GES_SEM1_PATH \u003d \"data/GEM/GESsem1.json\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GES_SEM2_PATH \u003d \"data/GEM/GESsem2.json\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GET_SEM1_PATH \u003d \"data/GEM/GETsem1.json\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String GET_SEM2_PATH \u003d \"data/GEM/GETsem2.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "yan-soon": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GemCommandStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GemCommandStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e gehModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e geqModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e gerModules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e gesModules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e getModules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Makes use of classLoaders to convert the original file path"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * into one that can be readable during runtime, such that it"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * can be used to retrieve the File\u0027s content."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param filePath Original file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return Converted file content of type String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the provided fileName is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private String getFileFromResource(String filePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // The class loader that loaded the class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        InputStream inputStream \u003d classLoader.getResourceAsStream(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (inputStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            StringBuilder dataString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Reader reader \u003d new BufferedReader(new InputStreamReader(inputStream,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    Charset.forName(StandardCharsets.UTF_8.name())));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            int c \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            while ((c \u003d reader.read()) !\u003d -1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                dataString.append((char) c);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return dataString.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns gehModules attribute of GemCommandStorage object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return gehModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getGehModules() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gehModules;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the gehModules attribute with GEH Modules."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the GEH Modules file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGehModules(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gehModules \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns geqModules attribute of GemCommandStorage object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return geqModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getGeqModules() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return geqModules;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the geqModules attribute with GEQ Modules."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the GEQ Modules file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGeqModules(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        geqModules \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns gerModules attribute of GemCommandStorage object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return gerModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getGerModules() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gerModules;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the gerModules attribute with GER Modules."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the GER Modules file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGerModules(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gerModules \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns gesModules attribute of GemCommandStorage object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return gesModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getGesModules() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gesModules;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the gesModules attribute with GES Modules."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the GES Modules file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGesModules(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gesModules \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns getModules attribute of GemCommandStorage object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return getModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getGetModules() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return getModules;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the getModules attribute with GET Modules."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the GET Modules file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGetModules(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        getModules \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GradPadStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Represents a storage for {@link GradPad}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public interface GradPadStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns GradPad data as a {@link ReadOnlyGradPad}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @see #getGradPadFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Optional\u003cReadOnlyGradPad\u003e readGradPad(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Saves the given {@link ReadOnlyGradPad} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param gradPad cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    void saveGradPad(ReadOnlyGradPad gradPad) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @see #saveGradPad(ReadOnlyGradPad)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 5,
      "-": 32,
      "yan-soon": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSTRAINTS_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String code,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                             @JsonProperty(\"moduleTitle\") String title,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                             @JsonProperty(\"modularCredits\") String credits,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        code \u003d source.getModuleCode().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        title \u003d source.getModuleTitle().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        credits \u003d source.getModularCredits().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(code)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS_CODE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final ModuleCode modelCode \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ModuleTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        final ModuleTitle moduleTitle \u003d new ModuleTitle(title);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ModularCredits.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final ModularCredits modelCredits \u003d new ModularCredits(credits);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new Module(modelCode, moduleTitle, modelCredits, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 28,
      "-": 42,
      "yan-soon": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSTRAINTS_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(MESSAGE_CONSTRAINTS_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGradPadStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * A class to access GradPad data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class JsonGradPadStorage implements GradPadStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGradPadStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonGradPadStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return readGradPad(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Similar to {@link #readGradPad()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cJsonSerializableGradPad\u003e jsonGradPad \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                filePath, JsonSerializableGradPad.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!jsonGradPad.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return Optional.of(jsonGradPad.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        saveGradPad(gradPad, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Similar to {@link #saveGradPad(ReadOnlyGradPad)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(gradPad);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGradPad(gradPad), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "-": 60,
      "yan-soon": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableGradPad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * An Immutable GradPad that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@JsonRootName(value \u003d \"gradpad\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class JsonSerializableGradPad {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Constructs a {@code JsonSerializableGradPad} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonSerializableGradPad(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Converts a given {@code ReadOnlyGradPad} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGradPad}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonSerializableGradPad(ReadOnlyGradPad source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Converts this GradPad into the model\u0027s {@code GradPad} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad gradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (gradPad.hasModule(module)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            gradPad.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 7,
      "mhdsyfq": 6,
      "-": 31,
      "yan-soon": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequiredCommandMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommandMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FOUNDATION \u003d \"These are the Foundation Modules you have yet to take: \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There was an error loading the Modules :(\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SCIENCE \u003d \"You have not completed your Science Module requirement,\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \" use the \u0027science\u0027 command to view the available modules.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INTERN_1 \u003d \"You have yet to complete your 12MCs worth of Internship Modules.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INTERN_2 \u003d \"These are the Internship Modules you can take:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOUNDATION \u003d \"You have completed all your Foundation Modules!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SCIENCE \u003d \"You have completed your Science Module Requirement!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_INTERN \u003d \"You have completed your Internship Module Requirement!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_ITPROF \u003d \"These are the IT Professionalism Modules you have yet to take:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ITPROF \u003d \"You have completed your \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"IT Professionalism Module Requirement!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_MATH \u003d \"These are the Math Modules you have yet to take:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MATH \u003d \"You have completed your Math Module Requirement!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_GE \u003d \"You have completed all your GEM requirements!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FAILURE_GE_1 \u003d \"You have not completed the following GEM requirements:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FAILURE_GE_2 \u003d \"Use the \u0027gem\u0027 command to view all the available modules.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String FOUNDATION_PATH \u003d \"data/foundationmodules.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String INTERNSHIP_PATH \u003d \"data/industrialexperience.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String ITPROF_PATH \u003d \"data/ITProfessionalism.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MATH_PATH \u003d \"data/mathmodules.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String SCIENCE_PATH \u003d \"data/sciencemodules.json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String PRECLUSION_PATH \u003d \"data/precludedmodules.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequiredCommandStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommandStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredFoundation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredITprof;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredMath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredScience;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredInternship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Map\u003cString, String\u003e preclusionMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Makes use of classLoaders to convert the original file path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * into one that can be readable during runtime, such that it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * can be used to retrieve the File\u0027s content."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param filePath Original file path."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return Converted file content of type String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the provided fileName is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private String getFileFromResource(String filePath) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // The class loader that loaded the class"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        InputStream inputStream \u003d classLoader.getResourceAsStream(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (inputStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            StringBuilder dataString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Reader reader \u003d new BufferedReader(new InputStreamReader(inputStream,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    Charset.forName(StandardCharsets.UTF_8.name())));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            int c \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            while ((c \u003d reader.read()) !\u003d -1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                dataString.append((char) c);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return dataString.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns preclusionMap attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return preclusionMap attribute of type Map."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Map\u003cString, String\u003e getPreclusionMap() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return preclusionMap;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the preclusionMap attribute with Precluded Modules."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the Precluded Modules file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setPreclusionMap(String path) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        preclusionMap \u003d JsonUtil.getPreclusionMapFromJsonFile(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredFoundation attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredFoundation attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredFoundation() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredFoundation;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredFoundation attribute with Foundation Modules."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the Foundation Modules file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredFoundation(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredFoundation \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredITprof attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredITprof attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredITprof() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredITprof;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredITprof attribute with IT Professionalism Modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the IT Professionalism Modules file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredITprof(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredITprof \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredMath attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredMath attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredMath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredMath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredMath attribute with Math Modules."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the Math Modules file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredMath(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredMath \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredScience attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredScience attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredScience() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredScience;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredScience attribute with Science Modules."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the Science Modules file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredScience(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredScience \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredInternship attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredInternship attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredInternship() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredInternship;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredInternship attribute with Internship Modules."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param path Path of the Internship Modules file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException When the data from the JSON file does not match the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * specific field headers of the JsonAdaptedModule class (Eg.\u0027moduleCode\u0027, \u0027modularCredits\u0027)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredInternship(String path) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String file \u003d getFileFromResource(path);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredInternship \u003d JsonUtil.getModulesFromJsonFile(file);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yan-soon": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public interface Storage extends GradPadStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    void saveGradPad(ReadOnlyGradPad gradPad) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 27,
      "yan-soon": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Manages storage of GradPad data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private GradPadStorage gradPadStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code GradPadStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public StorageManager(GradPadStorage gradPadStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assert(gradPadStorage !\u003d null \u0026\u0026 userPrefsStorage !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.gradPadStorage \u003d gradPadStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradPad methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gradPadStorage.getGradPadFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return readGradPad(gradPadStorage.getGradPadFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gradPadStorage.readGradPad(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        saveGradPad(gradPad, gradPadStorage.getGradPadFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gradPadStorage.saveGradPad(gradPad, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 62,
      "yan-soon": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IntroDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * A ui component for displaying the opening page of GradPad."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class IntroDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private static final String FXML \u003d \"IntroDisplay.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public IntroDisplay() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if the intro display is currently being shown."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return getRoot().isVisible();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Hides the intro display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Shows the intro display."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private IntroDisplay introDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        introDisplay \u003d new IntroDisplay();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        resultDisplay.hide();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(introDisplay.getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getGradPadFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            if (introDisplay.isShowing()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                introDisplay.hide();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                resultDisplay.show();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText.trim().replaceAll(\"\\\\s+\", \" \"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16,
      "-": 121,
      "yan-soon": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GradPad level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates a {@code ModuleCode} with the given {@code Module} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        code.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        title.setText(module.getModuleTitle().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        credits.setText(module.getModularCredits().value + \" MCs\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        module.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 4,
      "-": 54,
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates a {@code ModuleListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "yan-soon": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * A ui for displaying feedbacks to user commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Displays the specified feedback to the user via the result display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Hides the result display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Shows the result display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 19,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/gradpad.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/data/GEM/GEHsem1.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1002\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Economic Issues in the Developing World\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1004\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Chinese Heritage: Chinese History and Literature\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1009\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Framing Bollywood: Unpacking The Magic\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1013\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Pirates, Oceans and the Maritime World\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1014\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Samurai, Geisha, Yakuza as Self or Other\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1025\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Global Environmental Issues\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1032\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Modern Technology in Medicine and Healthcare\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\"],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1036\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Living with Mathematics\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1043\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Microbes Which Changed Human History\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1049\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Public Health In Action\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1061\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Representation and Media\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1062\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Ghosts and Spirits in Society and Culture\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1069\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Art in Asia: Through Media, Style, Space and Time\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1070\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Traditional Chinese Knowledge of Health and Well-being\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1073\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"THE ART OF CHINESE POETRY: PAST AND PRESENT\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1079\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Life, Disrupted: The Sharing Revolution\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 83
    }
  },
  {
    "path": "src/main/resources/data/GEM/GEHsem2.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1005\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Crime Fiction in English and Chinese\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1006\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Chinese Music, Language And Literature (In English)\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1049\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Public Health In Action\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1074\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Luck\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 23
    }
  },
  {
    "path": "src/main/resources/data/GEM/GEQ.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEQ\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEQ1000\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Asking Questions\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEQ\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEQ1917\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Understanding and Critiquing Sustainability\\n(offered exclusively for Year One RVRC residents)\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 13
    }
  },
  {
    "path": "src/main/resources/data/GEM/GER.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GER\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GER1000\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Quantitative Reasoning\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 8
    }
  },
  {
    "path": "src/main/resources/data/GEM/GESsem1.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1002\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Global Economic Dimensions of Singapore\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1003\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Changing Landscapes of Singapore\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1005\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Everyday Life of Chinese Singaporean: Past \u0026 Present\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1007\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"South Asia In Singapore\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1008\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Ethnicity and Nation-Building\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1011\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"The Evolution of a Global City-State\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1012\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Popular Culture in Singapore\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1021\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Natural Heritage Of Singapore\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1024\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Real Estate Development \u0026 Investment Law\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1026\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Urban Planning In Singapore\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1031\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Culture \u0026 Communication In Singapore\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1033\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Who Moved My OB Markers?\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1035\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Singapore: Imagining the Next 50 years\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 68
    }
  },
  {
    "path": "src/main/resources/data/GEM/GESsem2.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1005\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Everyday Life of Chinese Singaporean: Past \u0026 Present\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 8
    }
  },
  {
    "path": "src/main/resources/data/GEM/GETsem1.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1002\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Bridging East And West: Exploring Chinese Communication\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1020\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Darwin and evolution\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1023\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Thinking Like An Economist\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1031\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Computational Thinking\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1034\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Communication and Critical Thinking for Community Leadership\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1035\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Critical Perspectives In Advertising\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1037\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Big Picture History\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1043\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Universe, Big Bang, and Unsolved Mysteries\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1048\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Science: From Thinking to Narratives\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 48
    }
  },
  {
    "path": "src/main/resources/data/GEM/GETsem2.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1046\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"I do not think therefore I am\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1048\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Science: From Thinking to Narratives\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 13
    }
  },
  {
    "path": "src/main/resources/data/ITProfessionalism.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS1103\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Ethics in Computing\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ES2660\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Communicating in the Information Age\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/resources/data/foundationmodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2030S\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2040S\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computer Organisation\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Introduction to Operating Systems\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 8,
      "yan-soon": 35
    }
  },
  {
    "path": "src/main/resources/data/industrialexperience.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3880\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Advanced Technology Attachment Programme\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3200\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Internship\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3202\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Internship II\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3107\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computing for Voluntary Welfare Organisations\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3110\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computing for Voluntary Welfare Organisations II\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS4010\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Industry Internship Programme\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"TR3202\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Startup Internship Programme\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP4101\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"BComp Dissertation\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 8,
      "yan-soon": 35
    }
  },
  {
    "path": "src/main/resources/data/mathmodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1521\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Calculus for Computing\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1101R\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Linear Algebra I\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ST2334\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Probability and Statistics\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/resources/data/modules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3107\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3107\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computing for Voluntary Welfare Organisations\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"6\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This is a project-based module that provides students with\\ntraining in software engineering by working on an actual\\nsoftware system that supports a local voluntary welfare\\norganisation. This module is graded on a Completed\\nSatisfactorily/Completed Unsatisfactorily (CS/CU) basis.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2010 or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and CS2040/C). Student selection process will be enforced.\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"LSM1306\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"LSM1306\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Forensic Science\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Crime is one feature of human behaviour that fascinates our community. How crimes impact our society and how crimes are investigated and solved in the Singapore context is the focus of the module. The module is designed to enable students to appreciate why and how crimes are committed, to understand how crimes are solved in Singapore using investigative, and the latest scientific and forensic techniques, and to learn the role of the major stakeholders in the Criminal Justice System. Experts from law, pharmacy, statistics, the Health Sciences Authority and the Singapore Police Force will cover topics related to forensic science.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"GEK1542\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3106\" : {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3106\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Independent Project\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"[(CS2102 or CS2102S) and CS2105 and read (CS3214 or CS3215)] or IS3102 or IS4102 or CS3201 or CS3281 or CS4201 or CS4203\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"LSM1301\" : {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"LSM1301\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"General Biology\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This is an introductory module that explores what a living thing is, the basics of life, and the science behind it. The course will introduce the chemistry of life and the unit of life. The question of how traits are inherited will be discussed and the field of biotechnology, including its applications and the ethical issues involved be will introduced. The diversity of life on earth will be explored, with discussions how life on earth possibly came about and how biologists try to classify and make sense of the diversity. The course will also introduce the concept of life functions from cells to tissues and from organs to systems. The concept of how organisms maintain their internal constancy and organisation of major organ systems will be discussed. The focus will be to introduce the unifying concepts in biology and how they play a role in everyday life.\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"GCE `A’ Level or H2 Biology or equivalent, or LSM1301X\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2106\" : {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2106\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Operating Systems\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CG2271 or EE4214. CEG students are not allowed to take this module.\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2100 or EE2007 or EE2024 or EE2028\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2105\" : {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2105\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Computer Networks\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"IT2001, EE3204/E, EE4204/E, EE4210/E. CEG, CPE and EEE students are not allowed to take this module.\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalents)\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2108\" : {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2108\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Media Computing\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3246\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2107\" : {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2107\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Information Security\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module serves as an introductory module on information security. It illustrates the fundamentals of how systems fail due to malicious activities and how they can be protected. The module also places emphasis on the practices of secure programming and implementation. Topics covered include classical/historical ciphers, introduction to modern ciphers and cryptosystems, ethical, legal and organisational aspects, classic examples of direct attacks on computer systems such as input validation vulnerability, examples of other forms of attack such as social engineering/phishing attacks, and the practice of secure programming.\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalence\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3245R\" : {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3245R\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Information Retrieval\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5218\" : {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5218\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Principles and Practice of Program Analysis\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Program analysis denotes automated processes for predicting, estimating or proving properties of program behavior, whether functional or non-functional.  Example uses are compiler optimization, bug detection, performance evaluation, detection of security vulnerabilities, amongst many others.  This module first provides the rigorous mathematical foundations. This step is necessary in order to understand the common elements within the broad area of software analysis.  Secondly, through the use of a state-of-the-art program analysis system, this module provides hands-on instruction on programming real-life analyses.  In the end, the graduating student will be able to address a broad spectrum of program analysis in a practical way.\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4212 Compiler Design or CS4215 Programming Language Implementation\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5339\" : {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5339\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Theory and Algorithms for Machine Learning\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module aims to provide a broad theoretical understanding of machine learning and how the theory guides the development of algorithms and applications. Topics covered include the approximation capabilities of common function classes used for machine learning, such as decision trees, neural networks, and support vector machines, the sample complexity of learning different function classes and methods of reducing the estimation error such as regularization and model selection, and computational methods used for learning such as convex optimization, greedy methods, and stochastic gradient\\ndescent.\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"preclusion\" : \"MA4270\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2102\" : {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2102\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Systems\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2102S, IT2002\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or (CS2040 or its equivalent)) \\nand (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4248\" : {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4248\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Natural Language Processing\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module deals with computer processing of human languages, emphasizing a corpus-based empirical approach. The topics covered include: 1. Linguistic essentials. 2. Basic techniques and algorithms: Hidden Markov model, Viterbi algorithm, supervised learning algorithms. 3. Words: part-of-speech tagging. 4. Syntax: noun phrase chunking, named entity tagging, parsing (top down, bottom up, probabilistic). 5. Semantics: word sense disambiguation. 6. Pragmatics: discourse, co-reference resolution. 7. Applications: text categorisation, text summarisation, language identification, information extraction, question answering, machine translation.\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS3243 or CS3245) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2101\" : {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2101\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4249\" : {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4249\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Phenomena and Theories of Human-Computer Interaction\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module teaches the underlying science of Human-Computer Interaction (HCI) and its application to user interface design. It surveys a wide range of  psychological theories beginning with organizational behaviour approaches, understanding of work and workflow within organizations, and moving on to understanding human psychological architecture and processing constraints. It demonstrates via a combination of scientific theory understanding and engineering modelling the solutions of design problems facing a user interface designer. It also covers new design methods and techniques available and the new conceptual mechanisms used in HCI such as the metaphors for describing user interaction.\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3240 or NM2213 or NM2216\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2104\" : {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2104\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Language Concepts\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4246\" : {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4246\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"AI Planning and Decision Making\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action\\nconsequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and non-deterministic planning,\\npractical planning and acting under resource constraints and uncertainy, expected utility and rational decision making, decision networks, Markov decision processes,\\nelementary game theory, and multi-agent planning and decision making.\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5446\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2103\" : {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2103\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103T, CS2113, CS2113T\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4247\" : {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4247\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Graphics Rendering Techniques\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides a general treatment of real-time and offline rendering techniques in 3D computer graphics. Specific topics include the raster graphics pipeline, viewing and transformation, real-time mapping techniques, real-time shadow algorithms, local reflection models, global illumination, distributed ray tracing, photon mapping, radiosity, volume rendering, image-based rendering and modelling, and strategies for anti-aliasing and photo-realism.\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3241\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4244\" : {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4244\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Knowledge Representation and Reasoning\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course will focus on core issues of representation and reasoning of the knowledge in the context of design of intelligent machines. We will focus on how logic can be used to formalise and perform deduction from existing knowledge. We will then discuss compilation techniques. Finally, we will discuss limitations of monotonic logic and discuss challenges for non-monotonic reasoning.\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2100\" : {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2100\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Organisation\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1104 or Students from Department of ECE\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4242\" : {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4242\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Social Media Computing\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The emergence of WWW, smart mobile devices and social networks has revolutionised the way we communicate, create, disseminate, and consume information. This has ushered in a new era of communications that involves complex information exchanges and user relationships. This module aims to provide students with a good understanding of the social network phenomena and computational skills for analysing the complex social relation networks between users, the contents they shared, and the ways contents and events are perceived and propagated through the social networks. The analysis will provide better understanding of the concerns and interests of users, and uncover live and emerging events that will affect the community.\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2108 Introduction to Media Computing and CS3245 Information Retrieval.\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5332\" : {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5332\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Biometric Authentication\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Biometrics (such as fingerprint, iris images) are commonly used for authentication. This module covers authentication methods, different types of biometrics, pattern recognition, performance measurement, spoofing attacks, as well as issues such as privacy, user acceptance, and standards compliance. Students will gain a solid understanding of the fundamentals of the technology underlying biometric authentication, and the key issues to be addressed for successful deployment. Both the theoretical and practical\\naspects of biometrics authentication will be discussed.\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2040 or its equivalent) and (MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010\" : {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2220\" : {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2220\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Computational Biology\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course aims to develop flexible and logical problem solving skills, understanding of main bioinformatics problems, and appreciation of main techniques and approaches to bioinformatics. Through case studies and hands-on exercises, the student will (i) master the basic tools and approaches for analysis of DNA sequences, protein sequences, gene expression profiles, etc. (ii) understand important problems and applications of computational biology, including identifying functional features in DNA and protein sequences, predicting protein function, and deriving diagnostic models from gene expression profiles, (iii) be confident to propose new solutions to both existing and emerging problems in computational biology.\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or  (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4243\" : {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4243\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Vision and Pattern Recognition\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is for undergraduates who are interested in computer vision and its applications.  It covers (a) the basic skills needed in handling images and videos, (b) the basic theories needed to understand geometrical computer vision, and (c) pattern recognition.  Topics covered in image handling include: contrast stretch, histogram equalization, noise removal, and color space.  Topics covered in geometrical vision include:  affine transform, vanishing points, camera projection models, homography, camera calibration, rotation representations including quaternions, epipolar geometry, binocular stereo, structure from motion.  Topics covered for pattern recognition include principal component analysis.\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EE4212 Computer Vision\\nEE4704 (Image Processing and Analysis)\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or (((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))) and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or MA2216 or ST1131/A or ST1232 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5331\" : {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5331\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Web Security\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to prepare graduate students for understanding the security of the latest web platform and its interplay with operating systems and the cloud infrastructure. The topics covered include the design of web browsers and web \\napplications, vulnerabilities in web applications and web browsers, design of web scanners, authentication in web-based platforms, security policies and enforcement mechanisms. This module also covers security topics on the interface between the \\nweb platform and the backend systems, such as the underlying database systems and cloud infrastructure.\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4240\" : {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4240\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Interaction Design for Virtual and Augmented Reality\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to expose students to the human-centered principles of designing and building virtual reality (VR) and augmented reality (AR) applications. Students will learn about the fundamentals of VR and AR, human perceptions of reality, and the design patterns and guidelines for user interactions within VR/AR applications. Students will gain hands on experience building VR/AR applications applying these interaction principles.\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3240 and (MA1301 or A-level / H2 Mathematics)\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5330\" : {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5330\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Randomized Algorithms\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module will cover basic concepts in the design and analysis of randomized algorithms. It will cover both basic techniques, such as Chernoff bounds, random walks, and the probabilistic method, and a variety of practical algorithmic applications, such as load balancing, hash functions, and graph/network algorithms. The focus will be on utilizing randomization to develop algorithms that are more efficient and/or simpler than their deterministic counterparts.\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2103T\" : {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"ST2334\" : {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"ST2334\","
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Probability and Statistics\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Basic concepts of probability, conditional probability, independence, random variables, joint and marginal distributions, mean and variance, some common probability distributions, sampling distributions, estimation and hypothesis testing based on a normal population.  This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites. Preclude ME students taking or have taken ME4273.\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"ST1131, ST1131A, ST1232, ST2131, MA2216, CE2407, EC2231, EC2303, PR2103, DSC2008. ME students taking or having taken ME4273. All ISE students.\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"MA1102R or MA1312 or MA1505 or MA1507 or MA1521\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1231S\" : {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1231S\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalization proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"MA1100 and CS1231 or its equivalent\","
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4239\" : {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4239\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Security\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5439\","
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security and (CS2103 or its equivalent)\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4238\" : {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4238\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Security Practice\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This is a practice security module with emphasis on hands-on experiences of computer security. The objective of this module is to connect computer security knowledge to practical skills, including common attacks and protection mechanisms, system administration, and development of secured software. Topics covered include network security, operating system security, and application security, such as DNS attacks, memory-error exploits, and web application attacks. Students will learn through lab-based exercises and assignments.\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5446\" : {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5446\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"AI Planning and Decision Making\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action consequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and nondeterministic planning, practical planning and acting under resource constraints and uncertainty, expected utility and rational decision making, decision networks, Markov decision processes, elementary game theory, and multiagent planning and decision making.\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4246\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4236\" : {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4236\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Cryptography Theory and Practice\","
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to introduce the foundation, principles and concepts behind cryptology and the design of secure communication systems. The emphasis is on the formulation and techniques of various cryptographic primitives, and on the secure usage of such primitives to achieve the goals of confidentially, integrity, and authenticity in both theoretical settings and practical scenarios. Basic topics include pseudorandom functions, symmetric key encryption, public key encryption, message\\nauthentication codes, hash functions, digital signatures, key exchange and PKI. Selected topics may include: secret sharing, TCP/IP security, Kerberos, SSL, trusted computing, side-channel attacks.\","
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent)) and CS2107\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4234\" : {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4234\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Optimisation Algorithms\","
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers common algorithmic techniques for solving optimisation problems, and introduces students to approaches for finding good-enough solutions to NP-hard problems. Topics covered include linear and integer programming, network flow algorithms, local search heuristics, approximation algorithms, and randomized algorithms. Through analysis and application of the techniques to a variety of canonical problems, students develop confidence to (i) appropriately model a given optimisation problem, (ii) apply appropriate algorithmic techniques to solve the problem, (iii) analyse the properties of the problem and candidate algorithms, such as time and space complexity, convergence, approximability, and optimality bound.\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and \\n(MA1101R or MA1311 or MA1508E or MA1513)\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5322\" : {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5322\","
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Security\","
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Database security has a great impact on the design of today\u0027s information systems. This course will provide an overview of database security concepts and techniques and discuss new directions of database security in the context of Internet information management. Topics covered include: Access control models for DBMSs, Inference controls, XML database security, Encrypted databases, Digital credentials and PKIs, Trust in open systems, and Peer-to-peer system security.\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223 Database Systems Implementation\""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4231\" : {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4231\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Parallel and Distributed Algorithms\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course will examine some fundamental issues in parallel programming and distributed computing, and the relationships between the two.  Parallel programming: mutual exclusion, semaphores, consistency, wait-free synchronization.  Distributed computing: time, global state, snapshots, message ordering.  Relationships: consensus, fault-tolerance, transactions, self-stabilization.\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 Design and Analysis of Algorithms or CS3210 Parallel Computing\""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP5010\" : {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP5010\","
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Graduate Research Paper\","
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"0\","
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The graduate research paper presentation is for evaluating the ability of the student to undertake a critical review of an existing research area.  The student is expected to have necessary background and show competence in embarking on the PhD research.  Students are expected to identify a promising research area.  The paper should be self-contained and provide a good overview of the research problems, initial exploration of the research area, and insight to the research problems, with preliminary study and proposals on the outstanding research issues.  It should contain more findings than a survery paper.\","
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4232\" : {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4232\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Theory of Computation\","
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide students with a theoretical understanding of what can be computed, and an introduction to the theory of complexity. It aims to introduce (1) some standard formal models of computation so as to develop an understanding of what can or cannot be computed by various computing devices; (2) some reasoning techniques commonly used in computer science; these include model equivalence, non-determinism, digitalisation, simulation and reduction; and (3) the mathematical formulation of objects in computer science so as to study their properties.\","
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1231 or CS1231S or any level-2 MA module\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4350\" : {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4350\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Game Development Project\","
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this project-based module is to provide an opportunity for the students to work in a group to design and develop a game following the main stages of game development process. The module will focus on the design of core dynamic, game mechanics, strategy, progression, balancing, game levels, interface and technical features including 3D graphics, animation, AI, physics, and networking. In addition, software engineering principles will be practised in developing the game software.\","
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3247 or NM3216\""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  \"CSA6770\" : {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"moduleCode\" : \"CSA6770\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"title\" : \"Graduate Research Seminar\","
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"description\" : \"This is a required module for all PhD candidates in Cultural Studies in Asia programme.  It is a forum for candidates to engage each other in critical discussion of their dissertation and other research projects.  Each candidate is required to present a formal research paper.  Active participation from each is expected.  The module will be graded Satisfactory/Unsatisfactory\u0027 on the basis of a candidate\u0027s presentation and participation in discussions throughout the semester.\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  },"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CM1131\" : {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CM1131\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Physical Chemistry 1\","
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Equations of state of ideal and real gases, intermolecular forces; kinetic theory of gases; first law of thermodynamics; enthalpy; thermochemistry; the second law; entropy; Helmholtz and Gibbs functions; the third law; rates of chemical reactions; accounting for the rate laws - reaction mechanisms; effect of temperature on reaction rate; theories of reaction rates.\","
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"\u0027A\u0027 level or H2 pass in Chemistry or equivalent\""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3209\" : {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3209\","
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Undergraduate Research Project in Computing\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"8\","
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This year-long module provides an opportunity for students to undertake a substantial research project under the supervision of faculty members of the School of Computing. Through this research collaboration, the student will experience first-hand the challenges and exhilaration of research, discovery and invention.\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Completed 60MCs\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3208\" : {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3208\","
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Undergraduate Research in Computing I\","
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module (together with CP3209) is part of the UROP (Computing) project. The objective of this module and the UROP (Computing) project in general, is to provide an opportunity for talented students to undertake a substantial research project under the supervision of faculty members of the School of Computing. Through this research collaboration, the student will get to experience at first hand the challenges and exhilaration of research, discovery and invention. This module should be followed by CS3209 to complete the UROP (Computing) project.\","
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3208\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"SoC students who have passed at least 60 MCs and with approval from respective department.\""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5439\" : {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5439\","
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Security\","
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4239\","
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 and (CS2103 or its equivalent)\""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"TR3202S\" : {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"TR3202S\","
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Start-up Internship Programme\","
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module documents the learning experience from the internship in writing. Taken together with TR3201 Entrepreneurship Practicum, the student will prepare a weekly logbook as well as internship reports which will be used a part of the evaluation of their internship experience.\","
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"TR3102\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"TR3202T\" : {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"TR3202T\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Start-up Internship Programme\","
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module documents the learning experience from the internship in writing. Taken together with TR3201 Entrepreneurship Practicum, the student will prepare a weekly logbook as well as internship reports which will be used a part of the evaluation of their internship experience.\","
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"TR3102\","
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4226\" : {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4226\","
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Internet Architecture\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to focus on advanced networking concepts pertaining to the modern Internet architecture and applications. It covers a range of topics including network performance (throughput, delay, Little’s Law and M/M/1 queuing formula), and resource allocation and buffer management (max-min fair, round-robin and RED), intra- and inter-domain routing (RIP, OSPF and BGP), congestion control and modern variations of TCP (AIMD and Cubic TCP), peer-to-peer applications and content delivery networks (BitTorrent, Skype, Akamai), and data center networking and management (SDN and OpenFlow).\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204 or EE4204) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4347\" : {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4347\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Sound and Music Computing\","
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental technologies employed in Sound and Music Computing focusing on three major categories: speech, music, and environmental sound. This module introduces the concept of sound and its representations in the analog and digital domains, as well as in time and frequency domains. Moreover, this module provides hands-on instruction on relevant machine learning tools, and an in-depth review of related technologies in sound data analytics (Automatic Speech Recognition, Automatic Music Transcription and Sound Event Detection) leading to a group project. Topics in sound synthesis, automatic music generation and music information retrieval will be covered for breadth.\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2108 and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)\""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4224\" : {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4224\","
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Distributed Databases\","
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).\","
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5424\","
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1101S\" : {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1101S\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the concepts of programming and computational problem solving, and is the first and foremost introductory module to computing. Starting from a small core of fundamental abstractions, the module introduces programming as a method for communicating computational processes. The module begins with purely functional programming based on a simple substitution-based execution model, and ends with a powerful modern imperative language based on a realistic environment-based execution model. Topics covered include: functional abstraction, recursion, higher-order functions, data abstraction, algorithmic strategies, state mutation, loops and arrays, evaluation strategies, sorting and searching, debugging and testing.\","
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010 or its equivalents\","
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4225\" : {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4225\","
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Big Data Systems for Data Science\","
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science utilizes advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"BT4221 and CS5425\","
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2102 or IT2002\""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4222\" : {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4222\","
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Wireless Networking\","
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.\","
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5422\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204/E or EE4204) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4223\" : {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4223\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Multi-core Architectures\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The world of parallel computer architecture has gone through a significant transformation in the recent years from high-end supercomputers used only for scientific applications to the multi-cores (multiple processing cores on a single chip) that are ubiquitous in mainstream computing systems including desktops, servers, and embedded systems. In the context of this exciting development, the aim of this module is to examine the design issues that are critical to modern parallel architectures. Topics include instruction-level parallelism through static and dynamic scheduling, shared memory, message-passing, and data parallel computer architectures, cache coherence protocols, hardware synchronization primitives, and memory consistency models.\","
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2106 Operating Systems or CG2271 Realtime Operating Systems) and (CS3210 Parallel Computing or CS3220 Computer Architecture or CG3207 Computer Architecture).\""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"TR3202N\" : {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"TR3202N\","
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Start-up Internship Programme\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module documents the learning experience from the internship in writing. Taken together with TR3201 Entrepreneurship Practicum, the student will prepare a weekly logbook as well as internship reports which will be used a part of the evaluation of their internship experience.\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"TR3102\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1231\" : {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1231\","
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications.  (2) Relations and Functions: Equivalence relations and partitions.  Partially ordered sets.  Well-Ordering Principle. Function equality.  Boolean/identity/inverse functions.  Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle.  Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset.  Subsets of countable sets are countable.\","
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"MA1100, CS1231S\","
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X\""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4220\" : {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4220\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Knowledge Discovery Methods in Bioinformatics\","
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The advent of high throughput technologies (e.g., DNA chips, microarray), biologists are being overloaded with information (e.g., gene expression data). A systematic way is needed to analyze the data to make sense of them. This module is introduced to provide students with knowledge of techniques that can be used to analyse biological data to enable them to discover new knowledge. At the end of the module, students will be able to identify the relevant techniques for different biological data to uncover new information. Topics include: Clustering analysis, classification, association rule mining; support vector machines; Hidden Markov Models.\","
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2220 or LSM2241\""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2040S\" : {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2040S\","
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the design and\\nimplementation of fundamental data structures and\\nalgorithms. The module covers basic data structures\\n(linked lists, stacks, queues, hash tables, binary heaps,\\ntrees, and graphs), searching and sorting algorithms, and\\nbasic analysis of algorithms.\","
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040C\","
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1100 or (CS1231 or its equivalent)) and (CS1010 or its equivalent)\""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4221\" : {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4221\","
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Applications Design and Tuning\","
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module addresses the design and performance tuning of\\ndatabase applications. The syllabus focusses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entityrelationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of non-relational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).\","
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5421\","
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6244\" : {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6244\","
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Robotics\","
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module presents the advances in robotics research over a broad range of topics such as robot perception, learning, decision making and control, and human-robot interaction. The exact topics of focus may differ in each offering.  Through this module, students will get familiar with recent research trends and developments in robotics and prepare for research in robotics and related fields.\","
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and \\n(MA1101R or MA1311 or MA1506 or MA1508E) and\\n(ST2131 or ST2334)\""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"TR3202I\" : {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"TR3202I\","
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Start-up Internship ProgrammeStart-up Internship Programme\","
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module documents the learning experience from the internship in writing. Taken together with TR3201 Entrepreneurship Practicum, the student will prepare a weekly logbook as well as internship reports which will be used a part of the evaluation of their internship experience.\","
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"TR3102\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2040\" : {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2040\","
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.\","
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040C, CS2040S\","
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6240\" : {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6240\","
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Multimedia Analysis\","
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide a comprehensive and rigorous treatment of the main approaches in multimedia (document, image, video, graphics) analysis. Three main themes are covered: (1) representation and modelling of multimedia entities using various modelling approaches, (2) matching of a model with an input entity, and (3) derivation of a model from sample entities. It focuses on the non-vector-space approach, which complements the vector-space approach to multimedia analysis.\","
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4243 or CS5240\""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP5103\" : {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP5103\","
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Master of Computing Project\","
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"8\","
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The project option provides individual students the\\nopportunity and experience to work on a significant\\ncomputing project. It aims to prepare students with\\nsufficient practical and/or research experiences in the\\ncomputing field. The project will be carried out under the\\nsupervision of an academic staff. The selection of the\\ntopic will be done in consultation with the supervisor. All\\nprojects will be vetted by the School. The project will be\\nassessed through a written project report and will be\\nletter-graded.\","
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CP5101 (MComp Dissertation), CP5102 (MComp\\nInformation Security Project) or any project/ dissertation\\nmodule.\","
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Students must be in Master of Computing programme.\""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1143\" : {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1143\","
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Electricity \u0026 Magnetism\","
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the fundamentals of electricity and magnetism: electric fields, electric flux and Gauss\u0027s law, electric potential; capacitance, dielectrics, current and resistance; DC circuits; magnetic fields, magnetic effect of currents, Ampere\u0027s law, electromagnetic induction; AC circuits; magnetism in matter; electromagnetic waves. The module also has a practical component consisting of five experiments designed to enhance students\u0027 understanding of some of the concepts discussed in lectures. This module is targeted at science students who wish to acquire a working knowledge in electricity and magnetism, and is an essential for physics majors.\","
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Students who have passed PC1432/PC1432X are not allowed to take this module.\","
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"‘A\u0027 level or H2 pass in Physics or PC1221/PC1221FC/PC1221X \u0026 PC1222/PC1222X\""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP5104\" : {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP5104\","
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Graduate Project in Computing\","
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this project module is to allow graduate students an opportunity to undertake a substantial project work over a semester. Students may work individually on projects proposed by staff, possibly in collaboration with\\nexternal companies. The students will have good opportunity to apply what they have learnt to some technical challenges or practical problems, be it researchoriented or software-development. The project will be assessed through a written project report and will be letter-graded.\","
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CP5101\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Student must be enrolled in a postgraduate programme.\""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1144\" : {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1144\","
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Modern Physics\","
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the ideas of modern physics to students, with an emphasis on conceptual understanding. Topics covered are a) Einstein\u0027s theory of special relativity, including time dilation, length contraction, and his famous equation E\u003dmc2, b) Quantum physics, where the observed phenomena of black body radiation, the photoelectric effect and Compton scattering, leading to the quantization of angular momentum and energy, atomic transitions and atomic spectra, c) Introduction to quantum mechanics, introducing the Heisenberg uncertainty principle, wave-mechanics and wave particle duality, and the use of wavefunctions in predicting the behaviour of particles trapped in potential wells, d) Nuclear physics, introducing radioactivity and decay processes, nuclear interaction and binding energy, fission and fusion, and e) Sub-atomic elementary particles and their classification. The module is targeted at science students who are interested in learning about the more recent developments in physics, and is an essential for physics majors.\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Students who have passed PC1432/PC1432X are not allowed to take this module.\","
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"‘A\u0027 level or H2 pass in Physics or PC1221/PC1221FC/PC1221X \u0026 PC1222/PC1222X\""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1141\" : {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1141\","
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Classical Mechanics\","
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module presents the fundamental principles of classical mechanics. It covers such topics as kinematics, Galilean transformation, Newton\u0027s laws of motion, dynamics of a particle with generalization to many particle systems, conservation laws, collisions, angular momentum and torque, motion of a rigid body, gravitation and planetary motion, static equilibrium, oscillatory motion and vibrational modes, waves, Doppler\u0027s effect and fluid mechanics. The module also has a practical component consisting of five experiments designed to enhance students\u0027 understanding of some of the concepts discussed in lectures. This module is targeted at science students who wish to acquire a working knowledge of mechanics, and is an essential for physics majors.\","
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"STUDENTS WHO HAVE PASSED PC1431 OR PC1431FC or PC1431X OR PC1433 ARE NOT ALLOWED TO TAKE THIS MODULE.\","
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"‘A\u0027 level or H2 pass in Physics or PC1221/PC1221FC/PC1221X \u0026 PC1222/PC1222X\""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CM1417\" : {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CM1417\","
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Fundamentals of Chemistry\","
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide an introduction to the fundamental topics and concepts of chemistry. This includes topics like structure of matter, periodicity and the periodic table, chemical Bonding, states of matter, stoichiometry and equilibrium, reaction types, kinetics, organic chemistry, including such topics as functional groups and isomerism.\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"A level or H2 Chemistry or equivalent or CM1417X\","
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"\u0027O\u0027 Level pass in Chemistry or equivalent\""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1142\" : {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1142\","
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Thermodynamics and Optics\","
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the fundamentals of two branches of physics: thermodynamics and optics. Its aim is to prepare students for a host of more advanced modules in these and related areas. Topics included in the part on thermodynamics are thermal processes and effects, the first and second laws, kinetic theory of gases, heat engines and entropy. The part on optics encompasses topics such as geometric optics, systems of lenses, optical instruments, interference, diffraction, grating and polarization. The module also has a practical component consisting of five experiments designed to enhance students\u0027 understanding of some of the concepts discussed in lectures. This module is targeted at science students who wish to acquire a working knowledge of thermodynamics and optics, and is an essential for physics majors.\","
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"STUDENTS WHO HAVE PASSED PC1431 OR PC1431FC or PC1431X ARE NOT ALLOWED TO TAKE THIS MODULE.\","
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"‘A\u0027 level or H2 pass in Physics or PC1221/PC1221FC/PC1221X \u0026 PC1222/PC1222X\""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3201\" : {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3201\","
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Industry Seminar\","
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"2\","
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The information technology (IT) industry is in an everchanging state of evolvement and innovation. This module aims to acquaint students with the latest Information\\nTechnology (IT) innovation, practices, and developments. Prominent leaders and practitioners in the IT industry will be invited to impart their knowledge and insights into the latest IT trends and developments from various industry arenas such as the finance, healthcare, consulting, manufacturing, and entertainment industries. Students\u0027 performance will be graded as \\\"Completed Satisfactory/Completed Unsatisfactory (CS/CU)\\\" at the end of the module based on the coursework.\","
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Students can only take this module after completing 70 MCs\""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP5101\" : {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP5101\","
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"MComp Dissertation\","
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"16\","
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The dissertation option gives individual students the opportunity for independent study and research in the area of their selected specialization. This will be carried out under the supervision of an academic staff, and the selection of the topic/area will be done in consultation with the supervisor in the area of expertise.\","
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"- CP5102 (MComp Information Security Project - 8MC)\\n- CP5103 (Master of Computing Project – 8MC)\\n- CP5104 (Graduate Project in Computing – 4MC)\","
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP5102\" : {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP5102\","
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"MComp Information Security Project\","
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"8\","
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The exploratory project option gives individual students the opportunity for independent study and research in the area of their selected specialization. This will be carried out under the supervision of an academic staff, in possible cosupervision with a mentor from the industry or government agency. The selection of the topic/area will be done in consultation with the supervisor and the external mentor. All projects will be vetted by School of Computing Postgraduate Office.\","
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Students must be in Master of Computing programme, Infocomm Security specialisation\""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CM1121\" : {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CM1121\","
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Organic Chemistry 1\","
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the characteristic properties, methods of preparation, and reactions of alkanes/cycloalkanes, alkenes, alkynes, benzene and other aromatic compounds, alkyl halides; alcohols; ethers; epoxides, phenols, aldehydes and ketones; carboxylic acids and their derivatives; amines.\","
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CM1501 or CM1503 or CM1401\","
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"\u0027A\u0027 level or H2 pass in Chemistry or equivalent or CM1417/CM1417X\""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2040C\" : {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2040C\","
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, basic analysis of algorithms, and basic object-oriented programming concepts.\","
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040S\","
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3108A\" : {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3108A\","
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Independent Work\","
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"2\","
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3108A\","
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3108B\" : {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3108B\","
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Independent Work\","
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3108B\","
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4218\" : {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4218\","
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Testing\","
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the concepts and practice of software testing including unit testing, integration testing, and regression testing. Various testing coverage criteria will be discussed. Debugging methods for finding the root-cause of errors in failing test cases will also be investigated. The use of testing and analysis for performance prediction, performance clustering and performance debugging will be studied. Students will acquire crucial skills on testing and debugging through hands-on assignments.\","
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3219 Software Engineering Principles and Patterns.\""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3247\" : {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3247\","
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Game Development\","
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to introduce techniques for electronic game design and programming. This module covers a range of important topics including 3D maths, game physics, game AI, sound, as well as user interface for computer games. Furthermore, it will give an overview of computer game design to the students. Through laboratory programming exercises, the students will have hands-on programming experience with popular game engines and will develop basic games using those engines.\","
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3241\""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4215\" : {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4215\","
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Language Implementation\","
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides the students with theoretical knowledge and practical skill in the implementation of programming languages. It discusses implementation aspects of fundamental programming paradigms (imperative, functional and object-oriented), and of basic programming language concepts such as binding, scope, parameter-passing mechanisms and types. It introduces the language processing techniques of interpretation and compilation and virtual machines. The lectures are accompanied by lab sessions which will focus on language processing tools, and take the student through a sequence of programming language implementations. This modules\\nalso covers automatic memory management, dynamic linking and just-in-time compilation, as features of modern execution systems.\","
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and ((CS2040 or its equivalent)))\""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5425\" : {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5425\","
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Big Data Systems for Data Science\","
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science needs advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.\","
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"BT4221 and CS4225\","
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2102\""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3245\" : {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3245\","
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Information Retrieval\","
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module discusses the basic concepts and methods of information retrieval including capturing, representing, storing, organizing, and retrieving unstructured or loosely structured information. The most well-known aspect of information retrieval is document retrieval: the process of indexing and retrieving text documents. However, the field of information retrieval includes almost any type of\\nunstructured or semi-structured data, including newswire stories, transcribed speech, email, blogs, images, or video. Therefore, information retrieval is a critical aspect of Web search engines. This module also serves as the foundation for subsequent modules on the understanding, processing and retrieval of particular web media.\","
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5424\" : {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5424\","
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Distributed Databases\","
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).\","
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4224\","
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3243\" : {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3243\","
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Artificial Intelligence\","
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module introduces the basic concepts in search and knowledge representation as well as to a number of sub-areas of artificial intelligence. It focuses on covering the essential concepts in AI. The module covers Turing test, blind search, iterative deepening, production systems, heuristic search, A* algorithm, minimax and alpha-beta procedures, predicate and first-order logic, resolution refutation, non-monotonic reasoning, assumption-based truth maintenance systems, inheritance hierarchies, the frame problem, certainly factors, Bayes\u0027 rule, frames and semantic nets, planning, learning, natural language, vision, and expert systems and LISP.\","
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\","
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent))\\nand (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4211\" : {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4211\","
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Formal Methods for Software Engineering\","
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Before software can be designed, its requirements must be well understood. This in turns requires a thorough understanding of the application domain. Based on the requirements, software engineers construct design models, and then use these design models as guide to construct software implementations. This module will cover formal specification and verification techniques for accurately capturing and reasoning about requirements, model and code. The topics covered include modeling notations, temporal logics, model checking, software model checking, theorem proving, and symbolic execution based analysis. Most importantly, the module will attempt to inculcate an appreciation and understanding of formal thinking in software design and construction.\","
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent\""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5422\" : {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5422\","
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Wireless Networking\","
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.\","
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4222\","
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204/E or EE4204) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3244\" : {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3244\","
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Machine Learning\","
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces basic concepts and algorithms in machine learning and neural networks. The main reason for studying computational learning is to make better use of powerful computers to learn knowledge (or regularities) from the raw data. The ultimate objective is to build self-learning systems to relieve human from some of already-too-many programming tasks. At the end of the course, students are expected to be familiar with the theories and paradigms of computational learning, and capable of implementing basic learning systems.\","
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"preclusion\" : \"BT4240, DMX1401AI or its equivalents, IT3011\","
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or CS2020 or CS2040 or its equivalent) and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4212\" : {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4212\","
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Compiler Design\","
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to introduce the principal ideas behind program compilation, and discusses various techniques for program parsing, program analysis, program optimisation, and run-time organisation required for program execution. Topics covered include regular expressions, context-free grammars, lexical analysis, syntax analysis; different algorithms for parsing codes, such as top-down parsing, bottom-up parsing; translation to abstract syntax using modern parser generator technology, intermediate representation, semantics analysis, type system, un-optimised code generation, code optimisation, data-flow analysis, instruction scheduling.\","
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2104 Programming Language\""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5421\" : {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5421\","
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Applications Design and Tuning\","
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module addresses the design and performance tuning of database applications. The syllabus focuses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entity relationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of nonrelational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).\","
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4221\","
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6235\" : {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6235\","
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Theoretical Computer Science\","
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This graduate-level module covers advanced topics in the theoretical aspects of computer science that are of current research or application interests. Topics falling under this module include algorithms, theory of computation, formal models, and semantics. The exact topic may vary from year to year and depends on the instructor teaching the module. Upon completion of this module, the student will\\nhave a deeper understanding on some of the latest research problems in one of the areas of theoretical computer science. This module will help prepare students towards doing research in theoretical computer science.\","
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230\""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3241\" : {"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3241\","
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Graphics\","
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.\","
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\","
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and ((CS2040 or its equivalent)))\""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6234\" : {"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6234\","
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Algorithms\","
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is aimed at graduate students who are doing or intend to do advanced research in algorithms design and analysis in all areas of computer science. The module covers advanced material on combinatorial and graph algorithms with emphasis on efficient algorithms, and explores their use in a variety of application areas. Topics covered include, but are not restricted to, linear programming, graph matching and network flows, approximation algorithms, randomized algorithms, online algorithms, local search algorithms, algorithms for large datasets. The module will be a seminar-based module that will expose students to current research in these areas.\","
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5234\""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3242\" : {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3242\","
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"3D Modeling and Animation\","
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide fundamental concepts in 3D modeling and animation. It also serves as a bridge to advanced media modules. After taking this module, students should be able to use these concepts to easily build or work with digital models, manipulate the models by means of computer deformation and animation, and use lighting and rendering techniques to create appealing scenes. Topics include coordinate spaces, transforms, 3D model representations, hierarchical structures, deformation, procedural modelling, particle systems, character animation, shading networks, lighting, and scripting concepts.\","
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4342\","
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3241 and (PC1221 or PC1221X) and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)\""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3240\" : {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3240\","
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Interaction Design\","
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course is intended for students in computing and related disciplines whose work focuses on human-computer interaction issues in the design of computer systems. The course stresses the importance of user-centred design and usability in the development of computer applications and systems. Students will be taken through the analysis, design, development, and evaluation of human-computer interaction methods for computer systems. They will acquire hands-on design skills through laboratory exercises and assignments. The course also covers HCI design principles and emphasizes the importance of contextual, organisational, and social factors in system design.\","
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T or NM3209 or NM2207/Y\""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6231\" : {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6231\","
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Security and Privacy\","
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to prepare PhD students for research in security and privacy, by investigating security issues in various theoretical as well as system computer science areas such as software, networks, data analytics and machine learning, etc. It addresses security and privacy concepts and design principles from an adversarial perspective. Selected topics in security and privacy are covered, such as software security, applied cryptography, privacy-preserving data analysis, and design of secure distributed systems. Emerging topics of current research interests may be included as well.\","
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4236 Cryptography Theory and Practice or \\nCS3235 Computer Security or \\nCS5231 System Security.\""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2030\" : {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2030\","
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include\\nobjects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.\","
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2030S\","
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"IS1103\" : {"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"IS1103\","
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Ethics in Computing\","
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module gives an introduction to Ethics in the Computing domain. Students will learn about the importance of Ethics in Computing policy-making and be able to make judgements and decisions based on established ethical frameworks (such as Deontology, Consequentialism, Social Contract Theory and Virtue Ethics). The objective is to develop students to be ethical computing decision-makers who can analyse and explain their decisions in real-world policy-making situations. Issues in emerging areas such as Digital Intellectual Property Rights, Artificial Intelligence, Big Data, Social Media, Hacking, and interface design may also be discussed in relation to Ethics.\","
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5260\" : {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5260\","
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Neural Networks and Deep Learning II\","
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a follow-up to CS5242 and covers\\nadvanced topics in neural networks and deep learning.\\nThis module explores the underlying mechanism of a\\nvariety of different types of learning models: unsupervised,\\nsemi-supervised, and adversarial learning models, that\\nare not covered in CS5242. Topics may include:\\ngenerative adversarial networks, adversarial machine\\nlearning, zero-shot learning, geometric deep learning,\\nneural architecture search.\","
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5242 Neural Networks and Deep Learning\""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1432\" : {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1432\","
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Physics IIE\","
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces fundamental concepts of physics and is illustrated with many practical examples. Topics covered include a) Electricity and magnetism, where the basic concepts of electric and magnetic fields, forces on charged particles, electric potential, electromotive force, work and energy, are described. The properties of basic electrical circuits comprising resistors, inductors and capacitors are discussed, along with analysis of their transient and steady-state behaviour. Understanding the role of Maxwell\u0027s equations in electromagnetism is emphasized; b) Waves, introducing properties of waves, including geometric optics, propagation, interference and diffraction, and electromagnetic waves; and c) Quantum physics, where new physics concepts which led to the quantization of energy are introduced, leading to an explanation of atomic transitions, atomic spectra and the physical and the chemical properties of the atom. The uncertainty principle, wave-mechanics and wave particle duality concepts are covered, together with the use of wavefunctions in predicting the behaviour of trapped particles. The module is targeted essentially at Engineering students.\","
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Students majoring in Physics or students who have passed in PC1143 or PC1144 or PC1432X are not allowed to take this module.\","
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Students from FOE ( i.e. Computer Eng, Common Engineering, Bioengineering, Industrial \u0026 Systems Eng and Material Science \u0026 Eng) with ‘A’ level or H2 pass in Physics; or \u0027A\u0027 level or H2 pass in Physics; or PC1221/PC1221FC/PC1221X \u0026 PC1222/PC1222X\""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"LSM1106\" : {"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"LSM1106\","
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Molecular Cell Biology\","
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective is to provide the student with a firm and rigorous foundation in current concepts of the structure and functions of biomolecules in molecular cellular biology. These fundamental concepts form the basis of almost all recent advances in biological and the biomedical sciences. The lectures will introduce various cellular organelles as models to gain insights into how structures and functions of classes of biomolecules participating in important cellular processes.\","
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"LSM1101\","
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE ‘A’ Level or H2 Biology or equivalent, or LSM1301 or LSM1301X\""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"LSM1105\" : {"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"LSM1105\","
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Evolutionary Biology\","
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Evolutionary biology covers the history of life on our planet and the processes that produced the multiple life forms of Earth. Topics include: the origins of life, the eukaryotic cell, and multicellularity; the generation of genetic variation and the sorting of that variation through random processes and through natural and sexual selection; the origin of new traits, new life histories, and new species; the origins of sex, sociality, and altruism; the evolution of humans; and applications of evolutionary biology to solving modern-day problems.\","
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"YSC2216\","
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE \u0027A\u0027 Level or H2 Biology or equivalent, or LSM1301 or LSM1301X\""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010X\" : {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010X\","
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.\","
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010 or its equivalent, CS1010FC\","
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2309\" : {"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2309\","
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"CS Research Methodology\","
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2305S\","
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or ((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))\\nand \\n(MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"LSM1102\" : {"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"LSM1102\","
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Molecular Genetics\","
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers topics on (i) the patterns of inheritance, (ii) the molecular properties of genes and chromosomes, (iii) transcription and translation, (iv) genetic methods and technology, and (v) genetic analysis of individuals and populations. This will include an in-depth understanding of mendelian patterns of inheritance and variations that could occur due to multiple alleles, lethal genes, chromosomal variations, linkage, gene interaction and other genetic phenomena. Emphasis is placed on the understanding of the underlying molecular and biochemical basis of inheritance. Quantitative and population genetics will also be discussed with the emphasis of understanding the processes and forces in nature that promote genetic changes.\","
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"YSC2233\","
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE \u0027A\u0027 Level or H2 Biology or equivalent, or LSM1301 or LSM1301X\""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010R\" : {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010R\","
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CG1101, CS1010, CS1010E, CS1101, CS1101C, CZ1102, IT1002, Engineering students\","
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010S\" : {"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010S\","
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and \\nforemost introductory course to computing and is equivalent to CS1010 and CS1010E Programming Methodology. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoS students.\","
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010, CS1010E, CS1010J, CS1010X, CS1010XCP, CS1101S\","
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3236\" : {"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3236\","
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Information Theory\","
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the basics of modern information theory. It covers how information can be quantified, and what this quantification tells us about how well we can compress and transmit information without error. It discusses basic error correcting techniques, and information-theoretic cryptography. Topics covered\\ninclude: mathematical techniques, entropy measures, fundamental limits to data compression and noisy-channel coding, examples of error-correcting codes, examples of information theoretic cryptography (commitments, secure computation, key distribution, randomness extraction).\","
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1100 or (CS1231 or its equivalent)) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3237\" : {"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3237\","
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Internet of Things\","
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The Internet of Things (IoT), where a large number of physical objects embedded with computing power and sensors connect to the network for seamless cooperation between the cyber domain and the physical world, is revolutionizing our lives. This module will serve as an introduction to the IoT and provide a holistic view of the entire spectrum of the IoT system architecture from the devices to the fog and the cloud computing. The focus will be on designing IoT systems that balance both the functional and non-functional (communication bandwidth, security, safety, power) requirements. The module will have a significant project component.\","
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1010 or equivalent) and (CG2028 or CS2100 or EE2024 or EE2028)\""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3234\" : {"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3234\","
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Logic for Proofs and Programs\","
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces logic as a means for specifying and solving computational problems. It explores how logic can be used to represent computational problems, how these representations can be proven correct, and how they can be executed on a computer. Students learn about logic as formal systems (semantic, axiomatic, and deductive) and how to write proofs in the different systems. They also learn how to use a proof assistant such as Coq and how to program in a logic programming language such as Prolog.  Topics include classical and intuitionistic logic, SAT, Peano’s axioms, Hoare logic, and other selected logic systems.\","
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"MA1100 or (CS1231 or its equivalent); Programming experience is preferred.\""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3235\" : {"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3235\","
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Security\","
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide a broad understanding of computer security with some indepth discussions on selected topics in system and network security. This module covers the following topics: intrusion detection, DNS security, electronic mail security, authentication, access control, buffer overflow, memory and stack protection, selected topics in application security, for instance, web security, and well-known attacks.\","
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204 or EE4204) and (CS2106 or CG2271) and CS2107\""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3241R\" : {"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3241R\","
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Graphics\","
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.\","
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3233\" : {"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3233\","
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Competitive Programming\","
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.\","
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"At least grade A- in (CS2010 or CS2020 or (both CS2030 and CS2040)) or special permission\""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2030S\" : {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2030S\","
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.\","
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2030\","
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3230\" : {"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3230\","
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students\u0027 ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.\","
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\","
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP6010\" : {"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP6010\","
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Doctoral Seminar\","
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"0\","
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"A PhD candidate will be required to give a Doctoral Seminar within 12 months after passing his/her PhD Thesis Proposal.  The seminar, which should include any research findings or work from published papers.\","
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6101\" : {"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6101\","
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Exploration of Computer Science Research\","
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces CS graduate students to various research areas in Computer Science. Study groups are organised for major research areas. Each study group provides a forum for students to read, present and discuss\\nresearch papers, and acquire the basic research skills for literature review and critical comparison of existing work. Students will also gain a first experience in technical presentation and writing. This module will be graded as “Completed Satisfactory” or “Completed Unsatisfactory” (CS/CU).\","
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"DMC1401CS\" : {"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"DMC1401CS\","
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Design Your Own Module\","
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6220\" : {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6220\","
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Data Mining\","
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the rapid advances of computer and internet technologies, a large amount of data accumulates. Discovering knowledge from the data will give us a competitive advantage. The process of knowledge discovery involves pre-processing the data, mining or discovering patterns from the data, and post-processing the discovered patterns. In this course, we will review and examine the present techniques and the theories behind them and explore new and improved techniques for real world knowledge discovery applications. The course is designed to encourage active discussion, creative thinking, and hands-on project development.\","
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5228\""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5250\" : {"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5250\","
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Operating Systems\","
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module covers a broad range of issues in the design and implementation of modern advanced operating systems. The topics covered in this module includes OS design strategies (including microkernels, mobile, embedded and real-time operating systems and the component’s interfaces), priority and resource allocation strategies; scheduling algorithms (including for multi-core, multi-processors); naming, protection and security; UI and windowing systems; file system implementations (including network and distributed file systems); failure and recovery; and virtualization and the Internet-ready OS. They extend and provide in-depth coverage of material in earlier prerequisite OS modules.\","
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2106 Introduction to Operating Systems or CG2271\\nReal-Time Operating Systems\""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP2106\" : {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP2106\","
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Independent Software Development Project (Orbital)\","
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Orbital provides a platform for students to gain hands-on industrial experience for computing technologies related to students’ own interests. Done in pairs of two, Orbital students propose, design, execute, implement and market their project to peers and faculty. Peer assessment and critique of others’ projects are key components of the modules’ deliverables.\","
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103 Software Engineering or its equivalent\","
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 Programming Methodology or its equivalent\""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6219\" : {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6219\","
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Computer Systems\","
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This graduate-level module covers advanced topics in computer systems that are of current research or application interests. Topics include operating systems,\\nsystems architecture and hardware, distributed systems, computer networks, and the interaction between these areas. The exact topics to be taught will depend on the lecturers teaching the module. Upon completion of this module, the student will have a deeper understanding on some of the latest research problems in the area of computer systems, as well as the state-of-the-art approaches to address the problems. This module will help prepare students towards doing research in computer systems.\","
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2105 and CS2106\""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3223\" : {"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3223\","
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Systems Implementation\","
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This system-oriented module provides an in-depth study of the concepts and implementation issues related to database management systems. It first covers the physical implementation of the relational data model, which includes storage management, access methods, query processing, and optimisation. Then it covers issues and techniques dealing with multi-user application environments, namely, transactions, concurrency control, and recovery. The third part covers advanced topics such as on-line analytical processing, in-memory databases, and column stores.\","
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (CS2102 or IT2002)\""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6216\" : {"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6216\","
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Machine Learning\","
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This graduate level module covers advanced topics in\\nmachine learning that are of current research or\\napplication interests. The exact topics to be taught will\\ndepend on the lecturers teaching the module. Upon\\ncompletion of this module, the student will have a deeper\\nunderstanding on some of the latest research problems in\\nmachine learning as well as the state-of-the-art\\napproaches and solutions. This module will help prepare\\nstudents towards doing research in machine learning.\","
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244\""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3103\" : {"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3103\","
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Networks Practice\","
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide an opportunity for the students to learn commonly-used network protocols in greater technical depth with their implementation details than a basic networking course. Students will perform hands-on experiments in configuring and interconnecting LANs using networking devices/technologies (e.g., routers, switches, SDN switches, and hubs), networking protocols (e.g., DHCP, DNS, RIP, OSPF, ICMP, TCP, UDP, wireless LAN, VLAN protocols, SIP, SSL, IPSec-VPN) and networking tools (e.g, tcpdump, netstat, ping, traceroute). Students will learn higher-layer network protocols and develop network applications (client/server, P2P) via socket programming.\","
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2105 or EE3204/E or EE4204\""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3230R\" : {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3230R\","
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read host module. Student selection process is enforced.\""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6215\" : {"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6215\","
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Program Analysis\","
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Program analysis techniques allow one to automatically\\nanalyse the behaviour of a computer program, to identify\\nbugs and performance bottlenecks. This graduate level\\nmodule covers advanced topics in program analysis that\\nare of current research or application interests. Students\\nwill explore the state-of-the-art techniques and systems for\\nprogram analysis. After taking the module, students will\\nbe able to apply advanced automated program analysis\\ntools and techniques to verify, test, and debug programs,\\nas well as be better prepared for conducting research in\\nprogram analysis and apply them in related research\\nareas.\","
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and CS4212\""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010J\" : {"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010J\","
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\","
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010 and its equivalents\","
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4277\" : {"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4277\","
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"3D Computer Vision\","
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"One of the most important capability for robots such as self-driving cars, domestic mobile robots, and drones to achieve full autonomy is the ability to perceive the 3D environment. A camera is an excellent choice as the main sensory device for robotic perception because it produces information-rich images, and is lightweight, low cost and requires little or no maintenance. This module covers the mathematical concepts and algorithms that allow us to recover the 3D geometry of the camera motions and the structures in its environment. Topics include projective geometry, camera model, one-/two-/three-/N-View reconstructions and stereo, generalized cameras and non- rigid structure-from-motion.\","
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5477\","
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1101R or MA1311 or MA1506 or MA1508E) and (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4278\" : {"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4278\","
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Intelligent Robots: Algorithms and Systems\","
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the core algorithms and system architectures of intelligent robots. It examines the main system components for sensing, decision making, and motion control and importantly, their integration for core robot capabilities, such as navigation and manipulation. It covers the key algorithms for robot intelligence through inference, planning, and learning, and also provides some practical experiences with modern robot systems. A variety of Illustrative examples are given, e.g., self-driving cars, aerial drones, and object manipulation.\","
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5478\","
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and (MA1101R or MA1311 or MA1508E) and (MA1102R or MA1505 or (MA1511 and MA1512) or MA1521) and (EE2012/A or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6213\" : {"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6213\","
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Special Topics in Distributed Computing\","
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3211 or CS4231\""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4276\" : {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4276\","
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"IoT Security\","
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the advent of the Internet-of-Things, the computing paradigm is quickly changing from the traditional cyber domain to cyber-physical domain. This is made possible from devices that are equipped with sensors and actuators that interact with the physical world. In this module, we will investigate how such sensing systems affect the notion of computer security. We will also explore the state-of-the-art research in the areas of sensing systems and how they can provide benefits to the security of the Internet-of-Things. This module will also investigate how an attacker may compromise the sensing information to exploit security vulnerabilities in these systems.\","
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5476\","
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CG3002 or CG4002 or CS3237\""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6211\" : {"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6211\","
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Analytical Performance Modelling for Computer Systems\","
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Constructing simple mathematical models to describe a computer system can help in analysis and understanding of the characteristics, behaviour, and performance of the system. This module introduces students to the modelling techniques, commonly used models, applications of the models to performance modelling of computer systems, and experimental validation of the models. After completing the module, students are expected to have the confidence to construct, analyse, and validate a performance model for a computer system that they are interested in.\","
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(ST2334 or ST2131) and CS2105 and CS2106.\""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CM1417X\" : {"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CM1417X\","
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Fundamentals of Chemistry\","
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2, 3 ],"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide an introduction to the fundamental topics and concepts in chemistry. This includes topics such as structure of matter, periodic table and periodicity, chemical bonding, states of matter, stoichiometry, reaction types, kinetics, equilibrium and introduction to organic chemistry.\","
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Students with ‘A’ level or H2 Chemistry or equivalent.\\nor CM1417\","
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"’O’ level pass in chemistry or equivalent\""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5242\" : {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5242\","
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Neural Networks and Deep Learning\","
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides students with the knowledge of deep neural network and enables them to apply deep learning methods effectively on real world problems.  The module emphasizes on the understanding of the principles of neural networks and deep learning; practical guidelines and techniques for deep learning; and their applications.  Through assignments and projects, students will design, develop, and evaluate deep learning-based solutions to practical problems, such as those in the areas of computer vision, bioinformatics, fintech, cybersecurity, and games.\","
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244 Machine Learning\""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6210\" : {"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6210\","
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"The Art of Computer Science Research\","
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide the meta-skills for research in computer science. How does one discover great research problems? What are the good strategies for solving research problems? How does one write papers or give presentations with great impact? Students will seek answers to these questions by critically examining and assessing successful and less successful examples of\\nresearch.\","
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 Design and Analysis of Algorithms\""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5240\" : {"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5240\","
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Theoretical Foundations in MultiMedia\","
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module lays the theoretical foundation for graduate students to do research in multimedia: images, videos, audio, speech, graphics and text documents. The module covers the main theoretical issues common to various multimedia research.  These issues provide a general framework within which specific techniques in particular research areas can be understood. Topics include: vector and signal representations of multimedia, spatial and frequency analyses, models and parameter estimation methods. Examples will be drawn from different types of media.  Upon completion, students will be well-grounded to pursue further research in computer vision, graphics, natural language processing, audio analysis and multimedia applications.\","
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or MA2216 or ST1131/A or ST1232 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010E\" : {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010E\","
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\","
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\","
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3219\" : {"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3219\","
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering Principles and Patterns\","
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.\","
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3213 Software Systems Design\","
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent\""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"MA1101R\" : {"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"MA1101R\","
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Linear Algebra I\","
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a first course in linear algebra.  Fundamental concepts of linear algebra will be introduced and investigated in the context of the Euclidean spaces R^n.  Proofs of results will be presented in the concrete setting.  Students are expected to acquire computational facilities and geometric intuition with regard to vectors and matrices.  Some applications will be presented. Major topics: Systems of linear equations, matrices, determinants, Euclidean spaces, linear combinations and linear span, subspaces, linear independence, bases and dimension, rank of a matrix, inner products, eigenvalues and eigenvectors, diagonalization, linear transformations between Euclidean spaces, applications.\","
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EG1401, EG1402, MA1101, MA1311, MA1506, MA1508, FOE students, YSC2232\","
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE ‘A’ Level or H2 Mathematics or H2 Further Mathematics  or MA1301 or MA1301FC or MA1301X\""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3216\" : {"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3216\","
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Product Engineering for Digital Markets\","
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"5\","
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"In this module, students will practice software product engineering by working in small teams to develop well-tested, user-friendly, production-quality software for the real world. To support this goal, students work closely with users to understand their problems, gather their requirements, and obtain their feedback through a rapid, iterative, application design and development process. Students will also be exposed to practical issues for digital markets such as growing the user base of their application, deployment of the application on the Web or in the cloud system, and validating the UI design and UX of the application.\","
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.\""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3217\" : {"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3217\","
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering on Modern Application Platforms\","
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"5\","
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the practice of software engineering on modern application platforms such as mobile devices, the Web and cloud systems. Students will work in small project teams to develop well-tested,\\nproduction-quality software. This module focuses on building core software engineering skills and competencies in programming modern application platforms. It also trains students to work well in project teams. Students will be\\nassessed on both their individual programming competencies and their software enginnering skills in final team project.\","
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.\""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6208\" : {"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6208\","
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Artificial Intelligence\","
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers advanced topics in artificial intelligence that are of current research or application interests. A wide range of topics may be covered including soft computing (fuzzy logic, genetic algorithms, etc.), data mining, machine learning, image and video processing, artificial life, robotics, etc. The exact topics to be taught will depend on the lecturers teaching the module.\","
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243\""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"ES2660\" : {"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"ES2660\","
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Communicating in the Information Age\","
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"In a context of prolific production and convenient access to content and innovation in the Information Age, how should one critically process and clearly communicate ideas to various audiences? In this module, students will learn to question and articulate their analysis of assumptions and assertions on issues facing the Information Age through processes such as identifying bias and substantiating arguments. The Ennis’ (1986, 2001) taxonomy of critical thinking dispositions will be employed to develop students’ analytical thinking skills and their ability to articulate cogent responses to arguments or to defend their own positions in both written and oral form.\","
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"GET1006 and GEK1901\","
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"1. Students who are required to take ES1000 Foundation Academic English and/or ES1103 English for Academic Purposes, must pass those modules before they are allowed to read this module.\\n2. Only SoC students matriculated in AY2016/2017 and after, are allowed to take ES2660.\""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5239\" : {"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5239\","
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer System Performance Analysis\","
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide students a working knowledge of computer performance evaluation and capacity planning. They will be able to identify performance bottlenecks, to predict when performance limits of a system will be exceeded, and to characterise present and future workload to perform capacity planning activities. Topics include: performance analysis overview; measurement techniques and  tools including workload characterisation, instrumentation, benchmarking, analytical modelling techniques including operational analysis, stochastic queuing network analysis; performance of client-server architectures; capacity planning; case studies.\","
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T) and (EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6207\" : {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6207\","
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Natural Language Processing\","
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module aims to prepare students to embark on research in natural language processing (NLP). At the end of the course, the students will have experience in reading and critiquing research papers, and will have undertaken a substantial project on some aspects of NLP research. Topics covered include: Statistical parsing, Word sense disambiguation, SENSEVAL, co-reference resolution, machine translation, question answering.\","
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4248\""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4268\" : {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4268\","
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Quantum Computing\","
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module will introduce basics of quantum computing and cover various well known algorithms e.g. Deutsch-Jozsa algorithm, Simon’s algorithms, quantum Fourier transform, phase estimation, order finding, Shor’s algorithm and Grover’s algorithm. The module will also cover some basics in quantum information theory, cryptography and error correction.\","
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5236\" : {"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5236\","
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Automata Theory\","
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"In computer science, automata are an important tool for many theoretical investigations. Various types of automata have been used to characterise complexity classes. This module covers automata theory in depth, describes the\\nChomsky hierarchy, and introduces various advanced topics including automata structures, automata on infinite words, automata on trees and the learnability of classes of regular languages from queries and positive data.\","
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4232 Theory of Computation\""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5478\" : {"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5478\","
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Intelligent Robots: Algorithms and Systems\","
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the core algorithms and system architectures of intelligent robots. It examines the main system components for sensing, decision making, and motion control and importantly, their integration for core robot capabilities, such as navigation and manipulation. It covers the key algorithms for robot intelligence through inference, planning, and learning, and also provides some practical experiences with modern robot systems. A variety of Illustrative examples are given, e.g., self-driving cars, aerial drones, and object manipulation.\","
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4278\","
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and (MA1101R or MA1311 or MA1508E) and (MA1102R or MA1505 or (MA1511 and MA1512) or MA1521) and (EE2012/A or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3210\" : {"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3210\","
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Parallel Computing\","
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts: parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes: theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance\\nand scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.\","
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2100 or CG2007 or CG2028 or EE2024 or EE2028\""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5477\" : {"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5477\","
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"3D Computer Vision\","
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"One of the most important capability for robots such as\\nself-driving cars, domestic mobile robots, and drones to\\nachieve full autonomy is the ability to perceive the 3D\\nenvironment. A camera is an excellent choice as the main\\nsensory device for robotic perception because it produces\\ninformation-rich images, and is lightweight, low cost and\\nrequires little or no maintenance. This module covers the\\nmathematical concepts and algorithms that allow us to\\nrecover the 3D geometry of the camera motions and the\\nstructures in its environment. Topics include projective\\ngeometry, camera model, one-/two-/three-/N-View\\nreconstructions and stereo, generalized cameras and nonrigid structure-from-motion.\","
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4277\","
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1101R or MA1311 or MA1506 or MA1508E) and\\n(CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6203\" : {"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6203\","
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Database Systems\","
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the topics in data base management systems with current research and industrial interests and importance. Examples of topics include multimedia data management, object-oriented database technology, data warehousing and data mining, integration of heterogeneous and legacy systems.\","
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3211\" : {"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3211\","
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Parallel and Concurrent Programming\","
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"A concurrent system consists of a set of processes that executes simultaneously and that may collaborate by communicating and synchronising with one another. Examples of concurrent systems are parallel programs that describe sets of collaborating processes. This module introduces the design, development and debugging of parallel programs. It will build on the concurrency concepts gained from the Operating Systems module. It covers concepts and modelling tools for specifying and reasoning (about the properties of) concurrent systems and parallel programs. It also covers principles of performance analysis, asynchronous and asynchronous parallel programming, and engineering concurrent systems and parallel programs.\","
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2106 or CG2271\""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5234\" : {"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5234\","
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Algorithms at Scale\","
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course presents advanced techniques for the design and analysis of algorithms and data structures, with emphasis on efficiency and scalability. It will cover a variety of algorithmic topics that arise when coping with very large data sets. How do you design algorithms that scale well? How do you process streaming data? How do you construct algorithms that run efficiently on modern hardware? The goal of this module is to cover modern tools and techniques in algorithm design.\","
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230\""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5476\" : {"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5476\","
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"IoT Security\","
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the advent of the Internet-of-Things, the computing\\nparadigm is quickly changing from the traditional cyber\\ndomain to cyber-physical domain. This is made possible\\nfrom devices that are equipped with sensors and actuators\\nthat interact with the physical world. In this module, we will\\ninvestigate how such sensing systems affect the notion of\\ncomputer security. We will also explore the state-of-the-art\\nresearch in the areas of sensing systems and how they\\ncan provide benefits to the security of the Internet-ofThings. Furthermore, this module will also investigate how\\nan attacker may compromise the sensing information to\\nexploit security vulnerabilities in these systems.\","
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4276\","
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CG3002 or CG4002 or CS3237\""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5233\" : {"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5233\","
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Simulation and Modelling Techniques\","
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide students with a working knowledge of applying\\nsimulation techniques to model, simulate and study complex systems. It covers techniques in simulation model design, model execution, and model analysis. Students will have hands-on experience using a simulation package. The module will also introduce concepts of parallel and distributed simulation, and high level architecture.\","
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4231 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5232\" : {"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5232\","
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Formal Specification and Design Techniques\","
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The primary role of the formal specification is to provide a precise and unambiguous description of a computer system. A formal specification allows the system designer to verify important properties and detect design error before system development begins. The objective of this course is to study various formal specification and design techniques for modelling (1) object-oriented systems, (2) real-time distributed systems, and (3) concurrent reactive systems. The course will focus on the state-based notations Z/Object-Z, event-based notation CSP/Timed-CSP. Graphical modelling notations, such as StateChart and UML (Unified Modelling Language) will also be addressed.\","
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1100 or (CS1231 or its equivalent)) and CS2103\""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5231\" : {"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5231\","
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Systems Security\","
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces fundamental notions and requirements in computer system security and the mechanisms that provide security in various systems and applications. It aims to teach students the security perspective of popular computer systems, such as desktop systems, mobile systems, and web-based systems. Its topics include software security, operating system security, mobile security, web security, trusted platforms, and auditing and forensic analysis.\","
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security\""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6285\" : {"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6285\","
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Topics in Computer Science: Bridging System and Deep Learning\","
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Co-design of system and machine learning algorithms has led to faster and more scalable machine learning systems.  The module aims to expose students to recent state-of-the-art co-design techniques to make deep learning run faster, touching on both system research and AI research. The specific topics include distributed deep learning, large-batch training, second-order optimization, asynchronous algorithms, neural network compression, federated machine learning, memory-efficient optimizers, model parallelism, efficient communication library, low-precision training.\","
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Variable, depend on the choice of topics or departmental approval.\","
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5242 and CS3210\""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2113T\" : {"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2113T\","
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering \u0026 Object-Oriented Programming\","
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.\","
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)\","
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2040C or ((CS2030 or its equivalent) and CS2040/S)\""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6283\" : {"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6283\","
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Topics in Computer Science: Trustworthy Machine Learning\","
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Machine learning is increasingly being used in critical decision-making systems, yet is not reliable in the presence of noisy, biased, and adversarial data. Can we trust machine learning models?  This module aims to answer this question, by covering the fundamental aspects of reasoning about trust in machine learning, including its robustness to adversarial data and model manipulations, the privacy risks of machine learning algorithms for sensitive data, the transparency measures for machine learning, and fairness in AI. It covers the algorithms that analyze machine learning vulnerabilities; and techniques for building reliable and trustworthy machine learning algorithms.\","
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Variable, depend on the choice of topics or departmental approval.\","
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244 Machine Learning\""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1221\" : {"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1221\","
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Fundamentals of Physics I\","
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to bridge the gap between O level physics and 1st year university physics level. The module covers the fundamentals of two branches of physics: mechanics and thermodynamics. Topics included in the part on mechanics are linear motion, curvilinear motion, relative motion, circular motion, Newtons laws of motion, work and energy, conservation of energy, linear momentum and conservation, rotational kinematics, torque and moment of inertia, rotational dynamics, conservation of angular momentum, gravitation and planetary motion, static equilibrium, oscillatory motion and fluid mechanics. The part on thermodynamics encompasses topics such as temperature and zeroth law of thermodynamics, temperature scales, thermal expansion, heat and internal energy, thermal processes, first law of thermodynamics, ideal gas laws and kinetic theory of gasses.  .\","
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"A\u0027 LEVEL OR H2 PASS IN PHYSICS OR PC1141, OR PC1142 OR PC1431 OR PC1431FC or PC1431X OR PC1221FC or PC1221X, YSC1213\","
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"\u0027O\u0027 level pass in Physics or Combined Science (Physics \u0026 Chemistry OR Physics \u0026 Biology).\""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6280\" : {"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6280\","
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Topics in Computer Science: Systems Design for Next Gen Hardware\","
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the end of Moore\u0027s Law, we are witnessing a paradigm shift in computing platforms towards the inclusion of specialized hardware accelerators. In this module, we will explore the designs of system software on these emerging computing hardware platforms. We will first take a broad overview of existing and upcoming specialized hardware devices, including GPU, TPU, FPGA, SmartNICs, reconfigurable network switches, and other specialized ASICs. We will then discuss various topics in systems design for these new hardware platforms, e.g., OS constructs, abstractions, programming models, resource sharing and multiplexing, scheduling, co-designing with applications and algorithms, and joint processing with CPU.\","
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2100 Computer Organization and CS2106 Introduction to Operating Systems\""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP3880\" : {"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP3880\","
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Technology Attachment Programme\","
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EG3601\","
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(IS2101 Business and Technical Communication or CS2101 Effective Communication for Computing Professionals or their equivalents)\\nand\\n(CS2103/CS2103T Software Engineering or IS2103 Enterprise Systems Development Concepts or IS2150 E-Business Design and Implementation or BT2101 IT and Decision Making)\""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CSA6102\" : {"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CSA6102\","
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Cultural Studies in Asia\","
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module will examine the various areas of research in Cultural Studies conducted by Asian scholars or scholars locating their research in Asia. It will examine the histories, concepts and analytic strategies that these scholars deploy in the analysis of the changing cultural landscapes and practices in contemporary Asia. Abiding themes of the module will be the conceptual constitution of the idea of \u0027Asia\u0027, the emergence of \u0027trans-Asian\u0027 practices and the possibility of \u0027pan-Asian\u0027 identities that these trans-location practices might engender.\","
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"PC1222\" : {"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"PC1222\","
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Fundamentals of Physics II\","
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module aims to bridge the gap between O level Physics and first year university physics level. The module covers the fundamentals of three branches of physics: electricity \u0026amp; magnetism, optics and modern physics. Topics included in the part on electricity \u0026amp; magnetism are Coulombs law, electric field and potential, capacitance, current and resistance, DC circuits, magnetic fields, magnetic effects on current, electromagnetic induction, AC circuits and electromagnetic waves. The part on optics encompasses topics such as reflection and refraction, systems of lenses, optical instruments, interference, diffraction, grating and polarization. Topics covered in the part on modern physics are blackbody radiation, photoelectric effect, atomic transitions and spectra, the uncertainty principle, wave-particle duality, radioactivity and decay processes, binding energy and fusion energy and fusion \u0026amp; fission.\","
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"\u0027A\u0027 Level OR H2 Pass in Physics or PC1143, or PC1144 or PC1432/PC1432X, YSC1213\","
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"\u0027O\u0027 level pass in Physics or Combined Science (Physics \u0026 Chemistry OR Physics \u0026 Biology).\""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP4106\" : {"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP4106\","
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computing Project\","
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"8\","
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this project module enables students to undertake a substantial computing-related project work over a period of one year. Students work individually on self-proposed projects or projects proposed by staff. They will have good opportunity to apply what they have learnt on practical problems, be it research-oriented or software development-oriented. Students should periodically submit a report make a presentation to the respective supervisors.\\nThe project will be letter-graded.\","
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CG4001, BT4101, CP4101, or any Integrated Honours Thesis/Project/Dissertation module\","
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Completed at least 112 MCs for the respective degree.\""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"MA1521\" : {"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"MA1521\","
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Calculus for Computing\","
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides a basic foundation for calculus and its related subjects required by computing students. The objective is to train the students to be able to handle calculus techniques arising in their courses of specialization. In addition to the standard calculus material, the course also covers simple mathematical modeling techniques and numerical methods in connection with ordinary differential equations. \\n\\n\\n\\nMajor topics: \\n\\nPreliminaries on sets and number systems. \\n\\nCalculus of functions of one variable and applications. \\n\\nSequences, series and power series.   \\n\\nFunctions of several variables. Extrema.\\n\\nFirst and second order differential equations. \\n\\nBasic numerical methods for ordinary differential equations.\","
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Students reading a primary major in Mathematics/Applied Mathematics/Quantitative Finance/Data Science and Analytics, MA1102R, MA1312, MA1505, MA1507, MA2501, FoE students, YSC1216\","
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE ‘A’ Level Mathematics or H2 Mathematics or H2 Further Mathematics or MA1301 or MA1301X\""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3236R\" : {"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3236R\","
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Information Theory\","
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"same as CS3236\","
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5229\" : {"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5229\","
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Computer Networks\","
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course covers advanced fundamental principles of computer networks and techniques for networking. The goal of this course is to teach these fundamentals/techniques that will remain important and relevant regardless of the hot topics in networks and networking. Briefly, the topics include advanced network architecture and design principles, protocol mechanisms, implementation principles and software engineering practices, network algorithmic, network simulation techniques and tools, performance analysis and measurement, and protocol specification/verification techniques.\","
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4226 Internet Architecture or EE4210 Computer Communications Networks II\""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2113\" : {"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2113\","
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering \u0026 Object-Oriented Programming\","
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.\","
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)\","
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2040C or ((CS2030 or its equivalent) and CS2040/S)\""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3203\" : {"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3203\","
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering Project\","
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"8\","
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides students with hands-on experience in\\nworking in project groups through a complete SDLC to\\ndevelop a well-designed, well-tested, large-scaled software\\nsystem. The students will apply the current best software\\nengineering practices on the analysis, design,\\nimplementation, and testing of software system. Through\\nthe project, students will practise analysis of user’s needs,\\nformulation of computing requirements to meet the user’s\\nneeds, modelling and design of the computer systems\\naccording to the requirements, evaluation of the design,\\nefficient implementation of software components, system\\nintegration, software version control, and rigorous testing.\","
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3201, CS3202\","
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2103/T or CS2113/T)\""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5228\" : {"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5228\","
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Knowledge Discovery and Data Mining\","
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course introduces fundamental principles behind data mining and efficient techniques for mining large databases. It provides an overview of the algorithmic aspect of data mining: its efficiency (high-dimensional database indexing, OLAP, data reduction, compression techniques) and effectiveness (machine learning involving greedy search, branch and bound, stochastic search, parameter optimisation). Efficient techniques covered include association rules mining (Apriori algorithm, correlation search, constrained association rule discovery), classifier induction (decision trees, RainForest, SLIQ; Support vector machine; Naive Bayesian; classification based on association / visualisation), cluster analysis (k-means, k-mediods, DBSCAN, OPTICS, DENCLUE, STING, CLUSEQ, ROCK etc), and outliers/deviants detection (LOF, Distance-based outlier etc).\","
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2102 and CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5346\" : {"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5346\","
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Information Visualisation\","
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to bring together individual pedagogies\\nof design, information, and computation, for teaching the\\nanalysis and representation of data for visualisation.\\nStudents will learn the methodology of developing and\\nevaluating an information visualisation solution, common\\ninformation visualisation techniques (such as those for\\ntopical, spatial, hierarchical, temporal, and relational data),\\nand methods for scaling up interactive visualisation with big\\ndata. After the module, students should be able to use the\\nexisting visualisation tools for building useful, interactive,\\ninformation visualisation to facilitate complex data\\nanalytics, exploration, understanding, and pattern\\ndiscovery.\","
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2040 or its equivalent) and CS2102 and CS3240 and \\n(EE2012/A or ST1131/A or ST1232 or DSC2008 or ST2132 or ST2334)\""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5224\" : {"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5224\","
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Cloud Computing\","
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide an overview of the design, management and application of cloud computing. The topics include managing virtualization, cloud computing environments, cloud design patterns and use cases, data centre architectures and technologies, cloud services fulfillment and assurance, orchestration and automation of cloud resources, cloud capacity management, cloud economics, case studies.\","
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5223\" : {"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5223\","
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Distributed Systems\","
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The topic of Distributed Systems is now garnering increasing importance, especially with the advancement in technology of the Internet and WWW. The aim of this module is to provide students with basic concepts and principles of distributed operating systems, interprocess communications, distributed file systems, shared data, and the middleware approach. The module is taught in seminar style, and several case studies are included, e.g. CORBA.   Topics: Introduction - Characteristics of Distributed Systems; Process Management Communication in Distributed Systems; Distributed Synchronisation; Distributed Real-time Systems; File Systems; Naming Security; Fault Tolerant Distributed Systems; Distributed Simulation; WWW as an application of Distributed System.\","
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3211 Parallel and Concurrent Programming\""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5344\" : {"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5344\","
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Big-Data Analytics Technology\","
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module analysis of data which can not fit in main memory and application of such analysis to web applications. The topics covered include: map-reduce as a tool for creating parallel algorithms that operate on very large amount of data, similarity search, data-streaming processing, search engine techonology, clustering of very large, high-dimensional datasets.\","
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"BT5110 (Data Management and Warehousing) or database related modules; programming experience (with data structures and algorithms) is required\""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5222\" : {"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5222\","
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Computer Architecture\","
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The aim of this module is to introduce the state-of-the-art architectural advances underlying the current generation of computing systems. A review of pipelined processor design and hierarchical memory design is followed by advanced topics including exploitation of instruction-level parallelism through dynamic instruction scheduling and speculation, exploiting thread-level parallelism through\\nmultiprocessors, and optimizations for memory and storage subsystems. Throughout the module, particular emphasis will be placed on cost-performance-power-reliability trade-offs in designing the different architectural components.\","
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3220 Computer Architecture or CS4223 Multi-core Architecture\""
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5340\" : {"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5340\","
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Uncertainty Modelling in AI\","
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module covers modelling methods that are suitable for reasoning with uncertainty. The main focus will be on probabilistic models including Bayesian networks and Markov networks. Topics include representing conditional independence, building graphical models, inference using graphical models and learning from data. Selected applications in various domains such as speech, vision, natural language processing, medical informatics, bioinformatics, data mining and others will be discussed.\","
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3281\" : {"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3281\","
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Thematic Systems Project I\","
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is the first part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\\nfirst part focuses on the analysis of the real-world problems, formulation of the computing requirements of the desired solution that meets the user’s needs, design of the computer systems according to the requirements, and evaluation of the design.\","
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2103 or its equivalent) and have passed at least one primary module in a CS focus area. Student selection process will be enforced.\""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3282\" : {"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3282\","
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Thematic Systems Project II\","
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is the second part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\\nsecond part focuses on the development of algorithms required for the systems, implementation and testing of the algorithms and the systems, and evaluation of the systems according to the users’ requirements.\","
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3281 and have passed at least two primary modules in a CS focus area. Student selection process will be enforced.\""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP2201\" : {"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP2201\","
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Journey of the Innovator\","
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"2\","
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Innovators practice the art of persuading people to accept changes in how they live—in work, leisure and social interaction. This module’s object is to introduce students to digital innovation, and to encourage them to embark on a personal journey of creativity and challenge. Inspirational innovators will be invited to present topics related to digital innovation, such as successful innovative projects of start-up teams and advanced development teams, innovative approaches such as Design Thinking, and opportunities for innovation, the vibrant intersection of energising technology trends and new markets. This module will be graded as “Completed Satisfactory” or “Completed Unsatisfactory”\\n(CS/CU).\","
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"IS4010\" : {"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"IS4010\","
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Industry Internship Programme\","
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module enables students to apply the computing knowledge and skills that they have acquired in class to industry internships in companies/organizations. Students in industry internships will be jointly guided by supervisors from both the companies/organizations and the school Their progress on internship projects will be monitored during internship period, and their performance will be assessed through letter grades at the end of the internship. The internship duration will be 6 months, consisting of both a full-time and part-time component. Full-time internship attachment will last for 3 months during the NUS vacation period, and will continue on a part-time basis that will last for 3 months during the NUS study semester.\","
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"[IS2101 or CS2101] and [IS1105 or IS3101 or IS3103] and [IS2103 or CS2107 or  (BT2101 and BT2102)]\""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CP4101\" : {"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CP4101\","
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"B.Comp. Dissertation\","
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"12\","
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4101\","
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Attain at least 70% of the MC requirement for the respective degree\""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  }"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 195,
      "silvernitro": 1472
    }
  },
  {
    "path": "src/main/resources/data/precludedmodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS1101S\": \"CS1010, CS1010E, CS1010J, CS1010S, CS1010X\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS1231S\" : \"CS1231, MA1100\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS2030S\" : \"CS2030\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS2040S\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040C\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS2103T\" : \"CS2103T, CS2113, CS2113T, IS2101\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS2106\" : \"CG2271, EE4214\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"CS2101\" : \"CS2103, IS2101, ES2002, ES2007D, ES1601\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"MA1521\" : \"MA1102R, MA1312, MA1505, MA1507, MA2501, YSC1216\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"MA1101R\" : \"EG1401, EG1402, MA1101, MA1311, MA1506, MA1508, YSC2232\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"ST2334\" : \"ST1131, ST1131A, ST1232, ST2131, MA2216, CE2407, EC2231, EC2303, PR2103, DSC2008\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 12
    }
  },
  {
    "path": "src/main/resources/data/sciencemodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1121\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Organic Chemistry 1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1131\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physical Chemistry 1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1417\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Fundamentals of Chemistry\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1102\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Molecular Genetics\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1105\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Evolutionary Biology\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1106\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Molecular Cell Biology\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1301\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"General Biology\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1306\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Forensic Science\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1141\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics I\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1142\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics II\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1143\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics III\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1144\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics IV\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1221\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Fundamentals of Physics I\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1222\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Fundamentals of Physics II\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1432\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics IIE\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 15,
      "yan-soon": 63
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    background-color: #192841; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-base: #192841;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-control-inner-background: #192841;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 10%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: derive(#ef7c00, 80%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-background-color: #192841;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-border-color: #192841 derive(#192841, 10%) #192841 derive(#192841, 10%);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-border-top-width: 0.3px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ".pane-without-border {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ".intro-display {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Courier;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: derive(#ef7c00, 80%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ".intro-display-enter {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Courier;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5 !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: derive(#ef7c00, 10%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-padding: 7px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-border-color: derive(#192841, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-border-width: 10px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-border-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  -fx-text-fill: #192841;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#ef7c00, 10%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-insets: 4;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "#filterField, #moduleListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: transparent, #192841, #ffffff, #192841;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 88,
      "-": 271
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background: #192841;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/IntroDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cHBox fx:id\u003d\"introDisplayPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"pane-without-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cRegion /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"335.0\" prefWidth\u003d\"290.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003cVBox layoutY\u003d\"32.0\" prefHeight\u003d\"303.0\" prefWidth\u003d\"290.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"96.0\" fitWidth\u003d\"208.0\" layoutX\u003d\"41.0\" layoutY\u003d\"14.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003cimage\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cImage url\u003d\"@../images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003c/image\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cRegion maxHeight\u003d\"20.0\" minHeight\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cTextField fx:id\u003d\"version\" alignment\u003d\"CENTER\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"version 1.3\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cTextField fx:id\u003d\"firstTwoNames\" alignment\u003d\"CENTER\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"by Lau Siaw Sam, Lim Shao Kiat,\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cTextField fx:id\u003d\"nextTwoNames\" alignment\u003d\"CENTER\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"Muhd Syafiq \u0026amp; Yan Soon Xiang\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cRegion maxHeight\u003d\"20.0\" minHeight\u003d\"20.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"75.0\" prefWidth\u003d\"109.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cTextField fx:id\u003d\"helpInfo\" alignment\u003d\"CENTER_RIGHT\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"type  help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003c/TextField\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cTextField fx:id\u003d\"exitInfo\" alignment\u003d\"CENTER_RIGHT\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"type  exit\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003c/TextField\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"75.0\" prefWidth\u003d\"62.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cTextField fx:id\u003d\"helpInfo1\" editable\u003d\"false\" styleClass\u003d\"intro-display-enter\" text\u003d\"\u0026lt;Enter\u0026gt;\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003c/TextField\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cTextField fx:id\u003d\"exitInfo1\" editable\u003d\"false\" styleClass\u003d\"intro-display-enter\" text\u003d\"\u0026lt;Enter\u0026gt;\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003c/TextField\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"75.0\" prefWidth\u003d\"122.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cTextField fx:id\u003d\"helpInfo2\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"for information\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003c/TextField\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003cTextField fx:id\u003d\"exitInfo2\" editable\u003d\"false\" styleClass\u003d\"intro-display\" text\u003d\"to exit\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                              \u003c/TextField\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cRegion /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 91
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cfx:root minHeight\u003d\"570\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"GradPad App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003cImage url\u003d\"@/images/gradpad.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cVBox fx:id\u003d\"moduleListResultDisplay\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "          \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cVBox fx:id\u003d\"moduleList\" minWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minWidth\u003d\"250.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "              \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cInsets bottom\u003d\"20.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$title\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "               \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modular credits\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "               \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "               \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 21,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" text\u003d\"Welcome to GradPad!\" wrapText\u003d\"true\" StackPane.alignment\u003d\"TOP_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonGradPadStorageTest/invalidAndValidModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS1231\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS123#\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4!\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 9
    }
  },
  {
    "path": "src/test/data/JsonGradPadStorageTest/invalidModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"Module with invalid code field: CS13!3\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradPadTest/duplicateModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS1231\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\": [ \"core\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS1231\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"credits\": \"4\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Discrete Structures\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "yan-soon": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradPadTest/invalidModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS12!3\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4@\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradPadTest/typicalModulesGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Module values as in TypicalModules#getTypicalGradPad()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"core\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3216\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"5\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Software Product Engineering for Digital Markets\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"nonCore\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "yan-soon": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \"gradPadFilePath\" : \"gradpad.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \"gradPadFilePath\" : \"gradpad.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/compiledmodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEH\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEH1002\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Economic Issues in the Developing World\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GEQ\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GEQ1000\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Asking Questions\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GER\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GER1000\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Quantitative Reasoning\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GES\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GES1002\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Global Economic Dimensions of Singapore\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"GET\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"GET1002\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Bridging East And West: Exploring Chinese Communication\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1101S\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2030S\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2040S\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computer Organisation\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Introduction to Operating Systems\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS1103\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Ethics in Computing\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ES2660\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Communicating in the Information Age\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1521\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Calculus for Computing\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1101R\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Linear Algebra I\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ST2334\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Probability and Statistics\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1121\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Organic Chemistry 1\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1131\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physical Chemistry 1\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1417\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Fundamentals of Chemistry\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1102\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Molecular Genetics\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1105\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Evolutionary Biology\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1106\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Molecular Cell Biology\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1301\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"General Biology\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1306\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Forensic Science\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1141\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics I\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1142\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics II\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1143\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics III\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1144\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics IV\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1221\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Fundamentals of Physics I\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1222\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Fundamentals of Physics II\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1432\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Physics IIE\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3880\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Advanced Technology Attachment Programme\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3200\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Internship\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3202\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Internship II\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3107\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computing for Voluntary Welfare Organisations\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3110\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computing for Voluntary Welfare Organisations II\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS4010\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Industry Internship Programme\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"TR3202\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Startup Internship Programme\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP4101\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"BComp Dissertation\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 37,
      "yan-soon": 176
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/doublemodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    { \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"code\" : \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \"credits\" : \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \"title\" : \"Programming Methodology\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \"credits\" : \"4\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \"title\" : \"Discrete Structures\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 4,
      "yan-soon": 10
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/incompletefoundationmodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1231\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2030S\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2040S\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Computer Organisation\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Introduction to Operating Systems\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 7,
      "yan-soon": 31
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/singlemodule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    { \"tagged\": [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \"credits\": \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \"title\" : \"Programming Methodology\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "yan-soon": 7
    }
  },
  {
    "path": "src/test/data/SampleDataUtilTest/samplemodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1010\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2105\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Introduction to Computer Networks\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathSci\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1521\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Calculus for Computing\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"BreadthDepth\" ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2107\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"title\" : \"Introduction to Information Security\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // valid same AppParameters -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(expected.equals(expected));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // valid same paths different AppParameters -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        appParameters.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(expected.equals(appParameters));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different path -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        appParameters.setConfigPath(Paths.get(\"config2.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(expected.equals(appParameters));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different class -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(expected.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // valid same AppParameters -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(expected.hashCode(), expected.hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // valid same paths different AppParameters -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        appParameters.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(expected.hashCode(), appParameters.hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different path -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        appParameters.setConfigPath(Paths.get(\"config2.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(expected.hashCode(), appParameters.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 40,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(defaultConfig, defaultConfig);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void equalsMethodDifferentValues_test() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GuiSettings testGui \u003d new GuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(defaultConfig.equals(testGui));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getLogLevel_validTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Level expected \u003d Level.INFO;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Level actual \u003d defaultConfig.getLogLevel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getUserPrefsFilePath_validTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path expected \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path actual \u003d defaultConfig.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void hashCode_validTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int expected \u003d Objects.hash(defaultConfig.getLogLevel(), defaultConfig.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int actual \u003d defaultConfig.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "yan-soon": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/GuiSettingsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.GuiSettings.DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.GuiSettings.DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class GuiSettingsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final GuiSettings defaultGui \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getWindowWidth_validTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        double actual \u003d defaultGui.getWindowWidth();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(DEFAULT_WIDTH, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getWindowHeight_validTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        double actual \u003d defaultGui.getWindowHeight();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(DEFAULT_HEIGHT, actual);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getWindowCoordinates_validTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Point actual \u003d defaultGui.getWindowCoordinates();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void equals_validTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Config testConfig \u003d new Config();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(defaultGui.equals(testConfig));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void hashCode_validTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int expected \u003d Objects.hash(defaultGui.getWindowWidth(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                defaultGui.getWindowHeight(), defaultGui.getWindowCoordinates());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int actual \u003d defaultGui.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/LogsCenterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class LogsCenterTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final LogsCenter defaultLogsCenter \u003d new LogsCenter();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void init_validTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        defaultLogsCenter.init(defaultConfig);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Level expected \u003d defaultConfig.getLogLevel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Level actual \u003d defaultLogsCenter.getCurrentLogLevel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getLogger_invalidTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Logger expected \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Logger actual \u003d LogsCenter.getLogger((Class\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareToMethod_validTest() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Version testVersion1 \u003d new Version(1, 1, 1, true);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Version testVersion2 \u003d new Version(1, 1, 1, false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int expected \u003d 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int actual \u003d testVersion2.compareTo(testVersion1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void equalsMethodEmptyObject_validTest() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Version testVersion \u003d new Version(1, 1, 1, true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(testVersion.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void equalsMethodDifferentObject_validTest() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Version testVersion \u003d new Version(1, 1, 1, true);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Config testConfig \u003d new Config();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(testVersion.equals(testConfig));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 135,
      "yan-soon": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/HttpUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class HttpUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This is a public API endpoint by Postman for testing purposes. It echoes all requests params."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_DUMMY_ENDPOINT \u003d \"https://postman-echo.com/get?foo\u003dbar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String INVALID_ENDPOINT \u003d \"https://asdf\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final HttpUtil httpUtil \u003d HttpUtil.SINGLETON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //CHECKSTYLE.OFF: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void makeGETRequest_validURL_validResponse() throws NusmodsException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //CHECKSTYLE.ON: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String response \u003d httpUtil.makeGETRequest(VALID_DUMMY_ENDPOINT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        JsonNode jsonNode \u003d mapper.readTree(response);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String actualProperty \u003d jsonNode.get(\"args\").get(\"foo\").asText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(\"bar\", actualProperty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //CHECKSTYLE.OFF: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void makeGETRequest_invalidURL_throwsNusmodsException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //CHECKSTYLE.ON: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e httpUtil.makeGETRequest(INVALID_ENDPOINT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    //---------------- Tests for containsCharSequenceIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Invalid equivalence partitions for ModuleCode: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharSequenceIgnoreCase("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \"typical ModuleCode\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter cannot be empty\", () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                StringUtil.containsCharSequenceIgnoreCase(\"typical ModuleCode\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter should be a single word\", () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                StringUtil.containsCharSequenceIgnoreCase(\"typical ModuleCode\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharSequenceIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Valid equivalence partitions for CharSequence:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - any charSequence"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - charSequence containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - charSequence with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Valid equivalence partitions for ModuleCode:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - one moduleCode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - ModuleCode with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - charSequence matches any part of moduleCode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - ModuleCode does not contain charSequence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Empty ModuleCode"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(StringUtil.containsCharSequenceIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(StringUtil.containsCharSequenceIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"bbb\", \"bb\")); // ModuleCode word"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // bigger than CharSequence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(StringUtil.containsCharSequenceIgnoreCase(\"bbb\", \"bbbb\")); // CharSequence bigger"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // than ModuleCode word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Matches word in the ModuleCode, different upper/lower case letters"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"bBb\", \"Bbb\")); // Different upper/lower case"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"ccc@1\", \"CCc@1\")); // With symbols/numbers"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"  AAA   \", \"aaa\")); // ModuleCode has extra"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"ccc\", \"  ccc  \")); // CharSequence has extra"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //---------------- Tests for ignoreCase --------------------------------------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.ignoreCase(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e StringUtil.ignoreCase(\"  \"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter should be a single word\", ()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e StringUtil.ignoreCase(\"aaa BBB\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // Return all uppercase letters with different upper/lower case letters"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"abc\"), \"ABC\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"abc1\"), \"ABC1\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"ab1@c\"), \"AB1@C\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"   abc  \"), \"ABC\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"ABC\"), \"ABC\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"cS2100\"), \"CS2100\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 29,
      "mhdsyfq": 38,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.ADD_COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.CLEAR_COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.LIST_COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_CONFIRMATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONFIRMATION_CANCEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_CONFIRMATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_GRADPAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_CONFIRMATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.YES_COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage gradPadStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonGradPadStorage(temporaryFolder.resolve(\"gradPad.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String deleteCommand \u003d \"delete cs2103t\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_EMPTY_GRADPAD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String listCommand \u003d LIST_COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(listCommand, MESSAGE_LIST_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // Setup LogicManager with JsonGradPadIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage gradPadStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonGradPadIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionGradPad.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String addCommand \u003d ADD_COMMAND_WORD + CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS2103T).withTags().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGradPad_validTest() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad actual \u003d logic.getGradPad();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model testModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad expected \u003d testModel.getGradPad();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGradPadFilePath_validTest() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path actual \u003d logic.getGradPadFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model testModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path expected \u003d testModel.getGradPadFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGuiSettings_validTest() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GuiSettings actual \u003d logic.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model testModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GuiSettings expected \u003d testModel.getGuiSettings();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGuiSettings_validTest() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GuiSettings expected \u003d new GuiSettings();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        logic.setGuiSettings(expected);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GuiSettings actual \u003d logic.getGuiSettings();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_abortCommand_validTest1() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        logic.execute(CLEAR_COMMAND_WORD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_CONFIRMATION_CANCEL"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + String.format(\"\\\"%s\\\"\", CLEAR_COMMAND_WORD));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d logic.execute(\"n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_abortCommand_validTest2() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        logic.execute(CLEAR_COMMAND_WORD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_CONFIRMATION_CANCEL"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + String.format(\"\\\"%s\\\"\", CLEAR_COMMAND_WORD));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d logic.execute(LIST_COMMAND_WORD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_confirmCommand_validTest() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_NO_CONFIRMATION);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        logic.execute(CLEAR_COMMAND_WORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        logic.execute(YES_COMMAND_WORD);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d logic.execute(YES_COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_requiresStallClear_validTest() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_CLEAR_CONFIRMATION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d logic.execute(CLEAR_COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_requiresStallDelete_validTest() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.addModule(CS2103T);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_DELETE_CONFIRMATION + CS2103T);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d logic.execute(DELETE_COMMAND_WORD + \" \" + CS2103T.getModuleCode());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static class JsonGradPadIoExceptionThrowingStub extends JsonGradPadStorage {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        private JsonGradPadIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "mhdsyfq": 10,
      "-": 128,
      "yan-soon": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ModuleInfoSearcherTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.NusmodsDataManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.NusmodsDataManagerTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Contains integration tests for {@code ModuleInfoSearcher}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleInfoSearcherTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X \u003d \"src/test/resources/NusmodsDataManagerTest/CS1010X.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private ModuleInfoSearcher moduleInfoSearcher \u003d new ModuleInfoSearcher();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_empty_module() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String emptyModule \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_EMPTY_SEARCH, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e moduleInfoSearcher.searchModule(emptyModule));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_false_module() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String falseModule \u003d \"AA0000\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(CommandException.class, String.format(Messages.MESSAGE_FAILED_TO_FIND_MODULE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                falseModule), () -\u003e moduleInfoSearcher.searchModule(falseModule));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_success() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String moduleCode \u003d \"CS1010X\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo actualModuleInfo \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            actualModuleInfo \u003d moduleInfoSearcher.searchModule(moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(actualModuleInfo, cs1010x);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_failed_throwsNusmodsException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        NusmodsDataManager stubManager \u003d NusmodsDataManagerTest.getStubManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfoSearcher moduleInfoSearcherStub \u003d new ModuleInfoSearcher(stubManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e moduleInfoSearcherStub.searchModule(\"CS2103T\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static class ModuleInfoSearcherStub extends ModuleInfoSearcher {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public ModuleInfo searchModule(String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new CommandException(\"stub exception message\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 58,
      "silvernitro": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_newModule_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandSuccess(new AddCommand(validModule), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String.format(MESSAGE_ADD_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleInList \u003d model.getGradPad().getModuleList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandFailure(new AddCommand(moduleInList), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_DUPLICATE_MODULE, moduleInList.getModuleCode()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 5,
      "-": 32,
      "yan-soon": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(String.format(MESSAGE_ADD_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validModule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(CommandException.class, String.format(MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            validModule.getModuleCode()), () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module cs1231 \u003d new ModuleBuilder().withCode(\"CS1231\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module cs1101s \u003d new ModuleBuilder().withCode(\"CS1101S\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        AddCommand addCS1231Command \u003d new AddCommand(cs1231);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        AddCommand addCS1101SCommand \u003d new AddCommand(cs1101s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(addCS1231Command.equals(addCS1231Command));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        AddCommand addCS1231CommandCopy \u003d new AddCommand(cs1231);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(addCS1231Command.equals(addCS1231CommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(addCS1231Command.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(addCS1231Command.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(addCS1231Command.equals(addCS1101SCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public void setGradPadFilePath(Path gradPadFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void setGradPad(ReadOnlyGradPad newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return new GradPad();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 7,
      "mhdsyfq": 14,
      "-": 141,
      "yan-soon": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CheckMcCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CHECKMC_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTotalMc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class CheckMcCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_checkmc_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // with modules"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new CheckMcCommand(), model, String.format(MESSAGE_CHECKMC_SUCCESS,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                getTypicalTotalMc()), expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // no modules"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new CheckMcCommand(), new ModelManager(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_CHECKMC_SUCCESS, 0.0), new ModelManager());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_emptyGradPad_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_nonEmptyGradPad_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel.setGradPad(new GradPad());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void requiresStall_validTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ClearCommand testCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(testCommand.requiresStall());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 3,
      "-": 23,
      "yan-soon": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void isExitMethod_validTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult testCommandResult \u003d new CommandResult(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(testCommandResult.isExit());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "-": 46,
      "yan-soon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALID_CODE_CS3216 \u003d \"CS3216\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String VALID_TITLE_CS2103T \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String VALID_TITLE_CS3216 \u003d \"Software Product Engineering for Digital Markets\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_CREDITS_CS2103T \u003d \"4\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALID_CREDITS_CS3216 \u003d \"5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALID_TAG_NON_CORE \u003d \"nonCore\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_TAG_CORE \u003d \"core\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CODE_DESC_CS2103T \u003d \" \" + VALID_CODE_CS2103T;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CODE_DESC_CS2103T_WITH_PREFIX \u003d \" \" + PREFIX_CODE + VALID_CODE_CS2103T;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CODE_DESC_CS3216 \u003d \" \" + VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String CODE_DESC_CS3216_WITH_PREFIX \u003d \" \" + PREFIX_CODE + VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TAG_DESC_CORE \u003d \" \" + PREFIX_TAG + VALID_TAG_CORE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TAG_DESC_NON_CORE \u003d \" \" + PREFIX_TAG + VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String INVALID_CODE_DESC \u003d \" \" + \"CS1231\u0026\"; // \u0027\u0026\u0027 not allowed in codes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String INVALID_CODE_DESC_WITH_PREFIX \u003d \" \" + PREFIX_CODE + \"CS1231\u0026\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String INVALID_CODE \u003d \"CS1231\u0026\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"core*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String INVALID_TAG \u003d \"core*\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final EditCommand.EditModuleDescriptor DESC_CS2103T;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final EditCommand.EditModuleDescriptor DESC_CS3216;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DESC_CS2103T \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleTitle(VALID_TITLE_CS2103T).withModularCredits(VALID_CREDITS_CS2103T)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DESC_CS3216 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleTitle(VALID_TITLE_CS3216).withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * - the GradPad, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad expectedGradPad \u003d new GradPad(actualModel.getGradPad());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(expectedGradPad, actualModel.getGradPad());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * {@code model}\u0027s GradPad."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final String[] splitName \u003d module.getModuleCode().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 13,
      "silvernitro": 4,
      "mhdsyfq": 17,
      "-": 71,
      "yan-soon": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void execute_validModuleCodeUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                .filter(module -\u003e module.getModuleCode().equals(CODE_FIRST_MODULE)).findFirst().get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void execute_invalidModuleCodeUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode invalidModuleCode \u003d new ModuleCode(\"AA0000\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(invalidModuleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertCommandFailure(deleteCommand, model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_MODULE, invalidModuleCode.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(CODE_SECOND_MODULE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 18,
      "mhdsyfq": 2,
      "-": 55,
      "yan-soon": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ALL_EDIT_FIELDS_SAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS3216;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS3216;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(CODE_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module moduleToEdit \u003d getModuleFromModel(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode moduleCodeLastModule \u003d CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module lastModule \u003d getModuleFromFilteredList(moduleCodeLastModule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleBuilder moduleInList \u003d new ModuleBuilder(lastModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d moduleInList.withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleCode(VALID_CODE_CS3216).withModuleTitle(VALID_TITLE_CS3216)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModularCredits(VALID_CREDITS_CS3216).withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(moduleCodeLastModule, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, lastModule, editedModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.setModule(lastModule, editedModule);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_noFieldSpecified_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(CODE_FIRST_MODULE, new EditModuleDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_ALL_EDIT_FIELDS_SAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_allFieldsNoChange_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module moduleInList \u003d getModuleFromModel(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // only module code is \"edited\", but it\u0027s actually the same as the original"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editCommand \u003d new EditCommand(CODE_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_ALL_EDIT_FIELDS_SAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // only tags are \"edited\", but it\u0027s actually the same as the original"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editCommand \u003d new EditCommand(CODE_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_ALL_EDIT_FIELDS_SAME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // module code AND tags are \"edited\", but they are all the same as the original"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder(moduleInList).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editCommand \u003d new EditCommand(CODE_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_ALL_EDIT_FIELDS_SAME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module moduleInFilteredList \u003d getModuleFromFilteredList(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(moduleInFilteredList)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(CODE_FIRST_MODULE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new EditModuleDescriptorBuilder().withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_SUCCESS, moduleInFilteredList, editedModule);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedModel.setModule(moduleInFilteredList, editedModule);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module firstModule \u003d getModuleFromFilteredList(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(CODE_SECOND_MODULE, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandFailure(editCommand, model, String.format(MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            firstModule.getModuleCode()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModuleFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // edit module in filtered list into a duplicate in GradPad"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module moduleInList \u003d getModuleFromModel(CODE_SECOND_MODULE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(CODE_FIRST_MODULE,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new EditModuleDescriptorBuilder(moduleInList).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandFailure(editCommand, model, String.format(MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            moduleInList.getModuleCode()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_moduleNotYetAddedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode moduleNotYetAdded \u003d new ModuleCode(\"CS2108\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(moduleNotYetAdded, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandFailure(editCommand, model, String.format(MESSAGE_INVALID_MODULE,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            moduleNotYetAdded));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Edit filtered list where module code does exists in NUSMods but not yet added into GradPad."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_moduleNotYetAddedFilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode moduleNotYetAdded \u003d new ModuleCode(\"CS2108\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(moduleNotYetAdded,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216).build());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandFailure(editCommand, model, String.format(MESSAGE_INVALID_MODULE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            moduleNotYetAdded));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(CODE_FIRST_MODULE, DESC_CS2103T);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor(DESC_CS2103T);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(CODE_FIRST_MODULE, copyDescriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(CODE_SECOND_MODULE, DESC_CS2103T)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(CODE_FIRST_MODULE, DESC_CS3216)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Module getModuleFromModel(ModuleCode code) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return model.getGradPad().getModuleList().stream()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                .filter(x -\u003e x.getModuleCode().equals(code)).findFirst().get();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Module getModuleFromFilteredList(ModuleCode code) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       .filter(x -\u003e x.getModuleCode().equals(code)).findFirst().get();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "silvernitro": 39,
      "mhdsyfq": 53,
      "-": 90,
      "yan-soon": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptorWithSameValues \u003d new EditModuleDescriptor(DESC_CS2103T);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(DESC_CS2103T.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(DESC_CS2103T.equals(DESC_CS2103T));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(DESC_CS3216));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor editedCS2103T \u003d new EditModuleDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .withModuleCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different credits -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        editedCS2103T \u003d new EditModuleDescriptorBuilder(DESC_CS2103T).withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        editedCS2103T \u003d new EditModuleDescriptorBuilder(DESC_CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 7,
      "-": 26,
      "yan-soon": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULES_FOUND_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.CompoundFindPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_zeroKeywords_noModuleFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_FOUND_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CompoundFindPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_multipleModuleCodes_multipleModulesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_FOUND_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CompoundFindPredicate predicate \u003d preparePredicate(\"CS2103T CS3216\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, CS3216), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_oneTagKeyword_oneModuleFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_FOUND_OVERVIEW, 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CompoundFindPredicate predicate \u003d preparePredicate(VALID_TAG_NON_CORE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(Collections.singletonList(CS3216), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_oneCapitalizedTagKeyword_oneModuleFound() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_FOUND_OVERVIEW, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CompoundFindPredicate predicate \u003d preparePredicate(VALID_TAG_NON_CORE.toUpperCase());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(Collections.singletonList(CS3216), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_tagAndModuleCodeKeywords_multipleModulesFound() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_FOUND_OVERVIEW, 2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CompoundFindPredicate predicate \u003d preparePredicate(VALID_TAG_CORE + \" CS3216\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, CS3216), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Parses {@code userInput} into a {@code ModuleCodeContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private CompoundFindPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new CompoundFindPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "silvernitro": 33,
      "mhdsyfq": 7,
      "-": 59,
      "yan-soon": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ForceClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ForceClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_emptyGradPad_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new ForceClearCommand(), model, MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_nonEmptyGradPad_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedModel.setGradPad(new GradPad());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new ForceClearCommand(), model, MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void requiresStall() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceClearCommand forceClearCommand \u003d new ForceClearCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(forceClearCommand.requiresStall());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ForceDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * {@code ForceDeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ForceDeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_validModuleCodeUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .filter(module -\u003e module.getModuleCode().equals(CODE_FIRST_MODULE)).findFirst().get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceDeleteCommand forceDeleteCommand \u003d new ForceDeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(forceDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_invalidModuleCodeUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode invalidModuleCode \u003d new ModuleCode(\"AA0000\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceDeleteCommand forceDeleteCommand \u003d new ForceDeleteCommand(invalidModuleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandFailure(forceDeleteCommand, model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_MODULE, invalidModuleCode.toString()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceDeleteCommand forceDeleteFirstCommand \u003d new ForceDeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceDeleteCommand forceDeleteSecondCommand \u003d new ForceDeleteCommand(CODE_SECOND_MODULE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(forceDeleteFirstCommand, forceDeleteFirstCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceDeleteCommand forceDeleteFirstCommandCopy \u003d new ForceDeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(forceDeleteFirstCommand, forceDeleteFirstCommandCopy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertNotEquals(1, forceDeleteFirstCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertNotEquals(null, forceDeleteFirstCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertNotEquals(forceDeleteFirstCommand, forceDeleteSecondCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void requiresStall() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ForceDeleteCommand forceDeleteCommand \u003d new ForceDeleteCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(forceDeleteCommand.requiresStall());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.LINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GEM_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.RequiredCommandTest.MISSING_MODULE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.RequiredCommandTest.SINGLE_MODULE_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GEH_SEM1_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GEQ_PATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GER_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GES_SEM1_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.storage.GemCommandPaths.GET_SEM1_PATH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.GemCommandStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GemCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GEH_PATH_1 \u003d Paths.get(\"src/main/resources/data/GEM/GEHsem1.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GET_PATH_1 \u003d Paths.get(\"src/main/resources/data/GEM/GETsem1.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GES_PATH_1 \u003d Paths.get(\"src/main/resources/data/GEM/GESsem1.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GEH_PATH_2 \u003d Paths.get(\"src/main/resources/data/GEM/GEHsem2.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GET_PATH_2 \u003d Paths.get(\"src/main/resources/data/GEM/GETsem2.json\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GES_PATH_2 \u003d Paths.get(\"src/main/resources/data/GEM/GESsem2.json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GEQ_PATH_1 \u003d Paths.get(\"src/main/resources/data/GEM/GEQ.json\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path GER_PATH_1 \u003d Paths.get(\"src/main/resources/data/GEM/GER.json\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final Path TEST_GEH_SEM1_PATH \u003d Paths.get(\"src/main/resources/data/GEM/GEHsem1.json\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path TEST_GEH_SEM2_PATH \u003d Paths.get(\"src/main/resources/data/GEM/GEHsem2.json\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private GemCommand gemCommand \u003d new GemCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private GemCommandStorage storage \u003d new GemCommandStorage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e testModules;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpTestModules(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getSem1Storage_validTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GemCommandStorage actual \u003d gemCommand.getSem1Storage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getSem2Storage_validTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GemCommandStorage actual \u003d gemCommand.getSem2Storage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setSem1Storage_validTest() throws IOException, DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(TEST_GEH_SEM1_PATH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gemCommand.setSem1Storage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GemCommandStorage storage \u003d gemCommand.getSem1Storage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGehModules();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(testModules, actual);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setSem2Storage_validTest() throws IOException, DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(TEST_GEH_SEM2_PATH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gemCommand.setSem2Storage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GemCommandStorage storage \u003d gemCommand.getSem2Storage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGehModules();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(testModules, actual);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e gemCommand.execute(model));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d MESSAGE_GEM_SUCCESS + \"\\n\\n\" + \"Semester 1:\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GEH_PATH_1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nHuman Cultures\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GET_PATH_1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nThinking and Expression\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GES_PATH_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nSingapore Studies\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GEQ_PATH_1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nAsking Questions\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GER_PATH_1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nQuantitative Reasoning\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\n\" + LINE + \"Semester 2:\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GEH_PATH_2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nHuman Cultures\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GET_PATH_2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nThinking and Expression\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GES_PATH_2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nSingapore Studies\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GEQ_PATH_1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nAsking Questions\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GER_PATH_1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedMessage +\u003d \"\\n\\nQuantitative Reasoning\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d gemCommand.execute(model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void moduleExtractor_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(SINGLE_MODULE_PATH);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"\\n\" + MISSING_MODULE_1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        StringBuilder temp \u003d gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d \"\" + temp;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void getCompiledModules_validTest() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d gemCommand.getCompiledModules();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void setCompiledModules_invalidTest() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e gemCommand.setCompiledModules(storage, model));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void setCompiledModules_validTest() throws IOException, IllegalValueException, DataConversionException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d MESSAGE_GEM_SUCCESS + \"\\n\\n\" + \"Semester 1:\" + \"\\n\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GEH_PATH_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expected +\u003d \"Human Cultures\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GET_PATH_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expected +\u003d \"\\n\\nThinking and Expression\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GES_PATH_1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expected +\u003d \"\\n\\nSingapore Studies\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GEQ_PATH_1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expected +\u003d \"\\n\\nAsking Questions\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setUpTestModules(GER_PATH_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expected +\u003d \"\\n\\nQuantitative Reasoning\\n\" + gemCommand.moduleExtractor(testModules, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.setGehModules(GEH_SEM1_PATH);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.setGeqModules(GEQ_PATH);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.setGerModules(GER_PATH);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.setGesModules(GES_SEM1_PATH);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.setGetModules(GET_SEM1_PATH);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        gemCommand.setCompiledModules(storage, model);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d MESSAGE_GEM_SUCCESS + \"\\n\\nSemester 1:\\n\\n\" + gemCommand.getCompiledModules();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 101,
      "yan-soon": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LIST_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, MESSAGE_LIST_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, MESSAGE_LIST_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 3,
      "-": 31,
      "yan-soon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RequiredCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FAILURE_GE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FAILURE_GE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FOUNDATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SCIENCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_FOUNDATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_GE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_ITPROF;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_MATH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_SCIENCE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandStorageTest.TEST_FOUNDATION_PATH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandStorageTest.TEST_SCIENCE_PATH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.RequiredCommandStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path COMPILED_PATH \u003d Paths.get(\"src/test/data/RequiredCommandTest/compiledmodules.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path INCOMPLETE_FOUNDATION_PATH \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Paths.get(\"src/test/data/RequiredCommandTest/incompletefoundationmodules.json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path SINGLE_MODULE_PATH \u003d Paths.get(\"src/test/data/RequiredCommandTest/singlemodule.json\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path DOUBLE_MODULE_PATH \u003d Paths.get(\"src/test/data/RequiredCommandTest/doublemodules.json\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MISSING_MODULE_1 \u003d \"CS1101S\\tProgramming Methodology (4 MCs)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MISSING_MODULE_2 \u003d \"CS1231S\\tDiscrete Structures (4 MCs)\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INTERN_TEST \u003d \" You are currently at 4 MCs. \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private RequiredCommand requiredCommand \u003d new RequiredCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e testModules;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpTestModules(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUp() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(COMPILED_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.setGradPad(gradPad);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getLeftOverModules_validTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(\"\", actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getStorage_validTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        RequiredCommandStorage actual \u003d requiredCommand.getStorage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setStorage_validTest() throws IOException, DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setStorage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        RequiredCommandStorage storage \u003d requiredCommand.getStorage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(testModules, actual);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getCurrentModules_validTest() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredCommand.getCurrentModules();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setCurrentModules_validTest() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(requiredCommand.getCurrentModules());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareModules_validTest() throws IOException, DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(INCOMPLETE_FOUNDATION_PATH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setStorage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareModules(testModules, MESSAGE_FOUNDATION, MESSAGE_SUCCESS_FOUNDATION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_FOUNDATION + \"\\n\" + MISSING_MODULE_1 + \"\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareScience_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(INCOMPLETE_FOUNDATION_PATH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_SCIENCE_PATH));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareScience(testModules);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_SCIENCE + \"\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareInternship_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(SINGLE_MODULE_PATH);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(DOUBLE_MODULE_PATH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareInternship(testModules);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_INTERN_1 + MESSAGE_INTERN_TEST + MESSAGE_INTERN_2 + \"\\n\" + MISSING_MODULE_2;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void isGePresent_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(SINGLE_MODULE_PATH);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(requiredCommand.isGePresent(\"GEH\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareAllGEs_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedUncompletedGEs \u003d \"\\n\" + \"GEH\" + \"\\n\" + \"GEQ\" + \"\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + \"GER\" + \"\\n\" + \"GES\" + \"\\n\" + \"GET\" + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_FAILURE_GE_1 + expectedUncompletedGEs + MESSAGE_FAILURE_GE_2 + \"\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(SINGLE_MODULE_PATH);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareAllGEs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requiredCommand.execute(model));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d \"\" + MESSAGE_SUCCESS_GE + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_FOUNDATION + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + MESSAGE_SUCCESS_ITPROF + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_MATH"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_SCIENCE + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d requiredCommand.execute(model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "yan-soon": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScienceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SCIENCE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandStorageTest.TEST_SCIENCE_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ScienceCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String INVALID_PATH \u003d \"data/science.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ScienceCommand scienceCommand \u003d new ScienceCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private String moduleNames \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUp() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(Paths.get(TEST_SCIENCE_PATH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e modules \u003d storage.readGradPad().get().getModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String moduleToAdd \u003d module.getModuleCode() + \"\\t\" + module.getModuleTitle()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleNames +\u003d modulesToAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void validGetScienceModulesTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e empty \u003d scienceCommand.getScienceModules();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e scienceCommand.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e scienceCommand.setScienceModules(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void validPathExecuteScienceCommand_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_SCIENCE_SUCCESS + \"\\n\" + moduleNames);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d scienceCommand.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setScienceModulesInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e scienceCommand.setScienceModules(INVALID_PATH));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setScienceModulesValidPath_returnsFilledOptional() throws IOException,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage expectedJsonStorage \u003d new JsonGradPadStorage(Paths.get(TEST_SCIENCE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e expectedGradPad \u003d expectedJsonStorage.readGradPad();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d expectedGradPad.get().getModuleList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        scienceCommand.setScienceModules(SCIENCE_PATH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d scienceCommand.getScienceModules();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(actual, expected);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 5,
      "yan-soon": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SEARCH_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X \u003d \"src/test/resources/NusmodsDataManagerTest/CS1010X.json\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(CODE_SECOND_MODULE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(searchFirstCommand, searchFirstCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(CODE_FIRST_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(searchFirstCommand, searchFirstCommandCopy);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(1, searchFirstCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(null, searchFirstCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(searchFirstCommand, searchSecondCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void execute_invalidModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode invalidModuleCode \u003d new ModuleCode(\"AA0000\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchCommand \u003d new SearchCommand(invalidModuleCode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertCommandFailure(searchCommand, model,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                String.format(Messages.MESSAGE_FAILED_TO_FIND_MODULE, invalidModuleCode.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void execute_searchCommand_success() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"CS1010X\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(moduleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String expectedPreclusion \u003d Optional.ofNullable(cs1010x.getPreclusion()).orElse(\"None\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String expectedPrerequisite \u003d Optional.ofNullable(cs1010x.getPrerequisite()).orElse(\"None\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SEARCH_SUCCESS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                cs1010x.getModuleCode(), cs1010x.getModuleCredit(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                cs1010x.getTitle(), cs1010x.getDescription(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                expectedPreclusion, expectedPrerequisite, cs1010x.getSemesters());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 73,
      "silvernitro": 6,
      "mhdsyfq": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_TAGS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAGS_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class TagsCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Model modelWithTags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Model modelWithoutTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        modelWithTags \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        modelWithoutTags \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_modelWithTags_printsTags() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e tagNames \u003d modelWithTags.getGradPad().getTags().getTagNames();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d MESSAGE_TAGS_SUCCESS + String.join(\"\\n\", tagNames);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        TagsCommand tagsCommand \u003d new TagsCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // actual and expected model are the same as there should be no change"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagsCommand, modelWithTags, expectedMessage, modelWithTags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void execute_modelWithoutTags_noTagsMessage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_TAGS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        TagsCommand tagsCommand \u003d new TagsCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // actual and expected model are the same as there should be no change"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(tagsCommand, modelWithoutTags, expectedMessage, modelWithoutTags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 41,
      "mhdsyfq": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/YesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_CONFIRMATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class YesCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_validTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        YesCommand testCommand \u003d new YesCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_NO_CONFIRMATION);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d testCommand.execute(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ADD_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS3216;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CORE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcherTest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS3216).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + CODE_DESC_CS3216"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_NON_CORE, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module expectedModuleMultipleTags \u003d new ModuleBuilder(CS3216)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseSuccess(parser, CODE_DESC_CS3216"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_CORE + TAG_DESC_NON_CORE, new AddCommand(expectedModuleMultipleTags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS2103T).withTags().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseSuccess(parser, CODE_DESC_CS2103T, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_ADD_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // missing code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // missing code, with tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, TAG_DESC_CORE + TAG_DESC_NON_CORE, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, INVALID_CODE_DESC + TAG_DESC_CORE + TAG_DESC_NON_CORE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, INVALID_CODE_DESC.trim()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS3216 + INVALID_TAG_DESC + TAG_DESC_NON_CORE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_TAG, INVALID_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, INVALID_CODE_DESC + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, INVALID_CODE_DESC.trim()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void parse_moduleSearchFailure_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        parser \u003d new AddCommandParser(new ModuleInfoSearcherTest.ModuleInfoSearcherStub());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // still provide valid user input to enforce at-most-one-invalid-input heuristic"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(CODE_DESC_CS3216));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8,
      "mhdsyfq": 21,
      "-": 45,
      "yan-soon": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"cs2103t\" and \"cs2103t abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertParseSuccess(parser, \"cs2103t\", new DeleteCommand(CODE_FIRST_MODULE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_MODULE_CODE, \"A\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "mhdsyfq": 2,
      "-": 28,
      "yan-soon": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EDIT_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T_WITH_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS3216_WITH_PREFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC_WITH_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CORE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS2103T;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS2103T;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2103T;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS3216;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_THIRD_MODULE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcherTest;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_EDIT_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // no module code to edit specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2103T_WITH_PREFIX, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2103T, MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // module code invalid format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"c2222\" + CODE_DESC_CS2103T_WITH_PREFIX,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, \"C2222\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100 some random string\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, \"CS2100 SOME RANDOM STRING\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100 i/ string\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, \"CS2100 I/ STRING\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + INVALID_CODE_DESC_WITH_PREFIX,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, INVALID_CODE)); // invalid code"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_TAG, INVALID_TAG)); // invalid tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // valid code followed by invalid code. The test case for invalid code followed by valid code"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + CODE_DESC_CS2103T_WITH_PREFIX + INVALID_CODE_DESC_WITH_PREFIX,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, INVALID_CODE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Module} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + TAG_DESC_CORE + TAG_DESC_NON_CORE + TAG_EMPTY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_TAG, \"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + TAG_DESC_CORE + TAG_EMPTY + TAG_DESC_NON_CORE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_TAG, \"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + TAG_EMPTY + TAG_DESC_CORE + TAG_DESC_NON_CORE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_TAG, \"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"cs2100\" + INVALID_CODE_DESC_WITH_PREFIX + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String.format(MESSAGE_INVALID_MODULE_CODE, INVALID_CODE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode targetCode \u003d CODE_SECOND_MODULE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String userInput \u003d targetCode + TAG_DESC_NON_CORE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + CODE_DESC_CS2103T_WITH_PREFIX;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleTitle(VALID_TITLE_CS2103T).withModularCredits(VALID_CREDITS_CS2103T)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_onlyModuleCodeSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode targetCode \u003d CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String userInput \u003d targetCode + CODE_DESC_CS2103T_WITH_PREFIX;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleCode(VALID_CODE_CS2103T).withModuleTitle(VALID_TITLE_CS2103T)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModularCredits(VALID_CREDITS_CS2103T).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_onlyTagsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // one tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode targetCode \u003d CODE_THIRD_MODULE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String userInput \u003d targetCode + TAG_DESC_CORE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // two tags"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        userInput \u003d targetCode + TAG_DESC_CORE + TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode targetCode \u003d CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String userInput \u003d targetCode + CODE_DESC_CS2103T_WITH_PREFIX + TAG_DESC_CORE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            + TAG_DESC_CORE + CODE_DESC_CS3216_WITH_PREFIX + TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .withModuleTitle(VALID_TITLE_CS3216)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode targetCode \u003d CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String userInput \u003d targetCode + INVALID_CODE_DESC_WITH_PREFIX + CODE_DESC_CS2103T_WITH_PREFIX;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleCode(VALID_CODE_CS2103T).withModuleTitle(VALID_TITLE_CS2103T)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModularCredits(VALID_CREDITS_CS2103T).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            targetCode + INVALID_CODE_DESC_WITH_PREFIX + CODE_DESC_CS2103T_WITH_PREFIX"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + TAG_DESC_CORE + TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withModuleTitle(VALID_TITLE_CS2103T).withModularCredits(VALID_CREDITS_CS2103T)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCode targetCode \u003d CODE_THIRD_MODULE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String userInput \u003d targetCode + TAG_EMPTY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetCode, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void parse_moduleSearchFailure_throwsCommandException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        parser \u003d new EditCommandParser(new ModuleInfoSearcherTest.ModuleInfoSearcherStub());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // still provide valid user input to enforce at-most-one-invalid-input heuristic"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String userInput \u003d CODE_FIRST_MODULE + CODE_DESC_CS2103T_WITH_PREFIX;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(userInput));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 12,
      "mhdsyfq": 88,
      "-": 89,
      "yan-soon": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FIND_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.CompoundFindPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_FIND_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"CS2103T\", \"CS3216\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Predicate\u003cModule\u003e expectedPredicate \u003d new CompoundFindPredicate(keywords);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(expectedPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, \"CS2103T CS3216\", expectedFindCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2103T \\n \\t CS3216  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8,
      "mhdsyfq": 2,
      "-": 28,
      "yan-soon": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ForceDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FORCE_DELETE_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.ForceDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * outside of the ForceDeleteCommand code. For example, inputs \"cs2103t\" and \"cs2103t abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ForceDeleteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private ForceDeleteCommandParser parser \u003d new ForceDeleteCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_validArgs_returnsForceDeleteCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseSuccess(parser, \"cs2103t\", new ForceDeleteCommand(CODE_FIRST_MODULE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_MODULE_CODE, \"A\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            MESSAGE_FORCE_DELETE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradPadParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.CHECKMC_COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.CLEAR_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.EDIT_COMMAND_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.EXIT_COMMAND_WORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.FIND_COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.FORCE_CLEAR_COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.FORCE_DELETE_COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.GEM_COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.LIST_COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_FIELD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.REQUIRED_COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.SCIENCE_COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.SEARCH_COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.TAGS_COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.YES_COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.CheckMcCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.ForceClearCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.ForceDeleteCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.GemCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.RequiredCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.ScienceCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.logic.commands.TagsCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.YesCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.CompoundFindPredicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPadParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final GradPadParser parser \u003d new GradPadParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ModuleUtil.getAddCommand(module));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new AddCommand(module), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(CLEAR_COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(CLEAR_COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_forceClear() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(FORCE_CLEAR_COMMAND_WORD) instanceof ForceClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(FORCE_CLEAR_COMMAND_WORD + \" 3\") instanceof ForceClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                DELETE_COMMAND_WORD + \" \" + CODE_FIRST_MODULE.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(new DeleteCommand(CODE_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_forceDelete() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ForceDeleteCommand command \u003d (ForceDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                FORCE_DELETE_COMMAND_WORD + \" \" + CODE_FIRST_MODULE.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new ForceDeleteCommand(CODE_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(module).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EDIT_COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + CODE_FIRST_MODULE + \" \" + ModuleUtil.getEditModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(new EditCommand(CODE_FIRST_MODULE, descriptor), command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(EXIT_COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(EXIT_COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                FIND_COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(new FindCommand(new CompoundFindPredicate(keywords)), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(HELP_COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(HELP_COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(LIST_COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(LIST_COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parseCommand_checkMc() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(CHECKMC_COMMAND_WORD) instanceof CheckMcCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(CHECKMC_COMMAND_WORD + \" 3\") instanceof CheckMcCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void parseCommand_tags() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(TAGS_COMMAND_WORD) instanceof TagsCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(TAGS_COMMAND_WORD + \" 3\") instanceof TagsCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                SEARCH_COMMAND_WORD + \" \" + CODE_FIRST_MODULE.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new SearchCommand(CODE_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_required() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(REQUIRED_COMMAND_WORD) instanceof RequiredCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(REQUIRED_COMMAND_WORD + \" 3\") instanceof RequiredCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_science() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(SCIENCE_COMMAND_WORD) instanceof ScienceCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(SCIENCE_COMMAND_WORD + \" 3\") instanceof ScienceCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_gem() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(GEM_COMMAND_WORD) instanceof GemCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(GEM_COMMAND_WORD + \" 3\") instanceof GemCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCommand_yes() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(YES_COMMAND_WORD) instanceof YesCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(parser.parseCommand(YES_COMMAND_WORD + \" 3\") instanceof YesCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_EMPTY_FIELD, ()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 8,
      "silvernitro": 7,
      "mhdsyfq": 33,
      "-": 69,
      "yan-soon": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS23!3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CREDITS \u003d \"4!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CODE \u003d \"CS1231\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CREDITS \u003d \"4\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"core\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"nonCore\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_LOWERCASE_TAG \u003d \"foundation\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_UPPERCASE_TAG \u003d \"FOUNDATION\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_CODE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCode_validValueWithoutWhitespace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCode expectedCode \u003d new ModuleCode(VALID_CODE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseModuleCode(VALID_CODE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parseCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String moduleCodeWithWhitespace \u003d WHITESPACE + VALID_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCode expectedCode \u003d new ModuleCode(VALID_CODE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseModuleCode(moduleCodeWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModularCredits((String) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_validValueWithoutWhitespace_returnCredits() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModularCredits expectedCredits \u003d new ModularCredits(VALID_CREDITS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseModularCredits(VALID_CREDITS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_validValueWithWhitespace_returnsTrimmedCredits() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String creditsWithWhitespace \u003d WHITESPACE + VALID_CREDITS + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModularCredits expectedCredits \u003d new ModularCredits(VALID_CREDITS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseModularCredits(creditsWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void parseTags_collectionWithDuplicateLettercaseTags_tagSetOnlyIncludesFirst() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_LOWERCASE_TAG, VALID_UPPERCASE_TAG));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Collections.singletonList(new Tag(VALID_LOWERCASE_TAG)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 10,
      "mhdsyfq": 4,
      "-": 108,
      "yan-soon": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SEARCH_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CODE_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "class SearchCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_SEARCH_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertParseSuccess(parser, \"cs2103t\", new SearchCommand(CODE_FIRST_MODULE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2103T \\n\", new SearchCommand(CODE_FIRST_MODULE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 27,
      "mhdsyfq": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/GradPadTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.UniqueTagMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPadTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final GradPad gradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(Collections.emptyList(), gradPad.getModuleList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e gradPad.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData_withValidReadOnlyGradPad_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad newData \u003d getTypicalGradPad();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(newData, gradPad);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // Two modules with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module editedCS3216 \u003d new ModuleBuilder(CS3216).withCode(VALID_CODE_CS3216)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216).withTags(VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS3216, editedCS3216);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPadStub newData \u003d new GradPadStub(newModules);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(DuplicateModuleException.class, () -\u003e gradPad.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e gradPad.hasModule(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleNotInGradPad_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(gradPad.hasModule(CS2103T));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleInGradPad_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.addModule(CS2103T);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(gradPad.hasModule(CS2103T));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test // Still needs changing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInGradPad_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.addModule(CS2103T);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(gradPad.hasModule(editedModule));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(UnsupportedOperationException.class, () -\u003e gradPad.getModuleList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void hashCode_validTest() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        UniqueModuleList testModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int expected \u003d testModuleList.hashCode();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int actual \u003d gradPad.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * A stub ReadOnlyGradPad whose modules list can violate interface constraints."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static class GradPadStub implements ReadOnlyGradPad {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        private final UniqueTagMap tags \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPadStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public UniqueTagMap getTags() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 104,
      "silvernitro": 7,
      "yan-soon": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.testutil.GradPadBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(new GradPad(), new GradPad(modelManager.getGradPad()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        userPrefs.setGradPadFilePath(Paths.get(\"gradpad/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        userPrefs.setGradPadFilePath(Paths.get(\"new/gradpad/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.setGradPadFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath_validPath_setsGradPadFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Path path \u003d Paths.get(\"gradpad/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.setGradPadFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(path, modelManager.getGradPadFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleNotInGradPad_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleInGradPad_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.addModule(CS2103T);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Assertions.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad gradPad \u003d new GradPadBuilder().withModule(CS2103T).withModule(CS3216).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad differentGradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager \u003d new ModelManager(gradPad, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(gradPad, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different gradPad -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentGradPad, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String[] keywords \u003d { CS2103T.getModuleCode().moduleCode };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.updateFilteredModuleList(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(gradPad, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        differentUserPrefs.setGradPadFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(gradPad, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 35,
      "mhdsyfq": 4,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final UserPrefs testUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGradPadFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setGradPadFilePath(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void equalsMethod_sameObjectTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(testUserPrefs.equals(testUserPrefs));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void equalsMethod_differentObjectTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad testGradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(testUserPrefs.equals(testGradPad));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void hashCode_validTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GuiSettings testGuiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path testPath \u003d Paths.get(\"data\" , \"gradpad.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int expected \u003d Objects.hash(testGuiSettings, testPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int actual \u003d testUserPrefs.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 22,
      "yan-soon": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModularCreditsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModularCreditsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModularCredits(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModularCredits mc1 \u003d new ModularCredits(\"1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModularCredits mc2 \u003d new ModularCredits(\"2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(mc1.hashCode(), mc1.hashCode());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(mc1.hashCode(), mc2.hashCode());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 10,
      "silvernitro": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleCodeContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCodeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"2100\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2100\", \"3216\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate firstPredicate \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate secondPredicate \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate firstPredicateCopy \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void test_moduleCodeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS2100\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"CS2103T\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS2100\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"cS2100\", \"Cs2103T\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void test_moduleCodeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS2100\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"2100\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Keywords match MCs and tags, but does not match code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"4\", \"core\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS2103T\").withModularCredits(\"4\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                           .withTags(\"core\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 68,
      "mhdsyfq": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"2100t\")); // no module prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"abcd\")); // no digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"c2100\")); // only 1-letter prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"c  2100\")); // only 1-letter prefix but has spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2100*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs 2100 T\")); // contains spaces within"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // valid module code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"cs2100\")); // 2-letter prefix followed by digits"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2100\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\")); // with 1-letter suffix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GER1000\")); // 3-letter prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GER1000H\")); // 3-letter prefix with 1-letter suffix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode code1 \u003d new ModuleCode(\"cs2100\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleCode code2 \u003d new ModuleCode(\"CS2100\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(code1.hashCode(), code1.hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(code1.hashCode(), code2.hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 10,
      "silvernitro": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(CS2103T.isSameModule(CS2103T));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.isSameModule(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // different MCs -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same code, same MCs, different tags -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // same code, different MCs, different tags -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                              .withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module cs2103tCopy \u003d new ModuleBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(CS2103T.equals(cs2103tCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(CS3216));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different MCs -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same Module -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(CS2103T.hashCode(), CS2103T.hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module cs2103tCopy \u003d new ModuleBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(CS2103T.hashCode(), cs2103tCopy.hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different module -\u003e return false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(CS2103T.hashCode(), CS3216.hashCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(CS2103T.hashCode(), editedCS2103T.hashCode());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 19,
      "silvernitro": 74,
      "mhdsyfq": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ModuleTitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleTitle(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleTitle title1 \u003d new ModuleTitle(\"cs2100\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleTitle title2 \u003d new ModuleTitle(\"CS2100\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(title1.hashCode(), title1.hashCode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(title1.hashCode(), title2.hashCode());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 9,
      "mhdsyfq": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_moduleWithSameFieldsExceptTagsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(uniqueModuleList.contains(editedCS2103T));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(CS2103T));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, CS2103T));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(CS2103T, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(CS2103T, CS2103T));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, editedCS2103T);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(editedCS2103T);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS3216);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueIdentity_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModule(CS2103T, CS3216));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(CS2103T));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.remove(CS2103T);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(CS3216);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same list -\u003e return true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(uniqueModuleList.hashCode(), uniqueModuleList.hashCode());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different items in list -\u003e return false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(uniqueModuleList.hashCode(), new UniqueModuleList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same items in list -\u003e return true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        UniqueModuleList newList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        newList.add(CS2103T);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(uniqueModuleList.hashCode(), newList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 16,
      "silvernitro": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_validTagName_tagWithDefaultModuleCount() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String expectedTagName \u003d \"core\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        int expectedModuleCount \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag actualTag \u003d new Tag(expectedTagName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedTagName, actualTag.tagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedModuleCount, actualTag.getModuleCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null name --\u003e throw NPE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // single word with letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"core\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // multiword with letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"core module\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // single word with number"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"core1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // uppercase letter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"Core\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // empty name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // only whitespace"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"  \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // multiword with extra space in between"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"core   module\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void moduleCount() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag tag \u003d new Tag(\"core\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // module count: 1 --\u003e 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tag.decrementModuleCount();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(0, tag.getModuleCount());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(tag.isEmpty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // module count: 0 --\u003e 1"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tag.incrementModuleCount();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(1, tag.getModuleCount());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag tag1 \u003d new Tag(\"core\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null --\u003e false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(tag1.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different types --\u003e false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(tag1.equals(\"core\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object --\u003e true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(tag1.equals(tag1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different object, same tagName --\u003e true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(tag1.equals(new Tag(\"core\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different object, same tagName, different moduleCount --\u003e true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag tag2 \u003d new Tag(\"core\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tag2.incrementModuleCount();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(tag1.equals(tag2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different object, different tagName --\u003e false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(tag1.equals(new Tag(\"notCore\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag tag1 \u003d new Tag(\"core\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag tag2 \u003d new Tag(\"notCore\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object --\u003e same hashcode"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(tag1.hashCode(), tag1.hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different object, same tagName --\u003e same hashcode"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(tag1.hashCode(), new Tag(\"core\").hashCode());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //different object, different tagName --\u003e different hashcode"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertNotEquals(tag1.hashCode(), tag2.hashCode());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 82,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueTagMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class UniqueTagMapTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TEST_EMPTY_TAG_MAP \u003d \"{}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void checkAndReplaceTags_emptySet_noChange() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(map.getTagNames().isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void checkAndReplaceTags_newDistinctTag_populatesMap() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagSet.add(new Tag(\"core\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(tagSet);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e actualNames \u003d map.getTagNames();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e expectedNames \u003d Collections.singletonList(\"core\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedNames, actualNames);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void checkAndReplaceTags_existingTag_notAdded() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagSet.add(new Tag(\"core\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(tagSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Add a tag with duplicate tagName"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e duplicateTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        duplicateTagSet.add(new Tag(\"core\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(duplicateTagSet);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e actualNames \u003d map.getTagNames();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // there should only be one name, i.e. duplicates aren\u0027t added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e expectedNames \u003d Collections.singletonList(\"core\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedNames, actualNames);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_emptySet_noChange() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // set up and populate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagSet.add(new Tag(\"core\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // empty set"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.remove(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e actualNames \u003d map.getTagNames();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e expectedNames \u003d Collections.singletonList(\"core\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedNames, actualNames);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_tagWithMoreThanOneModule_moduleCountDecreased() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // set up and populate"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Tag tag \u003d new Tag(\"core\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tag.incrementModuleCount();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagSet.add(tag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(tagSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.remove(tagSet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // tag should still remain in map"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e actualNames \u003d map.getTagNames();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e expectedNames \u003d Collections.singletonList(\"core\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedNames, actualNames);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // tag\u0027s moduleCount should be decremented"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(1, tag.getModuleCount());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_tagWithOnlyOneModule_tagRemoved() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // set up and populate"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagSet.add(new Tag(\"core\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.remove(tagSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // tag should be removed from map"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(map.getTagNames().isEmpty());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setTags_nonEmptyUniqueTagMap_tagsReplaced() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // set up and populate"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap map \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tagSet.add(new Tag(\"core\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.checkAndReplaceTags(tagSet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueTagMap replacement \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Set\u003cTag\u003e replacementSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        replacementSet.add(new Tag(\"nonCore\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        replacement.checkAndReplaceTags(replacementSet);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        map.setTags(replacement);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(replacement.getTagNames(), map.getTagNames());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toStringMethod_validTest() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        UniqueTagMap testMap \u003d new UniqueTagMap();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(testMap.toString(), TEST_EMPTY_TAG_MAP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 116,
      "yan-soon": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/SampleDataUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class SampleDataUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TEST_SAMPLE_MODULES_PATH \u003d \"src/test/data/SampleDataUtilTest/samplemodules.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getSampleGradPad_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage testGradPad \u003d new JsonGradPadStorage(Paths.get(TEST_SAMPLE_MODULES_PATH));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad expected \u003d testGradPad.readGradPad().get();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad actual \u003d SampleDataUtil.getSampleGradPad();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/DataFetcherManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.HttpUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class DataFetcherManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String TEST_SAVE_FILE_PATH \u003d \"src/test/resources/NusmodsDataManagerTest/saveModulesTest.json\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String MODULE_TEST_FILE_PATH \u003d \"src/test/resources/NusmodsDataManagerTest/validModule.json\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String INVALID_MODULE_TEST_FILE_PATH \u003d \"src/test/resources/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                        + \"/invalidModule.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_MODULE_SUMMARIES_TEST_FILE_PATH \u003d \"src/test/resources/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                + \"/validSummaries.json\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X_MODULE_INFO \u003d \"src/test/resources/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                + \"/CS1010X.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String IS1103_MODULE_INFO \u003d \"src/test/resources/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                + \"/IS1103.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private DataFetcherManager manager \u003d new DataFetcherManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_defaultWithNoArgs_defaultFilePathUsed() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(DataFetcher.SAVE_DATA_FILE_PATH, manager.getDataFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchModuleInfo_validModuleCode_validModuleInfo() throws NusmodsException, DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e actualInfo \u003d manager.fetchModuleInfo(\"CS2103T\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedInfo \u003d JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                          ModuleInfo.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualInfo.isPresent() \u0026\u0026 expectedInfo.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(expectedInfo.get(), actualInfo.get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchModuleInfo_invalidModuleInfoReceived_throwsNusmodsException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new InvalidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e manager.fetchModuleInfo(\"CS2103T\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void filterModuleSummaries_filterByCs_removesIs1103Module() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e actualFilteredList \u003d manager.filterModuleSummaries(summaryList, \"CS\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e expectedFilteredList \u003d summaryList.subList(1, 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedFilteredList, actualFilteredList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void filterModuleSummaries_filterByCsAndIs_noModulesRemoved() throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e actualFilteredList \u003d manager.filterModuleSummaries(summaryList, \"CS\", \"IS1103\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(summaryList, actualFilteredList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void filterModuleSummaries_noKeywordsGiven_returnEmptyList() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e actualFilteredList \u003d manager.filterModuleSummaries(summaryList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(actualFilteredList.isEmpty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void generateModuleInfoMap_sampleModuleSummaryList_moduleInfoMap()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new HttpUtilStub());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e actualModuleInfoMap \u003d manager.generateModuleInfoMap(summaryList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e expectedModuleInfoMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e is1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010x.isPresent() \u0026\u0026 is1103.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedModuleInfoMap.put(\"CS1010X\", cs1010x.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedModuleInfoMap.put(\"IS1103\", is1103.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(expectedModuleInfoMap, actualModuleInfoMap);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchAndSaveModules_successfullySaveModuleInfoToFile()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throws NusmodsException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new HttpUtilStub(), TEST_SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager.fetchAndSaveModules();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e actualMap \u003d readModuleInfoMapFromFile(TEST_SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedCs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedIs1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // clean up test data file after we\u0027re done"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Files.deleteIfExists(Paths.get(TEST_SAVE_FILE_PATH));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (expectedCs1010x.isPresent() \u0026\u0026 expectedIs1103.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            Map\u003cString, ModuleInfo\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedMap.put(\"CS1010X\", expectedCs1010x.get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedMap.put(\"IS1103\", expectedIs1103.get());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(expectedMap, actualMap);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //---------------- HttpUtil Stubs -----------------//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class ValidModuleFileHttpUtilStub extends HttpUtil {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                return FileUtil.readFromFile(Paths.get(MODULE_TEST_FILE_PATH));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class InvalidModuleFileHttpUtilStub extends HttpUtil {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                return FileUtil.readFromFile(Paths.get(INVALID_MODULE_TEST_FILE_PATH));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class HttpUtilStub extends HttpUtil {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // declare string constants here since string.format doesn\u0027t produce compile-time constants required"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // for the switch statement below"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public static final String CS1010X_FILE_PATH \u003d \"https://api.nusmods.com/v2/2020-2021/modules/CS1010X.json\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public static final String IS1103_FILE_PATH \u003d \"https://api.nusmods.com/v2/2020-2021/modules/IS1103.json\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                switch (urlString) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                case DataFetcher.MODULE_SUMMARY_LIST_URL:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return FileUtil.readFromFile(Paths.get(VALID_MODULE_SUMMARIES_TEST_FILE_PATH));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                case CS1010X_FILE_PATH:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return FileUtil.readFromFile(Paths.get(CS1010X_MODULE_INFO));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                case IS1103_FILE_PATH:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return FileUtil.readFromFile(Paths.get(IS1103_MODULE_INFO));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //---------------- Test utility fxns -----------------//"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static List\u003cModuleSummary\u003e readModuleSummaryFromFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return mapper.readValue("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new File(filePath),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new TypeReference\u003cList\u003cModuleSummary\u003e\u003e(){});"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static Map\u003cString, ModuleInfo\u003e readModuleInfoMapFromFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return mapper.readValue("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new File(filePath),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new TypeReference\u003cMap\u003cString, ModuleInfo\u003e\u003e(){});"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 210
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/ModuleInfoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleInfoTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X \u003d \"src/test/resources/NusmodsDataManagerTest/CS1010X.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String IS1103 \u003d \"src/test/resources/NusmodsDataManagerTest/IS1103.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() throws DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010xDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e is1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103), ModuleInfo.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010x.isEmpty() || is1103.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010x.get().equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010x.get().equals(cs1010x.get()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different modules but same fields --\u003e true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010x.get().equals(cs1010xDuplicate.get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module --\u003e false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010x.get().equals(is1103.get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void hash() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010xDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e is1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103), ModuleInfo.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010x.isEmpty() || cs1010xDuplicate.isEmpty() || is1103.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e same hash code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010x.get().hashCode(), cs1010x.get().hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different modules but same fields --\u003e same hash code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010x.get().hashCode(), cs1010xDuplicate.get().hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different modules --\u003e different hash code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertNotEquals(cs1010x.get().hashCode(), is1103.get().hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/ModuleSummaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleSummaryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X_SUMMARY \u003d \"src/test/resources/NusmodsDataManagerTest/CS1010XSummary.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String IS1103_SUMMARY \u003d \"src/test/resources/NusmodsDataManagerTest/IS1103Summary.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() throws DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummary \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummaryDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                ModuleSummary.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e is1103Summary \u003d JsonUtil.readJsonFile(Paths.get(IS1103_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010xSummary.isEmpty() || is1103Summary.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010xSummary.get().equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010xSummary.get().equals(cs1010xSummary.get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module object but same fields --\u003e true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010xSummary.get().equals(cs1010xSummaryDuplicate.get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module --\u003e false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010xSummary.get().equals(is1103Summary.get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void hash() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummary \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummaryDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                        ModuleSummary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e is1103Summary \u003d JsonUtil.readJsonFile(Paths.get(IS1103_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010xSummary.isEmpty() || cs1010xSummaryDuplicate.isEmpty() || is1103Summary.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e same hash code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010xSummary.get().hashCode(), cs1010xSummary.get().hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module object but same fields --\u003e same hash code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010xSummary.get().hashCode(), cs1010xSummaryDuplicate.get().hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module --\u003e different hash code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertNotEquals(cs1010xSummary.get().hashCode(), is1103Summary.get().hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/NusmodsDataManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class NusmodsDataManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_MAP_TEST_FILE_PATH \u003d \"NusmodsDataManagerTest/validModuleMap.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String INVALID_MAP_TEST_FILE_PATH \u003d \"NusmodsDataManagerTest/invalidModuleMap\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                     + \".json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String MODULE_TEST_FILE_PATH \u003d \"src/test/resources/NusmodsDataManagerTest/validModule.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private NusmodsDataManager manager \u003d new NusmodsDataManager(new ReadFromFileDataFetcherStub(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                VALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static NusmodsDataManager getStubManager() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new NusmodsDataManager(new ReadFromFileDataFetcherStub(), INVALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_defaultWithNoArgs_storesDefaultFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(manager.getFilePath(), DataFetcher.DATA_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_validModuleInfoFile_returnsModuleInfoFromFile() throws NusmodsException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                          DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e actualInfo \u003d manager.getModuleInfo(\"CS2103T\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedInfo \u003d JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                  ModuleInfo.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualInfo.isPresent() \u0026\u0026 expectedInfo.isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(actualInfo.get(), expectedInfo.get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_invalidModuleInfoFileAndConnection_throwsNusmodsException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager(new ReadFromFileDataFetcherStub(), INVALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e manager.getModuleInfo(\"CS2103T\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_invalidFilePath_throwsNusmodsException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager(new ReadFromFileDataFetcherStub(), \"asdf.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e manager.getModuleInfo(\"CS2103T\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_moduleNotInValidModuleFile_emptyOptional() throws NusmodsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(manager.getModuleInfo(\"CS2100\").isEmpty());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_fetchFromApiSuccessful_moduleInfo() throws NusmodsException, DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager(new FetchFromApiDataFetcherStub(), VALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e actualInfo \u003d manager.getModuleInfo(\"CS2103T\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedInfo \u003d JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                  ModuleInfo.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualInfo.isPresent() \u0026\u0026 expectedInfo.isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(actualInfo.get(), expectedInfo.get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleTitle_moduleIsInData_moduleTitle() throws NusmodsException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cString\u003e actualTitle \u003d manager.getModuleTitle(\"CS2103T\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualTitle.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(actualTitle.get(), \"Software Engineering\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleTitle_moduleNotInData_emptyOptional() throws NusmodsException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cString\u003e actualTitle \u003d manager.getModuleTitle(\"CS2100\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(actualTitle.isEmpty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class ReadFromFileDataFetcherStub extends DataFetcher {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        void fetchAndSaveModules() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(new IOException(\"stub exception\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class FetchFromApiDataFetcherStub extends DataFetcher {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        void fetchAndSaveModules() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                return JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH), ModuleInfo.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (DataConversionException ex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "silvernitro": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/GemCommandStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.ScienceCommandTest.INVALID_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.FOUNDATION_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.GemCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GemCommandStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TEST_FOUNDATION_PATH \u003d \"src/main/resources/data/foundationmodules.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private GemCommandStorage storage \u003d new GemCommandStorage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e testModules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private GemCommand gemCommand \u003d new GemCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpTestModules(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGehModules_validTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGehModules();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGeqModules_validTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGeqModules();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGerModules_validTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGerModules();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGesModules_validTest() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGesModules();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGetModules_validTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGetModules();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGehModulesInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setGehModules(INVALID_PATH));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGeqModulesInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setGeqModules(INVALID_PATH));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGerModulesInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setGerModules(INVALID_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGesModulesInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setGesModules(INVALID_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGetModulesInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setGetModules(INVALID_PATH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGehModulesValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d testModules;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setGehModules(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGehModules();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGeqModulesValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d testModules;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setGeqModules(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGeqModules();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGerModulesValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d testModules;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setGerModules(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGerModules();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGesModulesValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d testModules;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setGesModules(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGesModules();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGetModulesValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d testModules;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setGetModules(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getGetModules();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 4,
      "yan-soon": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONSTRAINTS_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS1#212\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CODE \u003d CS2103T.getModuleCode().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private static final String VALID_TITLE \u003d CS2103T.getModuleTitle().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CREDITS \u003d CS2103T.getModularCredits().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS2103T.getTags().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2103T);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(CS2103T, module.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new JsonAdaptedModule(INVALID_CODE, VALID_TITLE, VALID_CREDITS, VALID_TAGS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d MESSAGE_CONSTRAINTS_CODE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, VALID_TITLE, VALID_CREDITS, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_CODE, null, VALID_CREDITS, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleTitle.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_nullModularCredits_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_CODE, VALID_TITLE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModularCredits.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                new JsonAdaptedModule(VALID_CODE, VALID_TITLE, VALID_CREDITS, invalidTags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, module::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16,
      "yan-soon": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonGradPadStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class JsonGradPadStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonGradPadStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readGradPad_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readGradPad(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGradPad\u003e readGradPad(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new JsonGradPadStorage(Paths.get(filePath)).readGradPad(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(readGradPad(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradPad(\"notJsonFormatGradPad.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readGradPad_invalidModuleGradPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradPad(\"invalidModuleGradPad.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readGradPad_invalidAndValidModuleGradPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradPad(\"invalidAndValidModuleGradPad.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readAndSaveGradPad_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempGradPad.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad original \u003d getTypicalGradPad();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage jsonGradPadStorage \u003d new JsonGradPadStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        jsonGradPadStorage.saveGradPad(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad readBack \u003d jsonGradPadStorage.readGradPad(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        original.addModule(CS1231);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        original.removeModule(CS2103T);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        jsonGradPadStorage.saveGradPad(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        readBack \u003d jsonGradPadStorage.readGradPad(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        original.addModule(CS2103T);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        jsonGradPadStorage.saveGradPad(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        readBack \u003d jsonGradPadStorage.readGradPad().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad_nullGradPad_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGradPad(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Saves {@code gradPad} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private void saveGradPad(ReadOnlyGradPad gradPad, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            new JsonGradPadStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    .saveGradPad(gradPad, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGradPad(new GradPad(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 7,
      "-": 68,
      "yan-soon": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableGradPadTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class JsonSerializableGradPadTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableGradPadTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesGradPad.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleGradPad.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleGradPad.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void toModelType_typicalModulesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                JsonSerializableGradPad.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad gradPadFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad typicalModulesGradPad \u003d TypicalModules.getTypicalGradPad();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(gradPadFromFile, typicalModulesGradPad);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                JsonSerializableGradPad.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                JsonSerializableGradPad.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableGradPad.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "mhdsyfq": 1,
      "-": 27,
      "yan-soon": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        userPrefs.setGradPadFilePath(Paths.get(\"gradpad.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/RequiredCommandStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.ScienceCommandTest.INVALID_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.FOUNDATION_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.PRECLUSION_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommandStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TEST_FOUNDATION_PATH \u003d \"src/main/resources/data/foundationmodules.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TEST_SCIENCE_PATH \u003d \"src/main/resources/data/sciencemodules.json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TEST_PRECLUSION_PATH \u003d \"src/main/resources/data/precludedmodules.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private RequiredCommandStorage storage \u003d new RequiredCommandStorage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredFoundation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Map preclusionMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpRequiredFoundation() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(Paths.get(TEST_FOUNDATION_PATH));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredFoundation \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpPreclusionMap() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        preclusionMap \u003d JsonUtil.readJsonFile(Paths.get(TEST_PRECLUSION_PATH), Map.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getPreclusionMap_validTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Map\u003cString, String\u003e actual \u003d storage.getPreclusionMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredFoundation_validTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredITprof_validTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredITprof();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredMath_validTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredMath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredScience_validTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredInternship_validTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredInternship();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setPreclusionMapInvalidPath_throwsIOexpception() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, ()-\u003e storage.setPreclusionMap(INVALID_PATH));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredFoundationInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setRequiredFoundation(INVALID_PATH));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredITprofInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setRequiredITprof(INVALID_PATH));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredMathInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setRequiredMath(INVALID_PATH));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredScienceInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setRequiredScience(INVALID_PATH));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredInternshipInvalidPath_throwsIOexception() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IOException.class, () -\u003e storage.setRequiredInternship(INVALID_PATH));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setPreclusionMapValidPath_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpPreclusionMap();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Map expected \u003d preclusionMap;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setPreclusionMap(PRECLUSION_PATH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Map\u003cString, String\u003e actual \u003d storage.getPreclusionMap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredFoundationValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d requiredFoundation;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredFoundation(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredITprofValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d requiredFoundation;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredITprof(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredITprof();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredMathValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredFoundation;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredMath(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d storage.getRequiredMath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredScienceValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d requiredFoundation;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredScience(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredInternshipValidPath_success() throws IOException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException, IllegalValueException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d requiredFoundation;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredInternship(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredInternship();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage gradPadStorage \u003d new JsonGradPadStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storageManager \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void gradPadReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "         * {@link JsonGradPadStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonGradPadStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad original \u003d getTypicalGradPad();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storageManager.saveGradPad(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad retrieved \u003d storageManager.readGradPad().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGradPadFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNotNull(storageManager.getGradPadFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getUserPrefsFilePath_validTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path expected \u003d getTempFilePath(\"prefs\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path actual \u003d storageManager.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 54,
      "yan-soon": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        descriptor.setModuleTitle(module.getModuleTitle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModularCredits(module.getModularCredits());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setTags(module.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets the {@code Module Code} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String code) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(code));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets the {@code Modular Credits} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder withModularCredits(String credits) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModularCredits(new ModularCredits(credits));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Sets the {@code Module Title} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleTitle(String title) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        descriptor.setModuleTitle(new ModuleTitle(title));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditModuleDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 11,
      "yan-soon": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GradPadBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * A utility class to help with building GradPad objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " *     {@code GradPad ab \u003d new GradPadBuilder().withModule(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPadBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private GradPad gradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPadBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPadBuilder(GradPad gradPad) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPad \u003d gradPad;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Adds a new {@code Module} to the {@code GradPad} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPadBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String DEFAULT_MC \u003d \"4\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private ModuleCode code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private ModuleTitle title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private ModularCredits credits;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Creates a {@code ModuleBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        code \u003d new ModuleCode(DEFAULT_CODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        title \u003d new ModuleTitle(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        credits \u003d new ModularCredits(DEFAULT_MC);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        code \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        title \u003d moduleToCopy.getModuleTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        credits \u003d moduleToCopy.getModularCredits();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(moduleToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.code \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Sets the {@code ModuleTitle} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public ModuleBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.title \u003d new ModuleTitle(title);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Sets the {@code ModularCredits} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder withModularCredits(String mc) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.credits \u003d new ModularCredits(mc);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new Module(code, title, credits, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 67,
      "mhdsyfq": 15,
      "yan-soon": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.commons.core.Messages.ADD_COMMAND_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static String getAddCommand(Module module) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ADD_COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        sb.append(module.getModuleCode().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        module.getTags().stream().forEach("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static String getEditModuleDescriptorDetails(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.getModuleCode().ifPresent(code -\u003e sb.append(PREFIX_CODE).append(code.toString()).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "yan-soon": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Index INDEX_FIRST_MODULE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Index INDEX_SECOND_MODULE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Index INDEX_THIRD_MODULE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "yan-soon": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModuleCodes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * A utility class containing a list of {@code ModuleCode} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class TypicalModuleCodes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final ModuleCode CODE_FIRST_MODULE \u003d new ModuleCode(\"CS2103T\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final ModuleCode CODE_SECOND_MODULE \u003d new ModuleCode(\"CS3216\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final ModuleCode CODE_THIRD_MODULE \u003d new ModuleCode(\"CS2100\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().withCode(\"CS2103T\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTitle(\"Software Engineering\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            .withModularCredits(\"4\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            .withTags(\"core\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Module CS1231 \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .withTitle(\"Discrete Structures\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .withModularCredits(\"4\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .withTags(\"core\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // Manually added - Module\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final Module CS3216 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            new ModuleBuilder().withCode(VALID_CODE_CS3216).withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    .withTitle(VALID_TITLE_CS3216).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns an {@code GradPad} with all the typical modules."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static GradPad getTypicalGradPad() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad ab \u003d new GradPad();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, CS3216));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static double getTypicalTotalMc() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        double totalMc \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            totalMc +\u003d Double.parseDouble(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return totalMc;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 6,
      "silvernitro": 40,
      "mhdsyfq": 12,
      "yan-soon": 3
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/CS1010X.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"CS1010X\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  \"semesters\" : [ 2 ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"preclusion\" : \"CS1010 or its equivalent, CS1010FC\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"prerequisite\" : null"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/CS1010XSummary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\": \"CS1010X\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\": \"Programming Methodology\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"semesters\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 7
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/IS1103.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"IS1103\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Ethics in Computing\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  \"semesters\" : [ 1 ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"description\" : \"This module gives an introduction to Ethics in the Computing domain. Students will learn about the importance of Ethics in Computing policy-making and be able to make judgements and decisions based on established ethical frameworks (such as Deontology, Consequentialism, Social Contract Theory and Virtue Ethics). The objective is to develop students to be ethical computing decision-makers who can analyse and explain their decisions in real-world policy-making situations. Issues in emerging areas such as Digital Intellectual Property Rights, Artificial Intelligence, Big Data, Social Media, Hacking, and interface design may also be discussed in relation to Ethics.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"preclusion\" : null,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"prerequisite\" : null"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/IS1103Summary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\": \"IS1103\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\": \"Ethics in Computing\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"semesters\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/invalidModule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"CS2103T\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Software Engineering\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit: \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 5
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/invalidModuleMap.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"sdfasdf"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 3
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/validModule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  \"description\" : \"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"preclusion\" : \"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"prerequisite\" : \"For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "silvernitro": 7
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/validModuleMap.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2103T\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"semesters\" : [ 1, 2 ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    \"description\" : \"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "silvernitro": 9
    }
  },
  {
    "path": "src/test/resources/NusmodsDataManagerTest/validSummaries.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "["
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\": \"IS1103\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\": \"Ethics in Computing\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"semesters\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "      1,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "      2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\": \"CS1010X\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\": \"Programming Methodology\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"semesters\": ["
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "      2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "]"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 17
    }
  }
]
