[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, store’s inventory and historical sales data. It is optimized for CLI(Command Line Interface) users to update and retrieve the information more efficiently."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* It is named tCheck, which is a word play on tea Check. This application is tailor-made for bubble tea shop managers, to help them on store management."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* For the detailed documentation of this project, see"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * [Developers Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 13,
      "-": 6
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "### Tan Ying Hui"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "\u003cimg src\u003d\"images/ureshiiying.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[[github](https://github.com/ureshiiYing)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[[portfolio](team/tanyinghui.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Yan BingTao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cimg src\u003d\"images/yanbingtao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[[github](https://github.com/yanbingtao)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "[[portfolio](team/yanbingtao.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Responsibilities: Integration - In charge of versioning of the code, maintaining the code repository, integrating various parts of the software to create a whole."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "### Wang Mo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "\u003cimg src\u003d\"images/wm71811.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "[[github](http://github.com/WM71811)] "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "[[portfolio](team/wangmo.md)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "### Wang Qian"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u003cimg src\u003d\"images/persdre.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "[[github](http://github.com/persdre)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "[[portfolio](team/wangqian.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Role: Developer \u0026 Code Quality Reviewer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* Responsibilities: Develop \u0026 Check code quality"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "### Zhang Yi"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "\u003cimg src\u003d\"images/diwu-yi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "[[github](https://github.com/Diwu-Yi)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "[[portfolio](team/zhangyi.md)]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* Role: Project Tester and Contributor"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 6,
      "Diwu-Yi": 5,
      "yanbingtao": 6,
      "WM71811": 5,
      "-": 32,
      "Persdre": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* is the store manager of a T*ger Sugar milk tea shop"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* is very busy with daily operations and has little time for manual writing or recording"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* is a fast typist"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* has many employees (both part-time and full-time) to manage"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* needs to save all the employees’ contact numbers"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* needs to forward one person’s contact to another"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  employee to let them directly communicate with each other "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* cares about the daily revenue"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* does an inventory check daily to ensure that ingredients are sufficient"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  for the shop to operate smoothly"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* needs to keep track of the daily revenue"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* To manage the employees\u0027 contact information digitally"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product will provide a platform to allow the user to save his/ her employees’ contact "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      information (eg. emergency contacts, address etc)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * It can manage contacts faster than a typical mouse/GUI driven app "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* To digitise inventory keeping"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product will help to digitise inventory keeping, and thus helps to save the user’s time and prevent "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      human error in calculation. It does not ensure that the employees use the same amount of ingredients in making "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      the drinks. The user only needs to enter the number of each type of bubble tea sold on the day. It will notify the user"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      which ingredients are running low on stock and remind him/ her to restock them soon. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product could also help the user calculate the total cost for restocking."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* To digitise daily revenue tracking"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Given the number of each type of bubble tea sold, the product can provide the user with the revenue for each day."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * The product also helps Amy to keep track of the daily revenue changes, and the revenue for each type of product. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      This would allow Amy to check which kind of bubble tea sells better and consider adopting similar ideas when "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "      making new products. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Priorities: 1 (must have), 2 (nice to have), 3 (unlikely to have)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| As a/an                           | I can/I want to (features that are going to be implemented)                                                                  | So that (benefit gained)                                                                                 | Priority |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Store manager                     | have a centralised system that helps me keep track of my employees’ contact numbers                                          | I don\u0027t need to organize working contacts on my personal phone                                           | 1                                                             |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Store manager                     | have a software that helps me on daily inventory checking                                                                    | I can reduce the amount of human errors that may be involved and track the shop\u0027s inventory conveniently | 1                                                             |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Busy store manager                | receive reminders to restock                                                                                                 | I won\u0027t lose revenue because of unexpected ingredient shortage during operation                          | 1                                                             |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | be able to download the app                                                                                                  | I can play around and check out what it can do before actual usage                                       | 1                                                             |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | use the help feature                                                                                                         | I can get more familiar with the app features                                                            | 1                                                             |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | find out if the app is running smoothly and bug-free                                                                         | I can decide if using this app will indeed help me run a store                                           | 1                                                             |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Concerned manager                 | check the employees\u0027s contact number if they are absent without stating any reasons                                          | I can easily contact them in a short time                                                                | 1                                                             |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | initialize the ingredients level in the app                                                                                  | I need not remember the amount of inventories, and only need to update when I do a restock               | 1                                                             |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | find the emergency contacts of my employees quickly if they are injured                                                      | I can find the person to contact and know what action to take in the shortest time possible              | 1                                                             |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | input the number of each type of drinks sold into tCheck at the end of the day, and know the amount of remaining ingredients | I can document the amount of ingredients left                                                            | 1                                                             |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | to delete some of the employees\u0027 data who are no longer working at the shop                                                  | they are no longer tracked by the app.                                                                   | 1                                                             |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | view the revenue from the last day                                                                                           | I can predict how much demand it would likely to be for today                                            | 1                                                             |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Store manager                     | have a software to help me calculate my daily revenue                                                                        | I don\u0027t need to manually calculate them and it will become less troublesome to do so                     | 2                                                             |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Busy and concenrned store manager | have a software to remind me on check my employees\u0027 health condition for each shift                                          | I won\u0027t forget to check, espcially when I\u0027m busy                                                         | 2                                                             |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | read the \"About\" page in the app                                                                                             | I know how to use this software to help my business                                                      | 2                                                             |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | register for a password-protected account                                                                                    | I can be sure that my user data will not be viewed by non-users                                          | 2                                                             |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| First-time user                   | be able to navigate the app easily                                                                                           | I only need basic intuition to use the navigation bar (For GUI)                                          | 2                                                             |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Impatient first-time user         | have a fast-response inventory keeping application                                                                           | I don\u0027t waste time waiting for the app to load                                                           | 2                                                             |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | only use the software and access my data if I enter the correct login information                                            | it prevents unauthorised users from viewing the shop\u0027s information                                       | 2                                                             |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | be reminded of the task of checking the employee\u0027s health condition                                                          | I would not forget to check the employees\u0027 health status each day before the shop opens                  | 2                                                             |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Concerned manager                 | check and record the health conditions of my employees                                                                       | I can do my best to ensure the safety of food is guanranteed                                             | 2                                                             |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Second-time user                  | view the inventory from the last day                                                                                         | I can restock before the ingredients ran out of stock and affect my business                             | 2                                                             |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | input the number of each type of drinks sold into tCheck at the end of the day,and find out the total revenue of the day     | I can document the daily revenue                                                                         | 2                                                             |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | do closing duties according to a check list shown on the app                                                                 | I will not forget important things                                                                       | 2                                                             |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | use the ingredient data                                                                                                      | I can prepare for next day\u0027s ingredients                                                                 | 2                                                             |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Busy store manager                | use shortcut commands                                                                                                        | it makes my input process into tCheck faster and more convenient.                                        | 2                                                             |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | my data to be saved reliably                                                                                                 | my data won\u0027t be lost even if my computer crashes                                                        | 2                                                             |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | have fast responses after a long usage period                                                                                | I will not waste time waiting for the app even after extensive usage                                     | 2                                                             |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Expert user                       | export my data from the application                                                                                          | the performace of the store can be analyzed easily by using other third-party softwares                  | 2                                                             |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Persdre"
        },
        "content": "| Intermediate user                 | to look through my employees\u0027 health condition data of the last 10 days                                                      | I can roughly gauge the conditions of my employees                                                       | 3                                                             |                                              |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "(For all use cases below, the **System** is the `tCheck` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Use Case: UC01 - Archive a contact detail of an employee**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to archive one employee’s contact details. "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. tCheck requests for details of the employee to archive."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. User enters the archive details."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "4. tCheck will move this corresponding contact detail into the archive and displays a success message."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 3a. tCheck detects an incorrect input format or is unable to find the entered data."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        * 3a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \t* 3a2. User enters new data."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \t"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \tSteps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \t"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \tUse case resumes from step 4."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Use Case: UC02 - Archive all contact details**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to archive all employee’s contact details. "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. User enters the request to archive all employees’ contact details."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. tCheck will move all contact details into the archive and displays a success message."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 2a. tCheck detects an incorrect input format."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        * 2a1. tCheck requests for the input to be in the correct format."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t* 2a2. User enters new data."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tSteps 2a1-2a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tUse case resumes from step 3."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 2b. tCheck detects an empty contact list."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    * 2b1. tCheck shows a warning message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**UC03 - Set ingredient level for a single ingredient**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to set the ingredient level for an ingredient."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. tCheck requests for the name of the ingredient."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. User enters the name of the ingredient."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "4. tCheck requests for the amount of the particular ingredient."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "5. User enters the amount of the particular ingredient."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "6. tCheck will set the ingredient level for this ingredient and displays a success message."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 3a. tCheck is unable to find the entered name."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a2. User enters new data."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tUse case resumes from step 4."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 5a. tCheck detects an invalid amount value"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    * 5a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    * 5a2. User enters new data."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "   \t    "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 5a1-5a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "       \tUse case resumes from step 6."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**UC05 - Set sales level for all types of drinks**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "1. User chooses to set the sales volume for a type of drink."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "2. tCheck requests for the drink name."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "3. User enters the name of the drink."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "4. tCheck requests for the number of that type of drink sold on that day."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "5. User enters the number of that type of drink sold."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "6. tCheck will set the sales level for this drink and displays a success message."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     Steps 1-6 are repeated until the sales of all types of drinks are updated."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 3a. tCheck is unable to find the entered name."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    * 3a2. User enters new data."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  \t    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \tUse case resumes from step 4."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \t"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* 5a. tCheck detects an invalid sales amount."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " \t    * 5a1. tCheck requests for the correct data."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " \t    "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " \t    * 5a2. User enters new data."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": " \t    "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Steps 5a1-5a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     \tUse case resumes from step 6."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "     \t"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "3.  Should be able to respond within 1 second for each operation."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "4.  Should be able to function fully without connecting to internet."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "5.  Should be for a single user."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "6.  Should not handle the printing of the report (i.e. sales report)."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "7.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "8.  A user without prior experience on inventory management system should be able to accomplish most of the tasks"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " using commands. "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 17,
      "Diwu-Yi": 104,
      "yanbingtao": 8,
      "WM71811": 12,
      "-": 339,
      "Persdre": 34
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "more efficiently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * [Quick start](#quick-start)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * [Features](#features)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        * [Commands - General](#commands-general)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        * [Commands - Contact details](#commands-contact-details) "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        * [Commands - Ingredients Tracking](#commands-ingredients-tracking)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        * [Commands - Sales Tracking](#commands-sales-tracking) "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * [Command summary](#command-summary)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "## Quick start `[Release coming soon]` \u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "1. Download the latest `tCheck.jar` from [here](https://github.com/AY2021S1-CS2103T-T12-2/tp/releases)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your tCheck."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`list`** : Lists all contacts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/81234567 t/part time` : Adds an employee\u0027s contact"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    named `John Doe` to tCheck."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`clear`** : Deletes all contacts."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "## Features \u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  e.g. in `ingredient NAME`, `NAME` is a parameter which can be used as `ingredient milk`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Items with `…`​ after them can be used once or multiple times.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  e.g. `sales A/NUM B/NUM C/NUM …` can be used as `sales BSBM/100` or `sales BSBM/100 BSBBT/120`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### 1. Commands - General \u003ca name\u003d\"commands-general\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 1.1 Viewing help : `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Displays a brief explanation of the list of commands, and a link to the help page, which is the user guide."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 1.2 Exiting the program : `exit`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 1.3 Saving the data :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "All tCheck data (i.e. contact details, ingredient data, sales data) are saved in the hard disk automatically after any"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### 2. Commands - Contact details \u003ca name\u003d\"commands-contact-details\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.1 Adding a person : `add`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Adds a person to the contact list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMERGENCY_CONTACT [t/TAG]…​`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `add n/John Doe p/98765432 e/81234567`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `add n/Betsy Crowe e/81234567 p/1234567 t/morning shift t/part-time`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.2 Listing all persons : `list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.3 Editing a person : `edit`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Edits the corresponding contact information in the contact list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMERGENCY_CONTACT] [t/TAG] …​​`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "*  `edit 1 p/91234567 e/81234567` Edits the phone number and emergency contact of the 1st person to be `91234567` and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " `81234567` respectively."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.4 Locating persons by keywords: `search`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Finds all contacts that contain the KEYWORD(s)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `find John` returns `john` and `John Doe`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.5 Deleting a person : `delete`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd person in the contact list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.6 Clearing all entries : `clear`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Clears all entries from the contact list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.7 Archiving a person : `archive`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Archives the specified employee\u0027s contact detail from the tCheck."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `archive INDEX`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Archives the employee at the specified `INDEX`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `list` followed by `archive 2` archives the 2nd person in the employees\u0027 contact details."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `find Betsy` followed by `archive 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.8 Archiving all employees : `archive all`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Archives all employees\u0027 contact detail from the tCheck."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `archive all`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 2.9 Listing all archived employees : `archive list`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a list of all archived employees\u0027 contact details in tCheck."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `archive list`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### 3. Commands - Ingredients Tracking \u003ca name\u003d\"commands-ingredients-tracking\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Unit of measurement for ingredients: "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Unit for solid items / jelly : **KG**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Unit for liquids : **L**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 3.1 Setting one ingredient to initial level : `set`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Users can set the level for one type of ingredient individually."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `set INGREDIENT_NAME AMOUNT`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Set the `INGREDIENT_NAME` to the specified `AMOUNT`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `set milk 15`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 3.2 Setting all ingredients to the same initial level : `set all ingredients`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Users can initialise all ingredients levels to a standard default value or a desired value use a short command."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `set all ingredients DEFAULT`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Set all ingredient levels to the `DEFAULT` level, such as five units of the respective units."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `set all ingredients 10`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 3.3 Setting all ingredients to different levels : `set ingredients`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Users can enter all current ingredients level in a single command by following a pre-defined sequence."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `set ingredients m/MILK b/BLACK_TEA s/SUGAR o/BUBBLE`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* Set all the level of milk left to `MILK` , the level of black tea left to `BLACK_TEA`, the level of sugar left to `SUGAR`, the level of bubble left to `BUBBLE`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `set ingredients m/10 b/12 s/5 o/30`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Notice:**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Users inputs will be validated, if an invalid command is given, the program will show relevant error messages to notify the user to re-input."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example of Error Message:  `No ingredient called ‘suger’ found !` ."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 3.4 View a Single Ingredient Level: `ingredient single`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Prints the ingredient level for a particular type of ingredient which is specified by the user’s command."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `ingredient single INGREDIENT_NAME`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `ingredient single milk`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 3.5 Resetting all to zero : `ingredient resetAll`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Sets all ingredient levels to 0 by updating the database when the command is entered."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `ingredient resetAll`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 3.6 Listing Ingredient Levels : `ingredient list`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Prints the ingredient levels for all ingredient types retrieved from the database."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `ingredient list`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### 4. Commands - Sales Tracking \u003ca name\u003d\"commands-sales-tracking\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 4.1 Updating the number of drinks sold for the day :"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Asks the user to enter the number of each type of drink sold for the current day."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `sales A/NUM B/NUM C/NUM ...`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `A`, `B`, `C` are abbreviations for the drink types."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `NUM` refers to the number of drinks sold."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `sales BSBM/100 BSBBT/120` Updates the sales of Brown Sugar Boba Milk `BSBM` to 100 and"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " Brown Sugar Boba Black Tea `BSBBT` to 120."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 4.2 Listing the number of drinks sold for the day :"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a list of all types of drinks sold for the current day."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `sales list`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "#### 4.3 Listing the sales record for a specific day :"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Shows a sales record for each type of mile tea on a specific date."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Format: `sales YYYY-MM-DD`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `YYYY-MM-DD` refers to date in YYYY-MM-DD format."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* `sales 2020-08-01` returns the sales record for each type of milk tea on 2020-08-01."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "## Command summary \u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### General"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Employees\u0027 Contact Details"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Add** | `add n/NAME p/PHONE_NUMBER e/EMERGENCY_CONTACT [t/TAG]…` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/81234567 t/morning shift`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [e/EMERGENCY_CONTACT] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/81234567`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Search** | `search KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `search James Jake`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Archive** |  1. **Archive \\(1 entry\\):**  `archive INDEX`\u003cbr\u003e e.g., `archive 1` \u003cbr\u003e2. **Archive \\(all\\):**  `archvie all` \u003cbr\u003e3. **List all archived data:**  `archvie list`\u003c/br\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Ingredients  Tracking"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Set**  | `set INGREDIENT_NAME AMOUNT` \u003cbr\u003e e.g., `set milk 20`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Set all**  | `set all ingredients AMOUNT` \u003cbr\u003e e.g., `set all ingredients 5`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Set ingredients**  | `set ingredients m/MILK b/BLACK_TEA s/SUGAR o/BUBBLE` \u003cbr\u003e e.g., `set ingredients m/19 b/20 s/5 o/0`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WM71811"
        },
        "content": "**Get**| `ingredient single INGREDIENT_NAME`  \u003cbr\u003e e.g., `ingredient single milk`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Reset**| `ingredient resetAll`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**List**| `ingredient list`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "### Sales Tracking"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "-------|------------------------------"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Update**| `sales A/NUM B/NUM C/NUM ...` \u003cbr\u003e e.g., `sales BSBM/100 BSBBT/120`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**List**| `sales list`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "**Find**| `sales YYYY-MM-DD`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 188,
      "WM71811": 3,
      "-": 131
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "title: tCheck"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T12-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T12-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "**tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI(Command Line Interface) users to update and "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "retrieve the information more efficiently.**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* If you are interested in using tCheck, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* If you are interested about developing tCheck, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/tanyinghui.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "title: Tan Ying Hui\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information more "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "efficiently."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Created Milestone v1.1 and added issues assigned to the milestone."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Added documentation for the features with regard to sales tracking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    * Added documentation for value proposition of the product under Appendix: Requirements."
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 23
    }
  },
  {
    "path": "docs/team/wangmo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "title: Wang Mo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information more"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "efficiently."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Added issues assigned to the milestone v1.2."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Created a label type.Story"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Added documentation for the features `ingredient list`, `ingredient single` and `ingredient resetAll`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     with regard to ingredients tracking and the feature `help`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    * Added documentation for the section on Target User Profile."
      }
    ],
    "authorContributionMap": {
      "WM71811": 24
    }
  },
  {
    "path": "docs/team/wangqian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Persdre"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Persdre"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Persdre"
        },
        "content": "title: Wang Qian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Persdre"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Persdre"
        },
        "content": "## Project: tcheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Persdre"
        },
        "content": "- Add information about myself"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u003c!-- * **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Persdre"
        },
        "content": "* _{you can add/remove categories in the list above}_ --\u003e"
      }
    ],
    "authorContributionMap": {
      "Persdre": 47
    }
  },
  {
    "path": "docs/team/yanbingtao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "title: Yan BingTao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "tCheck is a desktop application that helps bubble tea store managers manage the staffs’ contact information, store’s inventory and historical sales data. It is optimized for CLI users to update and retrieve the information more efficiently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Added documentation for the features with regard to archive, saving user data and exiting application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    * Added documentation for Non-functional requirements of the product under Appendix: Requirements."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 19
    }
  },
  {
    "path": "docs/team/zhangyi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "title: Zhang Yi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "## Project: tCheck"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "tCheck is a desktop application used by bubble tea store managers for keeping inventories and keep information of his/her employees. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Currently, tCheck is at an early stage of development."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Done so far**:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Documentation updates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Update User Guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Update Developer Guide."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Update AboutUs Page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "Coming soon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Added issues assigned to milestone v1.1."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * AboutUs page:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Updated my information in the AboutUs page of the project website."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Added documentation for the features `delete` `add` for contact number and `set` for ingredients tracking."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    * Added documentation for the section of use cases."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 35
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 393,
      "Persdre": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Persdre"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "Persdre": 1
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": "2. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Persdre"
        },
        "content": "3. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Persdre"
        },
        "content": "4. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Persdre"
        },
        "content": "5. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Persdre"
        },
        "content": "6. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Persdre"
        },
        "content": "7. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Persdre"
        },
        "content": "8. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Persdre"
        },
        "content": "9. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Persdre"
        },
        "content": "10. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Persdre"
        },
        "content": "11. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Persdre"
        },
        "content": "12. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Persdre"
        },
        "content": "13. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Persdre"
        },
        "content": "14. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Persdre"
        },
        "content": "15. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Persdre"
        },
        "content": "16. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Persdre"
        },
        "content": "17. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Persdre"
        },
        "content": "18. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Persdre"
        },
        "content": "19. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Persdre"
        },
        "content": "20. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Persdre"
        },
        "content": "21. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Persdre"
        },
        "content": "22. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Persdre"
        },
        "content": "23. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Persdre"
        },
        "content": "24. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Persdre"
        },
        "content": "25. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 225,
      "Persdre": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // salesBook not saved in storage yet. An empty salesBook will be used instead."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook record \u003d new SalesBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook sample \u003d new IngredientBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new ModelManager(initialData, record, sample, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "Diwu-Yi": 4,
      "-": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * e.g. empty string, \"-1\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static boolean isUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 18,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of ingredients */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveAllCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-archive-all\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \": Archives all persons in the displayed person list.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived all persons in the displayed person list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_ARCHIVE \u003d \"There is nothing in the current displayed list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        int listSize \u003d lastShownList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOTHING_TO_ARCHIVE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Person personToArchive \u003d lastShownList.get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Person archivedPerson \u003d personToArchive.archive();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            model.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(MESSAGE_ARCHIVE_PERSON_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Archives a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-archive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \": Archives the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_PERSON_SUCCESS \u003d \"Archived Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_PERSON_ALREADY_ARCHIVED \u003d \"This person has already been archived!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs an ArchiveCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param targetIndex the index number shown in the displayed person list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person personToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus currentStateOfPerson \u003d personToArchive.getArchiveStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (currentStateOfPerson.archiveStatus) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_ALREADY_ARCHIVED,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    personToArchive));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person archivedPerson \u003d personToArchive.archive();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.setPerson(personToArchive, archivedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_PERSON_SUCCESS, personToArchive.getName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Shows all archived persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-archive-list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived persons.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ARCHIVED_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Persdre"
        },
        "content": "    // for edit phone\u0027s issues, add e/emergency_contact just behind p/phone_number"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus archiveStatus \u003d new ArchiveStatus(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedAddress, archiveStatus, updatedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        private ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            setArchiveStatus(toCopy.archiveStatus);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, address, archiveStatus, tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public Optional\u003cArchiveStatus\u003e getArchiveStatus() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return Optional.ofNullable(this.archiveStatus);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        public void setArchiveStatus(ArchiveStatus archiveStatus) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    \u0026\u0026 getArchiveStatus().equals(e.getArchiveStatus())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 17,
      "-": 203,
      "Persdre": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SalesListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Lists the sales of the drink items that has been recorded by the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"s-list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists the sales of the drinks as entered. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Parameters: There are no parameters.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed the sales that has been recorded.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"This is the current record now: \\n\\n%s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // TODO: with UI need to update model with the salesBook ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getSalesBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SalesUpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Updates the sales of the drink items provided by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"s-update\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the sales of the drinks as entered. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Existing sales record will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Parameters: A/NUM B/NUM ... where A, B refers to the drink abbreviation. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"You must record the sales of at least one item, as a positive unsigned integer.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_BSBM + \"100\" + \" \" + PREFIX_BSPM + \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added sales to the record. You may use \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + SalesListCommand.COMMAND_WORD + \" to check the current record.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final Map\u003cDrink, Integer\u003e sales;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesUpdateCommand(Map\u003cDrink, Integer\u003e sales) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.sales \u003d sales;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        model.overwrite(sales);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getSalesBook()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!(other instanceof SalesUpdateCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand e \u003d (SalesUpdateCommand) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return sales.equals(e.sales);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOBA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BROWN_SUGAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OOLONG_TEA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PEARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Set all ingredients in the ingredient book to different specified amounts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetAllCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-set-all\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets all ingredients to specified amounts \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"in the ingredient book. \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Parameters: \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_MILK + \"Amount_for_Milk \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_PEARL + \"Amount_for_Pearl \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BOBA + \"Amount_for_Boba \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_OOLONG_TEA + \"Amount_for_Oolong_Tea\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BROWN_SUGAR + \"Amount_for_Brown_Sugar\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_MILK + \"90 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_PEARL + \"90 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BOBA + \"30 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_OOLONG_TEA + \"40 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_BROWN_SUGAR + \"10\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"All current amounts have already been \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"set to the specified amounts\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredient book has been set : %1$s\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount milkAmount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount pearlAmount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount bobaAmount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount oolongTeaAmount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount brownSugarAmount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs a set all command with the given amounts for all different ingredients."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetAllCommand(Amount milkAmount, Amount pearlAmount, Amount bobaAmount,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                         Amount oolongTeaAmount, Amount brownSugarAmount) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(milkAmount, pearlAmount, bobaAmount, oolongTeaAmount, brownSugarAmount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.milkAmount \u003d milkAmount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.pearlAmount \u003d pearlAmount;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.bobaAmount \u003d bobaAmount;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.oolongTeaAmount \u003d oolongTeaAmount;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.brownSugarAmount \u003d brownSugarAmount;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        boolean isNoChange \u003d model.hasIngredient(new Ingredient(new IngredientName(\"Milk\"), milkAmount))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 model.hasIngredient(new Ingredient(new IngredientName(\"Pearl\"), pearlAmount))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 model.hasIngredient(new Ingredient(new IngredientName(\"Boba\"), bobaAmount))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 model.hasIngredient(new Ingredient(new IngredientName(\"Oolong Tea\"), oolongTeaAmount))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 model.hasIngredient(new Ingredient(new IngredientName(\"Brown Sugar\"), brownSugarAmount));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (isNoChange) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook toSet \u003d new IngredientBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), milkAmount));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), pearlAmount));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), bobaAmount));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Oolong Tea\"), oolongTeaAmount));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), milkAmount));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook readOnlyToSet \u003d toSet;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(readOnlyToSet);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSet));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof SetAllCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand e \u003d (SetAllCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return milkAmount.equals(e.milkAmount)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 pearlAmount.equals(e.pearlAmount)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 bobaAmount.equals(e.bobaAmount)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 oolongTeaAmount.equals(e.oolongTeaAmount)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 brownSugarAmount.equals(e.brownSugarAmount);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Set the level of one specific ingredient to a specific level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-set\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Ingredient- %s, Amount- %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :set the ingredient in tCheck.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_INGREDIENT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_AMOUNT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_INGREDIENT + \"Milk \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + PREFIX_AMOUNT + \"90 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredient set: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"Ingredient level already set.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Ingredient target;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final SetIngredientDescriptor setIngredientDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs a set command with the given ingredient name and amount."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetCommand(Ingredient target, SetIngredientDescriptor setIngredientDescriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(setIngredientDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.setIngredientDescriptor \u003d setIngredientDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient ingredientToEdit \u003d lastShownList.get(lastShownList.indexOf(target));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient updatedIngredient \u003d createSetIngredient(target, setIngredientDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!ingredientToEdit.isSameIngredient(updatedIngredient)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 model.hasIngredient(updatedIngredient)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredient(ingredientToEdit, updatedIngredient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedIngredient));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static Ingredient createSetIngredient(Ingredient target,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                                                  SetIngredientDescriptor setIngredientDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount updatedAmount \u003d setIngredientDescriptor.getAmount().orElse(target.getAmount());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new Ingredient(target.getIngredientName(), updatedAmount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof SetCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand e \u003d (SetCommand) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return target.equals(e.target)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 setIngredientDescriptor.equals(e.setIngredientDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static class SetIngredientDescriptor {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        private IngredientName ingredientName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public SetIngredientDescriptor(){}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public SetIngredientDescriptor(SetIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public Optional\u003cIngredientName\u003e getIngredientName() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return Optional.ofNullable(ingredientName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            if (!(other instanceof SetCommand.SetIngredientDescriptor)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            SetCommand.SetIngredientDescriptor e \u003d (SetCommand.SetIngredientDescriptor) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return getIngredientName().equals(e.getIngredientName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetDefaultCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Set the ingredient to the default levels."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetDefaultCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-set-default\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients have been set to the default level:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Milk : 50 L\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Pearl : 20 KG\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Boba : 20 KG\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Oolong Tea : 50 L\\n\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"Brown Sugar : 20 KG\\n\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook defaultIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Oolong Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d defaultIngredientBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Unarchives a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"c-unarchive\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \": Unarchives the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_PERSON_SUCCESS \u003d \"Unarchived Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_PERSON_ALREADY_ACTIVE \u003d \"This person is already in the active list!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs an UnarchiveCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param targetIndex the index number shown in the displayed person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person personToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus currentStateOfPerson \u003d personToUnarchive.getArchiveStatus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!currentStateOfPerson.archiveStatus) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_ALREADY_ACTIVE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person unarchivedPerson \u003d personToUnarchive.unarchive();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.setPerson(personToUnarchive, unarchivedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_PERSON_SUCCESS, personToUnarchive.getName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Set the level of one specific ingredient to a specific level."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final char LINE_SEPARATOR \u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :list the ingredient levels in tCheck.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the list of all ingredients: \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private String ingredientList \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an Ingredient List command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientListCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : lastShownList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            ingredientList +\u003d i.toString() + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + ingredientList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientListCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientResetAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Set the level of one specific ingredient to a specific level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientResetAllCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-reset-all\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String RESET_AMOUNT \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :reset all the ingredient levels in tCheck.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredient levels are reset to 0.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_NO_CHANGE \u003d \"All Ingredient levels are already at 0.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        boolean isNotAlreadyReset \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount resetAmount \u003d new Amount(RESET_AMOUNT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : lastShownList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!i.getAmount().equals(resetAmount)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                isNotAlreadyReset \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!isNotAlreadyReset) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (Ingredient i : lastShownList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!i.getAmount().equals(resetAmount)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                Ingredient updatedIngredient \u003d createResetIngredient(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                model.setIngredient(i, updatedIngredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static Ingredient createResetIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Amount updatedAmount \u003d new Amount(RESET_AMOUNT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new Ingredient(target.getIngredientName(), updatedAmount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientResetAllCommand)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ingredientcommands/IngredientViewSingleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * View the level of a single specific ingredient."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientViewSingleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"i-view-single\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :views a single ingredient level in tCheck.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + PREFIX_INGREDIENT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + PREFIX_INGREDIENT + \"Milk \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is the ingredient and its level: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final IngredientName target;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private final ViewIngredientDescriptor viewIngredientDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Constructs an IngredientViewSingle command with the given ingredient name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientViewSingleCommand(IngredientName target, ViewIngredientDescriptor viewIngredientDescriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(viewIngredientDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        this.viewIngredientDescriptor \u003d viewIngredientDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Ingredient ingredientToView \u003d model.findIngredientByName(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientToView));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!(other instanceof IngredientViewSingleCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand e \u003d (IngredientViewSingleCommand) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return target.equals(e.target)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                \u0026\u0026 viewIngredientDescriptor.equals(e.viewIngredientDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static class ViewIngredientDescriptor {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        private IngredientName ingredientName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public ViewIngredientDescriptor(){}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public ViewIngredientDescriptor(ViewIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public Optional\u003cIngredientName\u003e getIngredientName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return Optional.ofNullable(ingredientName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (!(other instanceof SetCommand.SetIngredientDescriptor)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            IngredientViewSingleCommand.ViewIngredientDescriptor e \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    (IngredientViewSingleCommand.ViewIngredientDescriptor) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return getIngredientName().equals(e.getIngredientName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveStatus archiveStatus \u003d new ArchiveStatus(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Person person \u003d new Person(name, phone, address, archiveStatus, tagList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 3,
      "-": 54,
      "Persdre": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveAllCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.SetAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.SetDefaultCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientResetAllCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientViewSingleCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case ArchiveListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        case ArchiveAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveAllCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientViewSingleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientViewSingleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        case SetAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return new SetAllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        case SetDefaultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return new SetDefaultCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        case IngredientResetAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            return new IngredientResetAllCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case SalesUpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new SalesUpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        case SalesListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            return new SalesListCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 7,
      "Diwu-Yi": 11,
      "yanbingtao": 17,
      "WM71811": 15,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /* Prefix definitions for contacts */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /* Prefix definitions for ingredients */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_MILK \u003d new Prefix(\"M/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_PEARL \u003d new Prefix(\"P/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_BOBA \u003d new Prefix(\"B/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_OOLONG_TEA \u003d new Prefix(\"O/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final Prefix PREFIX_BROWN_SUGAR \u003d new Prefix(\"S/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /* Prefix definitions for drinks */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSBM \u003d new Prefix(\"BSBM/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSBBT \u003d new Prefix(\"BSBBT/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSBGT \u003d new Prefix(\"BSBGT/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSPM \u003d new Prefix(\"BSPM/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSPBT \u003d new Prefix(\"BSPBT/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final Prefix PREFIX_BSPGT \u003d new Prefix(\"BSPGT/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 7,
      "Diwu-Yi": 10,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/IngredientViewSingleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientViewSingleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": " * Parses input arguments and creates a new {@code IngredientViewSingleCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientViewSingleCommandParser implements Parser\u003cIngredientViewSingleCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code IngredientViewSingleCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * and returns a {@code IngredientViewSingleCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public IngredientViewSingleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                    IngredientViewSingleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Ingredient ingredientToView \u003d ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand.ViewIngredientDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand.ViewIngredientDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientName ingredientName \u003d ingredientToView.getIngredientName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return new IngredientViewSingleCommand(ingredientName, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "WM71811": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount has to be a non-negative integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_INVALID_INGREDIENT_NAME \u003d \"The ingredient is not found, it \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            + \"has to be chosen from : \" + Arrays.toString(IngredientName.INGREDIENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_SOLD \u003d \"The entered number of drinks sold should be a \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            + \"non-negative integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parse a string representing amount into an amount."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedAmount)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parse a string representing ingredient into an ingredient."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static Ingredient parseIngredient(String ingredient) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String trimmedIngredient \u003d ingredient.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredient)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new Ingredient(new IngredientName(trimmedIngredient));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Parses a {@code String numberSold} into an {@code Integer}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws ParseException if the given {@code numberSold} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public static Integer parseNumberSold(String numberSold) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(numberSold);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String trimmedNumberSold \u003d numberSold.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (!StringUtil.isUnsignedInteger(trimmedNumberSold)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUMBER_SOLD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return Integer.parseInt(trimmedNumberSold);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 17,
      "Diwu-Yi": 31,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SalesUpdateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBBT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBGT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPBT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPGT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSPM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Parses input arguments and creates a new SalesUpdateCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommandParser implements Parser\u003cSalesUpdateCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private static final int INVALID_INPUT \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SalesUpdateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * and returns a SalesUpdateCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * The default value is 0 for drink items which the user did not provide the input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param args user input to parse"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return a SalesUpdateCommand object for execution"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesUpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Prefix[] drinkPrefixes \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new Prefix[] {PREFIX_BSBM, PREFIX_BSBBT, PREFIX_BSBGT, PREFIX_BSPM, PREFIX_BSPBT, PREFIX_BSPGT};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, drinkPrefixes);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int drinkCounter \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // populate the map with argmultimap\u0027s values"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (int i \u003d 0; i \u003c drinkPrefixes.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Optional\u003cString\u003e numSold \u003d argMultimap.getValue(drinkPrefixes[i]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            String value \u003d numSold.orElse(\"0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            int intValue \u003d ParserUtil.parseNumberSold(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            if (intValue \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                drinkCounter++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Drink drink \u003d Drink.valueOf(drinkPrefixes[i].toString().replace(\"/\", \"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            sales.put(drink, intValue);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (drinkCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesUpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetAllCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOBA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BROWN_SUGAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OOLONG_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PEARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.SetAllCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetAllCommandParser implements Parser\u003cSetAllCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetAllCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * and returns an SetAllCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetAllCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MILK, PREFIX_PEARL,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        PREFIX_BOBA, PREFIX_OOLONG_TEA, PREFIX_BROWN_SUGAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MILK, PREFIX_PEARL, PREFIX_BOBA,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                PREFIX_OOLONG_TEA, PREFIX_BROWN_SUGAR)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetAllCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount milkAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_MILK).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount pearlAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_PEARL).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount bobaAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_BOBA).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount oolongTeaAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_OOLONG_TEA).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount brownSugarAmount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_BROWN_SUGAR).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new SetAllCommand(milkAmount, pearlAmount, bobaAmount, oolongTeaAmount, brownSugarAmount);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.SetCommand.SetIngredientDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient ingredientToSet \u003d ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetCommand.SetIngredientDescriptor descriptor \u003d new SetIngredientDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            descriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!descriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new ParseException(SetCommand.MESSAGE_NO_CHANGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return new SetCommand(ingredientToSet, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class UnarchiveCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * and returns a UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 4,
      "yanbingtao": 2,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Drink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Represents the types of drink items available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public enum Drink {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSBM (\"Brown Sugar Boba Milk\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSBBT (\"Brown Sugar Boba Black Tea\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSBGT (\"Brown Sugar Boba Green Tea\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSPM (\"Brown Sugar Pearl Milk\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSPBT (\"Brown Sugar Pearl Black Tea\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    BSPGT (\"Brown Sugar Pearl Green Tea\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    // TODO: drink ingredients?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    Drink(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientBook implements ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientBook() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientBook(ReadOnlyIngredientBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        setData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setData(ReadOnlyIngredientBook newAmount) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(newAmount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        setIngredients(newAmount.getIngredientList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //// ingredient-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(target, newAmount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredients.setIngredient(target, newAmount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the ingredient with the input ingredient name, if"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * not found, return null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ingredientName ingredient name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return ingredient with the input ingredient name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredients.findIngredientByName(ingredientName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            builder.append(ingredients.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + \" ingredients\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + builder;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof IngredientBook // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 ingredients.equals(((IngredientBook) other).ingredients));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredients.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 103,
      "WM71811": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /** {@code Predicate} that evaluates to true if person\u0027s archive status is false. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_ACTIVE_PERSONS \u003d person -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            !(person.getArchiveStatus().archiveStatus);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /** {@code Predicate} that evaluates to true if person\u0027s archive status is true. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_ARCHIVED_PERSONS \u003d person -\u003e ("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            person.getArchiveStatus().archiveStatus);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Replaces ingredient book data with the data in {@code ingredientBook}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    void setIngredientBook(ReadOnlyIngredientBook ingredientBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns the IngredientBook"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient newAmount);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    Ingredient findIngredientByName(IngredientName target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    void setSalesBook(SalesBook salesBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    SalesBook getSalesBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    void overwrite(Map\u003cDrink, Integer\u003e salesInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns an unmodifiable view of the filtered ingredient list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 7,
      "Diwu-Yi": 26,
      "yanbingtao": 7,
      "WM71811": 3,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final SalesBook salesBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final IngredientBook ingredientBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, SalesBook salesBook,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        ReadOnlyIngredientBook ingredientBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireAllNonNull(addressBook, salesBook, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" sales book: \" + salesBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + \" Ingredients book: \" + ingredientBook"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                + \" and user prefs\" + \" \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.salesBook \u003d new SalesBook(salesBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientBook \u003d new IngredientBook(ingredientBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        filteredIngredients \u003d new FilteredList\u003c\u003e(this.ingredientBook.getIngredientList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this(new AddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredientBook(ReadOnlyIngredientBook ingredientBook) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientBook.setData(ingredientBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    //Added here"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientBook.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SalesBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setSalesBook(SalesBook salesBook) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this.salesBook.resetData(salesBook);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesBook getSalesBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return salesBook;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwrite(Map\u003cDrink, Integer\u003e salesInput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        if (salesBook.isEmptySalesBook()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            salesBook.setRecord(salesInput);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            salesBook.overwriteSales(salesInput);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IngredientBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(target, newAmount);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ingredientBook.setIngredient(target, newAmount);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return ingredientBook.findIngredientByName(ingredientName);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return filteredIngredients;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 salesBook.equals(other.salesBook)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 ingredientBook.equals(other.ingredientBook)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 29,
      "Diwu-Yi": 47,
      "yanbingtao": 3,
      "WM71811": 8,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public interface ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SalesBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Wraps all data related to drink sales at the sales-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " * Fixed Drink types."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Map\u003cDrink, Integer\u003e record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Creates a SalesBook using the record in {@code toBeCopied}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param toBeCopied the SalesBook to be copied from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public SalesBook(SalesBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Resets the existing data of this {@code SalesBook} with {@code newData}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void resetData(SalesBook newData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        setRecord(newData.getRecord());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Sets the sales record to the sales information provided by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * This is used only at initialisation of the sales record."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param sales sales information that has been parsed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setRecord(Map\u003cDrink, Integer\u003e sales) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record \u003d sales;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public Map\u003cDrink, Integer\u003e getRecord() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Overwrites existing sales record based on the sales information provided by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * This is used after sales record has been initialised."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @param sales sales information that has been parsed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwriteSales(Map\u003cDrink, Integer\u003e sales) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        requireNonNull(sales);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e newRecord \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // for all the sales items in sales, overwrite them in record"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        for (Drink key : sales.keySet()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Optional\u003cInteger\u003e userInput \u003d Optional.ofNullable(sales.get(key));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            Optional\u003cInteger\u003e changedValue \u003d userInput.map(x -\u003e x \u003d\u003d 0 ? record.get(key) : sales.get(key));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            newRecord.put(key, changedValue.get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record \u003d newRecord;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * Checks whether the sales record is empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     * @return true if the sales record is empty, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean isEmptySalesBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record.isEmpty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //    TODO: method to show the map on UI."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //     * Returns an unmodifiable view of the sales record map."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //     * This map will not contain any duplicate drink items."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //    public ObservableMap\u003cDrink, Integer\u003e getSalesRecord() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //        // TODO: Use ObservableMap for UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //        return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        //return record.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        StringBuilder display \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        record.forEach((k, v) -\u003e display.append(k.getName() + \" (\" + k + \") : \" + v + \"\\n\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return display.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                || (other instanceof SalesBook // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                \u0026\u0026 record.equals(((SalesBook) other).record));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        return record.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Represent the amount of a particular ingredient in tCheck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \"Amount should only contain numbers, and it should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public final String amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs an amount from the given string representing the amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param amount a string representing amount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param test the given string representing the amount of an ingredient"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 amount.equals(((Amount) other).amount)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Represents ALL ingredient that is tracked by tCheck."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * OOP development plan : Each ingredient can be extracted out to make the design more OOP."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    // Identity field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs an ingredient with the given amount and ingredient name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Note that the ingredient name can only be one of the static"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * String constant declared in this class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param amount         an integer representing the level of the ingredient"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param ingredientName name of the ingredient"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Ingredient(IngredientName ingredientName, Amount amount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(ingredientName, amount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Constructs an ingredient with the given name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Amount is set to 0 by default."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param ingredientName name of the ingredient"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Ingredient(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.amount \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientName getIngredientName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return this.ingredientName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean isSameIngredient(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 otherIngredient.getIngredientName().equals(getIngredientName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 otherIngredient.getAmount().equals(getAmount());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if both ingredients have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * This defines a stronger notion of equality between two ingredients."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient otherIngredient \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return otherIngredient.getIngredientName().equals(getIngredientName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 otherIngredient.getAmount().equals(getAmount());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Objects.hash(ingredientName, amount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        builder.append(\" Ingredient: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(getIngredientName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(\", \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Represents an ingredient\u0027s name in tCheck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \"Ingredient Names should only be chosen from the given list,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    + \" and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static final String[] INGREDIENTS \u003d new String[]{\"Milk\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        \"Pearl\", \"Boba\", \"Oolong Tea\", \"Brown Sugar\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public final String ingredientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public IngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if the given ingredientName is a valid ingredient name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * @param ingredientName a given string of ingredient name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public static boolean isValidIngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return Arrays.asList(INGREDIENTS).contains(ingredientName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof IngredientName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((IngredientName) other).ingredientName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return ingredientName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NoChangeIngredientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Ingredient(new IngredientName(\"Brown Sugar\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the ingredient book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIngredient);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(target, newAmount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (internalList.contains(newAmount)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new NoChangeIngredientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.set(index, newAmount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        if (!ingredientsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new NoChangeIngredientException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.setAll(ingredients);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * Returns the ingredient with the input ingredient name, if"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * not found, return null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @param ingredientName ingredient name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     * @return ingredient with the input ingredient name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WM71811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size() - 1; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            if (internalList.get(i).getIngredientName().equals(ingredientName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                return internalList.get(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Ingredient get(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                if (ingredients.get(i).isSameIngredient(ingredients.get(j))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 107,
      "WM71811": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/NoChangeIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Signals that the operation will not change any amounts (Ingredients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * name and amount)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "public class NoChangeIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public NoChangeIngredientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        super(\"The operation does not change any of the existing amounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ArchiveStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " * Represents a Person\u0027s archive status in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveStatus {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Archive status should only be true or false\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(true|false)$\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public final boolean archiveStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs a false {@code archiveStatus} of archival if no parameter passed in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveStatus() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Constructs a {@code archiveStatus} based on the archiveStatus passed in."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @param archiveStatus A valid archiveStatus of archival."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveStatus(boolean archiveStatus) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireNonNull(archiveStatus);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Returns true if a given string is a valid archiveStatus."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static boolean isValidArchiveStatus(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return String.valueOf(archiveStatus);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || (other instanceof ArchiveStatus"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 archiveStatus \u003d\u003d ((ArchiveStatus) other).archiveStatus);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return String.valueOf(archiveStatus).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Person(Name name, Phone phone, Address address, ArchiveStatus archiveStatus, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        requireAllNonNull(name, phone, address, tags, archiveStatus);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public ArchiveStatus getArchiveStatus() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return archiveStatus;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the person\u0027s archive status to true. It\u0027s equivalent to having archived the person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A Person whose archive status is true."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Person archive() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new Person(this.name, this.phone, this.address, new ArchiveStatus(true),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                this.tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the person\u0027s archive status to false. It\u0027s equivalent to unarchive the person."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * @return A Person whose archive status is false."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public Person unarchive() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new Person(this.name, this.phone, this.address, new ArchiveStatus(false),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                this.tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (other \u003d\u003d null || Boolean.valueOf(archiveStatus.toString())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                || Boolean.valueOf(otherPerson.archiveStatus.toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                \u0026\u0026 otherPerson.getArchiveStatus().equals(getArchiveStatus());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return Objects.hash(name, phone, address, archiveStatus, tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 35,
      "-": 108,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new ArchiveStatus(false),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 7,
      "-": 53,
      "Persdre": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private final String archiveStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                             @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                             @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                             @JsonProperty(\"archiveStatus\") String archiveStatus,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        archiveStatus \u003d source.getArchiveStatus().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        if (!ArchiveStatus.isValidArchiveStatus(archiveStatus)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            throw new IllegalValueException(ArchiveStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        final ArchiveStatus modelArchiveStatus \u003d new ArchiveStatus(Boolean.parseBoolean(archiveStatus));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new Person(modelName, modelPhone, modelAddress, modelArchiveStatus, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 14,
      "-": 94,
      "Persdre": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t12-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String BRIEF_COMMAND_EXPLANATION \u003d \"The list of commands that tCheck can recognize are\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \" as follows:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-add n/NAME p/PHONE_NUMBER e/EMERGENCY_CONTACT [t/TAG]…: Adds a person to the contact list. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-list: Shows a list of all persons in the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-edit INDEX [n/NAME] [e/EMERGENCY_CONTACT] [t/TAG]…: Edits the corresponding contact information in\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \" the contact list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-search KEYWORD [MORE_KEYWORDS]: Finds all contacts that contain the KEYWORD(s).\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-delete INDEX: Deletes the specified person from the address book.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-clear: Clears all entries from the contact list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-archive INDEX: Archives the specified employee’s contact detail from tCheck.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-archive-all: Archives all employees’ contact detail from tCheck.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-archive-list: Shows a list of all archived employees’ contact details in tCheck.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"c-unarchive INDEX: Unarchives the specified employees’ contact detail.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-set i/INGREDIENT_NAME m/AMOUNT: Sets the level for one type of ingredient individually.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-set-default: Sets all ingredient levels to a standard default amount.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-view-single i/INGREDIENT_NAME: Prints a particular type of ingredient\u0027s ingredient level. \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-reset-all: Sets all ingredient levels to 0 by updating the database when the command is \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"entered.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"i-list: Prints the ingredient levels for all ingredient types retrieved from the database.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"s-list: Shows a list of all types of drinks sold for the current day.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"s-set: A/NUM B/NUM C/NUM ...: Asks the user to enter the number of each type of drink sold for the \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"current day.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"help: Displays a brief explanation of the list of commands, and a link to the help page, \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"which is the user guide.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"exit: Exits the program.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public static final String HELP_MESSAGE \u003d BRIEF_COMMAND_EXPLANATION + \"To explore more details, \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            + \"please refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    private Label commandList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        //commandList.setText(BRIEF_COMMAND_EXPLANATION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 34,
      "-": 100
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Persdre"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            \u003cStackPane minWidth\u003d\"850.0\" prefWidth\u003d\"900.0\"  styleClass\u003d\"help-window-anchorpane\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" styleClass\u003d\"help-window\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                            \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                            StackPane.alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                    \u003cInsets bottom\u003d\"30.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "Persdre": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help Message\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "WM71811": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"20\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    //---------------- Tests for isUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void isUnsignedInteger() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(StringUtil.isUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(StringUtil.isUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 35,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        String deleteCommand \u003d \"c-delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 2,
      "yanbingtao": 1,
      "-": 158,
      "Persdre": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public void setIngredientBook(ReadOnlyIngredientBook newDara) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public void setIngredient(Ingredient target, Ingredient newAmount) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public void setSalesBook(SalesBook salesBook) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public SalesBook getSalesBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        public void overwrite(Map\u003cDrink, Integer\u003e salesInput) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        public Ingredient findIngredientByName(IngredientName ingredientName) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WM71811"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 13,
      "Diwu-Yi": 32,
      "WM71811": 7,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        showPersonAtIndex(model, TypicalIndexes.INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 1,
      "yanbingtao": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false).hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 5,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "Persdre": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 9,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 4,
      "Diwu-Yi": 12,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 6,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SalesListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getSalesBook(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute_displaysSalesRecord() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(SalesListCommand.MESSAGE_SUCCESS, model.getSalesBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertCommandSuccess(new SalesListCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SalesUpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void execute_updateOneDrinkItem_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final int numBsbmSold \u003d 80;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, numBsbmSold);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand command \u003d new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(SalesUpdateCommand.MESSAGE_SUCCESS, sales.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedModel.overwrite(sales);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final HashMap\u003cDrink, Integer\u003e standardSales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        standardSales.put(Drink.BSBBT, 100);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final SalesUpdateCommand standardCommand \u003d new SalesUpdateCommand(standardSales);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand commandWithSameValues \u003d new SalesUpdateCommand(standardSales);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different sales -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final HashMap\u003cDrink, Integer\u003e differentSales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        differentSales.put(Drink.BSBBT, 10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(standardCommand.equals(new SalesUpdateCommand(differentSales)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 59,
      "Diwu-Yi": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetAllCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for SetAllCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetAllCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount MILK_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount PEARL_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount BOBA_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount OOLONG_TEA_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Amount BROWN_SUGAR_AMOUNT \u003d new Amount(\"10\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand setAllCommand \u003d new SetAllCommand(MILK_AMOUNT, PEARL_AMOUNT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, OOLONG_TEA_AMOUNT, BROWN_SUGAR_AMOUNT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook toSet \u003d new IngredientBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Oolong Tea\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        toSet.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"10\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook readOnlyToSet \u003d toSet;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String expectedMessage \u003d String.format(SetAllCommand.MESSAGE_SUCCESS, toSet);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new ModelManager(new AddressBook(model.getAddressBook()), model.getSalesBook(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                        model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredientBook(readOnlyToSet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(setAllCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_noChangeInAmounts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand setAllCommand \u003d new SetAllCommand(new Amount(\"0\"), new Amount(\"0\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Amount(\"0\"), new Amount(\"0\"), new Amount(\"0\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String expectedMessage \u003d SetAllCommand.MESSAGE_NO_CHANGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandFailure(setAllCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        final SetAllCommand standardCommand \u003d new SetAllCommand(MILK_AMOUNT, PEARL_AMOUNT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, OOLONG_TEA_AMOUNT, BROWN_SUGAR_AMOUNT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand commandWithSameValues \u003d new SetAllCommand(MILK_AMOUNT, PEARL_AMOUNT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, OOLONG_TEA_AMOUNT, BROWN_SUGAR_AMOUNT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(standardCommand.equals(new SetAllCommand(new Amount(\"30\"), PEARL_AMOUNT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA_AMOUNT, OOLONG_TEA_AMOUNT, BROWN_SUGAR_AMOUNT)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetDefaultCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.SalesBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetDefaultCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_zeroIngredientBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook defaultIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Oolong Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d defaultIngredientBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(new SetDefaultCommand(), model, SetDefaultCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"100\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        model.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"120\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new SalesBook(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook defaultIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Oolong Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d defaultIngredientBook;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertCommandSuccess(new SetDefaultCommand(), model, SetDefaultCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ingredientcommands/IngredientViewSingleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WM71811"
        },
        "content": "package seedu.address.logic.commands.ingredientcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.IngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WM71811"
        },
        "content": "public class IngredientViewSingleCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientBook defaultIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Milk\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Ingredient(new IngredientName(\"Milk\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Pearl\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Ingredient(new IngredientName(\"Pearl\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Boba\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Ingredient(new IngredientName(\"Boba\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Oolong Tea\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Ingredient(new IngredientName(\"Oolong Tea\"), new Amount(\"50\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        defaultIngredientBook.setIngredient(new Ingredient(new IngredientName(\"Brown Sugar\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                new Ingredient(new IngredientName(\"Brown Sugar\"), new Amount(\"20\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        ReadOnlyIngredientBook defaultReadOnlyIngredientBook \u003d defaultIngredientBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        expectedModel.setIngredientBook(defaultReadOnlyIngredientBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand.ViewIngredientDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand.ViewIngredientDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final IngredientViewSingleCommand standardCommand \u003d new"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Milk\"), descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand commandWithSameValues \u003d new"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Milk\"), descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        // different ingredient names -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand commandWithDifferentValues \u003d new"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                IngredientViewSingleCommand(new IngredientName(\"Boba\"), descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithDifferentValues));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WM71811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WM71811": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "Persdre": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientResetAllCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WM71811"
        },
        "content": "import seedu.address.logic.commands.ingredientcommands.IngredientViewSingleCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void parseCommand_resetAllIngredients() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientResetAllCommand.COMMAND_WORD) instanceof IngredientResetAllCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientResetAllCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                instanceof IngredientResetAllCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void parseCommand_ingredientViewSingle() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        final String userInput \u003d IngredientViewSingleCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WM71811"
        },
        "content": "                + \" \" + PREFIX_INGREDIENT + \"Milk \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        IngredientViewSingleCommand command \u003d (IngredientViewSingleCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(command instanceof IngredientViewSingleCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    public void parseCommand_ingredientList() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientListCommand.COMMAND_WORD) instanceof IngredientListCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WM71811"
        },
        "content": "        assertTrue(parser.parseCommand(IngredientListCommand.COMMAND_WORD + \" 3\") instanceof IngredientListCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WM71811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WM71811"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseCommand_salesUpdate() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final int numBsbmSold \u003d 80;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        final String userInput \u003d SalesUpdateCommand.COMMAND_WORD + \" \" + PREFIX_BSBM + numBsbmSold;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand command \u003d (SalesUpdateCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, numBsbmSold);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(new SalesUpdateCommand(sales), command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseCommand_salesList() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(parser.parseCommand(SalesListCommand.COMMAND_WORD) instanceof SalesListCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(parser.parseCommand(SalesListCommand.COMMAND_WORD + \" 3\") instanceof SalesListCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 26,
      "WM71811": 24,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArchiveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "public class ArchiveCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 186,
      "Persdre": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseNumberSold_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberSold(\"-1\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberSold(\"+100\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parseNumberSold_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(123, ParserUtil.parseNumberSold(\"123\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(123, ParserUtil.parseNumberSold(\"  123  \"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 16,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SalesUpdateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBBT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BSBM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.logic.commands.SalesUpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import seedu.address.model.Drink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesUpdateCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private SalesUpdateCommandParser parser \u003d new SalesUpdateCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parse_salesItemSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int numBsbmSold \u003d 80;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        int numBsbbtSold \u003d 20;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, numBsbmSold);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // have one item"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String userInput \u003d SalesUpdateCommand.COMMAND_WORD + \" \" + PREFIX_BSBM + numBsbmSold;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesUpdateCommand expectedCommand \u003d new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // have two item"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, numBsbbtSold);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        userInput \u003d SalesUpdateCommand.COMMAND_WORD + \" \" + PREFIX_BSBM + numBsbmSold"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "                + \" \" + PREFIX_BSBBT + numBsbbtSold;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        expectedCommand \u003d new SalesUpdateCommand(sales);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parse_missingSalesItem_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesUpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseFailure(parser, SalesUpdateCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void parse_negativeSalesNumber_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SalesUpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertParseFailure(parser, SalesUpdateCommand.COMMAND_WORD + \"BSBM/-100\", expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetAllCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOBA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BROWN_SUGAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MILK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OOLONG_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PEARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.logic.commands.SetAllCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class SetAllCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String MILK_AMOUNT \u003d \" \" + PREFIX_MILK + \"10 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String PEARL_AMOUNT \u003d \" \" + PREFIX_PEARL + \"10 \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String BOBA_AMOUNT \u003d \" \" + PREFIX_BOBA + \"10 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String OOLONG_TEA_AMOUNT \u003d \" \" + PREFIX_OOLONG_TEA + \"10 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String BROWN_SUGAR_AMOUNT \u003d \" \" + PREFIX_BROWN_SUGAR + \"10 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private SetAllCommandParser parser \u003d new SetAllCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, MILK_AMOUNT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, MILK_AMOUNT + PEARL_AMOUNT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + BOBA_AMOUNT + OOLONG_TEA_AMOUNT , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid number being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"0\" + MILK_AMOUNT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + PEARL_AMOUNT + BOBA_AMOUNT + OOLONG_TEA_AMOUNT + BROWN_SUGAR_AMOUNT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"some random string\" + MILK_AMOUNT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + PEARL_AMOUNT + BOBA_AMOUNT + OOLONG_TEA_AMOUNT + BROWN_SUGAR_AMOUNT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseFailure(parser, \"i/ string\" + MILK_AMOUNT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + PEARL_AMOUNT + BOBA_AMOUNT + OOLONG_TEA_AMOUNT + BROWN_SUGAR_AMOUNT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String userInput \u003d MILK_AMOUNT + PEARL_AMOUNT"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                + BOBA_AMOUNT + OOLONG_TEA_AMOUNT + BROWN_SUGAR_AMOUNT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        SetAllCommand expectedCommand \u003d new SetAllCommand(new Amount(\"10\"), new Amount(\"10\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                new Amount(\"10\"), new Amount(\"10\"), new Amount(\"10\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACTIVE_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(new SalesBook(), modelManager.getSalesBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwrite_salesBookNew_initialisedAndUpdateSalesEntry() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        modelManager.overwrite(sales);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(sales, modelManager.getSalesBook().getRecord());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwrite_salesBookInitialised_updateByOverwriteSalesEntry() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        modelManager.overwrite(sales);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 80);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        modelManager.overwrite(sales);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(sales, modelManager.getSalesBook().getRecord());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook salesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        IngredientBook ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.setRecord(sales);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook differentSalesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, salesBook,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different salesBook -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentSalesBook,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_ACTIVE_PERSONS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, salesBook,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                ingredientBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 44,
      "Diwu-Yi": 13,
      "yanbingtao": 2,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SalesBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "public class SalesBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final SalesBook salesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    private final HashMap\u003cDrink, Integer\u003e sales \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(Collections.emptyMap(), salesBook.getRecord());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e salesBook.resetData(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void resetData_withValidSalesBook_replacesData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook newData \u003d new SalesBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        newData.setRecord(sales);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(newData, salesBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setRecord_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e salesBook.setRecord(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void setRecord_allDrinksInitialised_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.setRecord(sales);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(Drink.values().length, salesBook.getRecord().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwriteSales_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e salesBook.overwriteSales(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void overwriteSales_withOneDrinkItems_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        setRecord_allDrinksInitialised_success();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 90);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.overwriteSales(sales);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertEquals(sales, salesBook.getRecord());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    void isEmptySalesBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesBook.isEmptySalesBook());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBM, 80);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBBT, 20);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSBGT, 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPM, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPBT, 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.setRecord(sales);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook sameSalesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sameSalesBook.setRecord(sales);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        SalesBook differentSalesBook \u003d new SalesBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        sales.put(Drink.BSPGT, 100);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        salesBook.setRecord(sales);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesBook.equals(sameSalesBook));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertTrue(salesBook.equals(salesBook));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesBook.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesBook.equals(sales));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        // different salesBook -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "        assertFalse(salesBook.equals(differentSalesBook));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ureshiiYing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ureshiiYing": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid amount numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"-91\")); // negative number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1p0\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"2 1\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // valid amount numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // exactly 1 number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"93121534\")); //large amounts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount test1 \u003d new Amount(\"90\"); // two digits"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount test2 \u003d new Amount(\"0\"); // edge case, 0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Amount test3 \u003d new Amount(\"93121543\"); // large amounts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(test1.toString(), \"90\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(test2.toString(), \"0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(test3.toString(), \"93121543\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class IngredientNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        String invalidIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientName(invalidIngredientName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void isValidIngredientName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientName.isValidIngredientName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"Milk*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"Black Sugar\")); // does not appear in the predefined list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Milk\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Boba\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Pearl\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Brown Sugar\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Oolong Tea\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class IngredientTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient OOLONG_TEA \u003d new Ingredient(new IngredientName(\"Oolong Tea\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient OOLONG_TEA_VALID_AMOUNT \u003d new Ingredient(new IngredientName("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            \"Oolong Tea\"), new Amount(\"90\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void isSameIngredient() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(OOLONG_TEA.isSameIngredient(OOLONG_TEA));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.isSameIngredient(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.isSameIngredient(OOLONG_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient editedOolongTea \u003d new Ingredient(new IngredientName(\"Boba\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.isSameIngredient(editedOolongTea));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        Ingredient oolongCopy \u003d new Ingredient(new IngredientName(\"Oolong Tea\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(OOLONG_TEA.equals(oolongCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(OOLONG_TEA.equals(OOLONG_TEA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.equals(new Ingredient(new IngredientName(\"Boba\"))));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertFalse(OOLONG_TEA.equals(OOLONG_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/UniqueIngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NoChangeIngredientException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "class UniqueIngredientListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final UniqueIngredientList uniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final UniqueIngredientList myIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient OOLONG_TEA \u003d new Ingredient(new IngredientName(\"Oolong Tea\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient OOLONG_TEA_VALID_AMOUNT \u003d new Ingredient(new IngredientName(\"Oolong Tea\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            new Amount(\"90\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final Ingredient BOBA \u003d new Ingredient(new IngredientName(\"Boba\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    private static final List\u003cIngredient\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void contains_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(OOLONG_TEA));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_nullTargetIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(null,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                OOLONG_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_nullEditedIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(OOLONG_TEA,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_targetIngredientNotInList_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e uniqueIngredientList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                .setIngredient(new Ingredient(new IngredientName(\"Olong Tea\")), OOLONG_TEA_VALID_AMOUNT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_throwsNoChangeIngredientException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NoChangeIngredientException.class, ()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            -\u003e uniqueIngredientList.setIngredient(OOLONG_TEA, OOLONG_TEA));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentAmount_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        System.out.println(uniqueIngredientList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        myIngredientList.setIngredient(OOLONG_TEA, OOLONG_TEA_VALID_AMOUNT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.setIngredient(OOLONG_TEA, OOLONG_TEA_VALID_AMOUNT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, myIngredientList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredient_editedIngredientHasNoChange_throwsNoChangeIngredientException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NoChangeIngredientException.class, () -\u003e uniqueIngredientList.setIngredient(OOLONG_TEA,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                BOBA));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_nullUniqueIngredientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                (UniqueIngredientList) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_uniqueIngredientList_replacesOwnListWithProvidedUniqueIngredientList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.setIngredients(expectedUniqueIngredientList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "                (List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Pearl\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Boba\")));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Oolong Tea\"), new Amount(\"90\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        internalList.add(new Ingredient(new IngredientName(\"Brown Sugar\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        uniqueIngredientList.setIngredients(internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        expectedUniqueIngredientList.setIngredient(OOLONG_TEA, OOLONG_TEA_VALID_AMOUNT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void setIngredients_listWithDuplicateIngredients_throwsNoChangeIngredientException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(OOLONG_TEA, OOLONG_TEA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(NoChangeIngredientException.class, ()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            -\u003e uniqueIngredientList.setIngredients(listWithDuplicateIngredients));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "            -\u003e uniqueIngredientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Diwu-Yi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Diwu-Yi": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // Keywords match phone, and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Persdre"
        },
        "content": "                .withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "Persdre": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, same phone, different address, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, different phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Persdre"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "Persdre": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String INVALID_ARCHIVESTATUS \u003d \"yes\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private static final String VALID_ARCHIVESTATUS \u003d BENSON.getArchiveStatus().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_ARCHIVESTATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_ADDRESS, VALID_ARCHIVESTATUS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_ARCHIVESTATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_ADDRESS, VALID_ARCHIVESTATUS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_ARCHIVESTATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ARCHIVESTATUS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_ARCHIVESTATUS, invalidTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 12,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "import seedu.address.model.person.ArchiveStatus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public static final boolean DEFAULT_ARCHIVESTATUS \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    private ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        archiveStatus \u003d new ArchiveStatus(DEFAULT_ARCHIVESTATUS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        archiveStatus \u003d personToCopy.getArchiveStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "     * Sets the {@code Archive} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "    public PersonBuilder withArchiveStatus(String state) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        this.archiveStatus \u003d new ArchiveStatus(Boolean.valueOf(state));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "        return new Person(name, phone, address, archiveStatus, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 10,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withArchiveStatus(\"false\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withArchiveStatus(\"false\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withArchiveStatus(\"false\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Persdre"
        },
        "content": "            .withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(\"10th street\").withArchiveStatus(\"false\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(\"michegan ave\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(\"little tokyo\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(\"4th street\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(\"little india\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(\"chicago ave\").withArchiveStatus(\"false\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withArchiveStatus(\"false\").withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanbingtao"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withArchiveStatus(\"false\").withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanbingtao": 11,
      "-": 63,
      "Persdre": 3
    }
  }
]
