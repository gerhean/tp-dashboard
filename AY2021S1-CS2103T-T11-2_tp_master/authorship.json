[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T11-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "# Hall-y"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Hall-y is a hall residents\u0027 contact management application. It helps to keep track and update the residents\u0027 record, so the hall admin staff can easily find the residents based on the saved records."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "![UI Mockup](/docs/images/Ui.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 2,
      "lowjiefeng1998": 7,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 4,
      "-": 72
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "### Pang Biao Yi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003cimg src\u003d\"images/schoolex.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "[[github](http://github.com/schoolex)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "[[portfolio](team/pangbiaoyi.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "### Tee Kok Siang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "\u003cimg src\u003d\"images/teekoksiang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "[[github](http://github.com/teekoksiang)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "[[portfolio](team/teekoksiang.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### Lee Yan Cheng"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003cimg src\u003d\"images/yanchenglee98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "[[github](http://github.com/yanchenglee98)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "[[portfolio](team/leeyancheng.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* Responsibilities: Scheduling, Tracking and Code quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### Aung Thuya Oo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "\u003cimg src\u003d\"images/athuyaoo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "[[github](http://github.com/athuyaoo)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "[[portfolio](team/aungthuyaoo.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* Responsibilities: Git expert and Integration"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### Low Jie Feng"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cimg src\u003d\"images/lowjiefeng1998.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[[github](http://github.com/lowjiefeng1998)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[[portfolio](team/lowjiefeng.md)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* Responsibilities: Testing"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 6,
      "teekoksiang": 3,
      "lowjiefeng1998": 5,
      "-": 32,
      "athuyaoo": 6,
      "schoolex": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "# Hall-y Developer Guide"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Version 1.3  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "_Updated on 23/10/2020_"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Prepared by:  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Aung Thuya Oo  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Lee Yan Cheng  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Low Jie Feng  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Pang Biao Yi  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Tee Kok Siang  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "## **1 Introduction**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "### **1.1 Purpose**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": "This document describes the architecture and system design of Hall-y, a hall residents\u0027 contact management application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The goal of this document is to cover the high-level system architecture and design of this application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The document starts off by describing the high level overview before going into the details of the various components in their respective subsections."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "### **1.2 Audience**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "This document is targeted at developers and designers who wish to do further development on the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Software testers can utilize this document to aid them in uncovering bugs during testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "### **1.3 Development environment** "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Developers and designers who wish to do further development on the app can refer to the guide [_Setting up and getting started_](SettingUp.md). "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "to set up their development environment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **2 Design**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 2.1 Architecture"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***Architecture Diagram*** given below explains the high-level design of the App."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Event           | Description"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "--------------- | -----------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "At app launch   | Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "At shut down    | Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[**`Commons`**](#26-common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The rest of the App consists of four components:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Component                            | Description"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "------------------------------------ | -----------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[**`UI`**](#22-ui-component)            | Builds the UI of the App."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[**`Logic`**](#23-logic-component)      | Executes the different commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[**`Model`**](#24-model-component)      | Holds the data of the App in memory."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[**`Storage`**](#25-storage-component)  | Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "For example, the ***Logic Class Diagram*** given below shows the `Logic` component. It defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***Sequence Diagram*** given below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### 2.2 UI Component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***UI Class Diagram*** given below shows the structure of the `UI` component."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The `UI` component consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### 2.3 Logic Component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***Logic Class Diagram*** given below shows the structure of the `Logic` component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The `Logic` component consists of `LogicManager`, `Parser`, `Command`, etc. The `Logic` component parses and executes the user command.   "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The `Parser` component is defined in `src/main/java/seedu.address/logic/parser` folder, `XYZCommandParser` inherits from `Parser` and parses the respective `XYZCommand`. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The `Command` component is defined in `src/main/java/seedu.address/logic/commands` folder, `XYZCommand` inherits from `Command`. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The following steps explain the interactions of `Logic` component to parse and execute the user command:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***Logic Component Sequence Diagram*** given below shows the interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ":information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### 2.4 Model Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***Model Class Diagram*** given below shows the structure of the `Model` component."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The `Model` component,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ":information_source: **Note:** The ***Alternative Model Class Diagram*** given below shows an alternative (arguably, more OOP) model of the `Model` component."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "It has a `Tag` list in the `Hall-y`, which `Person` references. This allows `Hall-y` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### 2.5 Storage Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The ***Storage Class Diagram*** given below shows the structure of the `Storage` component."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T11-2/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* saves `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* saves the address book data in json format and read it back."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### 2.6 Common Classes"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Classes used by multiple components are in the `seedu.AddressBook.commons` package."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **3 Implementation**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### 3.1 Exporting of information"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "#### 3.1.1 Implementation"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The export feature is facilitated by `FileWriter` from Java\u0027s IO library."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Currently, only email address and phone number can be exported. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The key idea is that we will iterate through the current list and access the relevant information fields."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "This operation depends on the size of the current person list and will be relatively fast."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "We will then write the information into a .txt file located at `/data/hall.txt` each separated by a new line. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Given below is a step-by-step usage scenario of how the `export` feature works:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1. The user launches the application and inputs `export email` into the input box."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. The `LogicManager#execute()` is then called, and the input is parsed through `AddressBookParser#parseCommand()`, returning an `ExportCommand`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "3. The `export` command then calls `ExportCommand#execute()`, and calls `Model#getAddressBook()` followed by `ReadOnlyAddressBook#getPersonList()` to get the current list of persons."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "4. The person list is then passed to `ExportCommand#handlEmail()` which iterates through the list and calls `Person#getEmail()` to access the `Email` and writes to the file `hally.txt`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The following sequence diagram shows how the export operation works:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "![](https://i.imgur.com/bbOtDI2.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "If the current person list is empty, an empty hally.txt file will be created."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "#### 3.1.2 Design consideration:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "##### Aspect: What file format to export to"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Alternative 1 (current choice):** Write to a .txt file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "-----|-----"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\\+ More user-friendly \u003cbr\u003e + Most operating systems is able to open .txt files natively. | - Does not offer much functionality apart from viewing and copying. "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Alternative 2:** Write to a .json file"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "-----|-----"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\\+ More well-known among developers | - Less technical users may not know how to open a .json file."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 3.2 Adding of events"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "#### 3.2.1 Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The add event feature is facilitated by the `AddEventCommand`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "It extends `Command` and overrides `Command#execute()` to perform the adding of events."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The key idea is that we will pass the user\u0027s input into the `AddressBookParser#parseCommand()`. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "It will create an `Event` with the user\u0027s inputs and associate it with `AddEventCommand`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "When `AddEventCommand#execute()` is called, the associated `Event` is passed into the `Model` component."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The `Model` component then saves the `Event`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Given below is a step-by-step usage scenario and how the add event feature works:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "1. The user launches the application and inputs `add-event n/Hall Dinner d/Dinner@Dining Hall` into the input box."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "2. The `UI` component accepts the input and passes it to `LogicManager#execute()`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "3. The input is parsed through `AddressBookParser#parseCommand()`, returning an `AddEventCommand` with an `Event` class associated to it."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "4. The `LogicManager` class then calls `AddEventCommand#execute()`, which uses `Model#addEvent()` to save the associated `Event` class."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "The following sequence diagram shows how the add event operation works:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "![Add Event Sequence Diagram](diagrams/commands/dg-add-event.png)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "#### 3.2.2 Design consideration:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "#### Aspect: When to create the new `Event` class"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Alternative 1 (current choice)**: Create the new `Event` in `AddressBookParser#parseCommand()`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "-----| -----"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\\+ Early conversion of user\u0027s input into `Event` class\u003cbr /\u003e+ Consistent with the existing code base\u003c/span\u003e | - Increases dependency between `Logic` and `Model` component"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Alternative 2**: Create the new `Event` in `AddEventCommand#execute()`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "-----|-----"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\\+ Decreases dependency between `Logic` and `Model` component | - Late conversion of user\u0027s input into `Event` class"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "We decided to use **Alternative 1** as it is simpler."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "For **Alternative 2**, we found it to be too complex. The user\u0027s input has to be passed across the different components."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "By converting it to an `Event` class early, we can work at a higher level of abstraction."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Other methods do not have to worry about string\u0027s format, and can focus on handling it as an `Event` class."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "schoolex"
        },
        "content": "### 3.3 Persistent block and room settings"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "#### 3.3.1 Implementation"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "schoolex"
        },
        "content": "This feature is implemented by making use of a json file to store the blocks and rooms info of the Hall. It does this by defining all available block and rooms in an editable json file. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "schoolex"
        },
        "content": "A predefined configuration with the following settings will be set as default:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Blocks : A, B, C, D  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Rooms : 100 - 420"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Blocks are represented as a single alphabet in uppercase. Rooms are represented as \u003cLevel\u003e\u003cRoom number\u003e."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The default settings specifies that the hall will have 4 blocks, A, B, C and D. There are 4 levels with 20 rooms per level.  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Advanced users can edit the json file directly to change these settings"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Given below is a step-by-step usage scenario of how this feature will ensure that there are no invalid inputs for the block and room field:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1. The user launches the application and tries to add a new user by typing  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "schoolex"
        },
        "content": "`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS br/ROOM_NUMBER g/GENDER m/MATRICULATION_NUMBER [s/STUDENT_GROUP...]` into the input box."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2. The `LogicManager#execute()` is then called, and the input is parsed through `AddressBookParser#parseCommand()`, returning an `AddCommand`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "schoolex"
        },
        "content": "3. The `AddCommand` then calls `AddCommand#execute()`, and passes all the arguments to the `Person` constructor."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "schoolex"
        },
        "content": "4. The `Person` constructor proceeds to create a new `Person` object with all the fields, 2 of which are `Block` and `Room`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "schoolex"
        },
        "content": "5. The `Block` and `Room` calls `Block#isValidBlock()` and `Room#isValidRoom()` respectively to parse the json file and compares the input arguments with the information specified in the json file. "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "schoolex"
        },
        "content": "6. A new `Block` and `Room` is returned if the input arguments matches the info specified in the json file. Otherwise, an exception is thrown and the result box will inform the user of the invalid input."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The following sequence diagram shows how this feature works:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "schoolex"
        },
        "content": "![](images/BlockRoomValidationDiagram.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "schoolex"
        },
        "content": "#### 3.3.2 Design consideration:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "schoolex"
        },
        "content": "##### Aspect: Method of modifying the json file"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Alternative 1 (current choice):** Editing it directly"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "schoolex"
        },
        "content": "-----|-----"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\\+ Easier to implement \u003cbr\u003e | - Less technical users may not know how to edit the file correctly "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Alternative 2:** Via a command"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "schoolex"
        },
        "content": "-----|-----"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\\+ All users will be able to edit the file safely | - Troublesome to implement"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Due to time constraints, we decided to use **Alternative 1** as **Alternative 2** would require much more work since we would require more rigorous testing to ensure that it is bug free. "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "### 3.4 Listing all student groups"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "#### 3.4.1 Implementation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The listing all student groups feature is facilitated by `ListGroupCommand`. It extends `Command` and overrides `Command#execute()` to list all student groups."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Given below is a step-by-step usage scenario and how the listing all student groups feature works:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "1. The user launches the application and types `list-group` into the input box."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "2. The `UI` handles the input and calls `LogicManager#execute()` to execute it."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "3. The `AddressBookParser#parseCommand()` is called to parse the input and returns a `ListGroupCommand`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "4. The `ListGroupCommand` calls `ListGroupCommand#execute()` which retrieves the list of all residents by calling `Model#getFilteredPersonList()`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "5. The `ListGroupCommand#execute()` iterates through the list of all residents and then gets a set of all residents\u0027 student groups."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "6. The `ListGroupCommand#execute()` iterates through the set of all student groups and formats it to a `String` result.     "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "7. The `UI` displays the result in the result box."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The following sequence diagram shows how the listing all student groups operation works:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "![Listing Student Groups Sequence Diagram](images/ListGroupSequenceDiagram.png)  "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "### 3.5 Finding Students"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "#### 3.5.1 Implementation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "The finding of students based on their characteristics is facilitated by the `FindCommand`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "It extends `Command` and overrides `Command#execute()` to find students."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "The high-level idea is that the user input from the `FindCommand` will be passed into the "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "`AddressBookParser#parseCommand()`. Based on user input, it will form a list of predicates"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "that will return true if a resident matches the given inputs."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Given below is a step-by-step usage scenario and how the finding of students works:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "1. The user launches the application and types `find n/meier b/B` into the input box."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "2. The `UI` handles the input and calls `LogicManager#execute()` to execute it."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "3. The `AddressBookParser#parseCommand()` is called to parse the input, which calls `FindCommandParser#parseCommand()`,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "subsequently returning a `FindCommand` with the associated list of predicates."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "4. The `FindCommand` calls `FindCommand#execute()` which forms a predicate that fulfill every predicate from the list."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "5. The predicate updates the filtered list of all residents by calling `Model#updateFilteredPersonList()`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "The resulting filtered list matches this predicate, which means that it matches all predicates in the original list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "7. The `UI` displays the result in the result box."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "The following sequence diagram shows how finding students works:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "![Find Sequence Diagram](images/FindSequenceDiagram.png)  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "#### 3.5.2 Design consideration:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "#### Aspect: When to convert list of predicates to a single predicate"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Alternative 1 (current choice)**: Create the predicate during `AddressBookParser#parseCommand()`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "-----| -----"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "\\+ Memory is freed earlier as list of predicates is converted immediately | - Makes testing of equal find commands more difficult"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Alternative 2**: Create the predicate during `FindCommand#execute()`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Pros | Cons"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "-----|-----"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "\\+ It is easier to compare equality for `FindCommand` objects\u003cbr/\u003e\\+ It is easier to test | - More memory is needed to store the list of predicates for longer period of time"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "We decided to use **Alternative 2** as it increases testability by making it simpler to test."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "For **Alternative 1**, it is difficult to compare 2 predicates as they have been merged together. "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "With **Alternative 2**, it is easier to compare each equality of each element in the list of predicates instead to check whether the `FindCommand` objects are equal. "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "As testing is important to ensuring that programs run correctly, we decided to use alternative 2."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **4 Documentation**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Refer to the guide [Documentation guide](Documentation.md)."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **5 Logging**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Refer to the guide [Logging guide](Logging.md)."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **6 Testing**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Refer to the guide [Testing guide](Testing.md)."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **7 Configuration**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Refer to the guide [Configuration guide](Configuration.md)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **8 DevOps**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Refer to the guide [DevOps guide](DevOps.md)."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "## **Appendix A: Product Scope**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* has a need to manage a significant number of hall residents"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Value proposition**: manage all hall residents\u0027 records in a single desktop CLI-based app."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "## **Appendix B: User Stories**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing residents       | Create residents\u0027 record        | I can keep track of the residents\u0027 record                 |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing residents       | Delete residents\u0027 record               | I can have updated residents\u0027 record                                            |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing residents       | View residents who are residing in the specific block  | I can keep track of the residents related to the specific block                  |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin general                  | Export a list of emails          | I can email the correct group of students |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing rooms           | Keep a record of who is residing in which rooms   | Quickly find out who is in which room                |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing rooms           | Keep a record of rooms that need maintenance   | Schedule rooms for maintenance and have maintenance records                |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing student groups  | Keep track of the student group points accumulated by residents   | I know who can continue staying next semester                |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing student groups  | Keep track of student groups within the hall   | So that I can find what student groups there are in the hall                |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing student groups  | Keep track of student group member counts within the hall   | So that i can find out which student group’s are high in demand                |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing student groups  | Find who has which role in student group   | To find out which students are exco of the student group                |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing sports          | Find out whether our teams won IHG   | So that I know which athletes is good                |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing hall events     | Quickly filter out students involved in certain events   | I can email selected group of students easily                |"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing hall events     | Quickly find out who attended compulsory events   | I can email selected group of students easily                |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing hall events     | Create hall events  | I can contact the residents about the events                |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * *`  | Hall admin managing hall events     | Update hall events   | I can update the event\u0027s details                |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* *`  | Hall admin managing hall events     | Archive hall events   | I can archive past events                |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing hall events     | Delete hall events   | I can remove events that were cancelled                |"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing hall events     | Query past hall events based on period   | So that I can do a recap of hall events                |"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing discipline      | Query for a student\u0027s demerit points and all rules broken   | I can expel them next sem                |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `*`  | Hall admin managing discipline      | Query most commonly broken rules   | I can work to prevent those cases                |"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* `  | Hall admin managing discipline      | Create rule lists for demerit points   | To create and include new rules such as covid temp measures                |"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing discipline      | Award demerit points to a student records   | Punish students                |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* `  | Hall admin managing discipline      | Select a rule that was broken when awarding demerit points   | To correctly allocate the demerit point for the student commiting the offence                |"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `*  `  | Hall admin managing discipline      | Give additional details, e.g. who, what, when, how, where   | I know why they received the demerit points in the first place                |"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin managing discipline      | Delete demerit points from students\u0027 records   | Undo any mistakes that occurred when giving them demerit points               |"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* `  | Hall admin managing discipline      | Reset demerit points for all students   | -                |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* `  | Hall admin managing discipline      | Keep track of the budget left for the block events   | I can plan the event according to the budget                |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "schoolex"
        },
        "content": "| `* * `  | Hall admin general                  | Export csv, based on filters  | I can send this data to people who will want information on these residents                |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "## **Appendix C: Use Cases**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "schoolex"
        },
        "content": "(For all use cases below, the **System** is the `Hall-y` and the **Actor** is the `hall leader`, unless specified otherwise)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Use case: UC01 - Listing of contacts**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1.  User requests to list residents"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2.  Hall-y shows a list of residents"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Use case: UC02 - Delete a resident**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1.  User requests to \u003cins\u003elist contacts (UC01)\u003c/ins\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2.  User requests to delete a specific resident in the list"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "schoolex"
        },
        "content": "3.  Hall-y deletes the resident"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    * 2a1. Hall-y shows an error message."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Use case: UC03 - Add a resident**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1.  User enters resident\u0027s details"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2.  Hall-y adds resident into list"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "schoolex"
        },
        "content": "3.  Hall-y \u003cins\u003edisplays list (UC01)\u003c/ins\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* 1a. User enters details in the wrong format."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    * 1a1. Hall-y shows an error message and correct format."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Use case: UC04 - Edit a resident**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1.  User requests to \u003cins\u003elist contact (UC01) \u003c/ins\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2.  User request to edit a specific resident in the list"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "schoolex"
        },
        "content": "3.  Hall-y edits resident in the list"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "schoolex"
        },
        "content": "4.  Hall-y \u003cins\u003edisplays list (UC01) \u003c/ins\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    * 2a1. Hall-y shows an error message."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* 2b. User enters details in the wrong format."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    * 2b1. Hall-y shows an error message and correct format."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**Use case: UC05 - Edit a resident**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "schoolex"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1.  User requests to \u003cins\u003elist contacts (UC01)\u003c/ins\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2.  User request to export emails"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "schoolex"
        },
        "content": "3.  Hall-y exports the list of email to a .txt file"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2.  Should be able to hold up to 1000 residents without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "schoolex"
        },
        "content": "4.  The application should work without internet."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "schoolex"
        },
        "content": "5.  Data should be stored in a human editable text file."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "schoolex"
        },
        "content": "6.  Should be for a single-user"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "schoolex"
        },
        "content": "7.  JAR file should be less than 100Mb."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Matriculation number**: Unique Identification for NUS students, which they will obtain when they matriculate into NUS"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Matriculation year**: Year when students enrolled in NUS"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "## **Appendix F: Instructions For Manual Testing**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "### F.1 Launch and shutdown"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "### F.2 Deleting a person"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "### F.3 Saving data"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1. _{ more test cases …​ }"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 28,
      "teekoksiang": 53,
      "lowjiefeng1998": 78,
      "-": 250,
      "athuyaoo": 50,
      "schoolex": 171
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/O63Idc0.png\" width\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Hall-y User Guide"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* TOC"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## 1 Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### 1.1 Welcome"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Welcome to the Hall-y User Guide!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Hall-y (pronounced _hall-ee_) is a desktop application designed to help you manage hall residents and events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "It features a simple text interface, also known as Command Line Interface (CLI), as well as visual representations of your hall residents and events using a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "If you can type fast, Hall-y will allow you to manage hall residents and events more efficiently than traditional GUI applications."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Interested? You can jump straight to the [Getting Started](#3-getting-started) guide and start trying Hall-y now! Alternatively, you can check out Hall-y\u0027s feature list [here](#5-features)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "### 1.2 Purpose of Document"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The purpose of this document is to teach you how to start up Hall-y, and to provide information necessary to understand how to use this application. It will provide the commands used in Hall-y and tell you how to use them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "### 1.3 Target Audience"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The target audience for Hall-y is the NUS Eusoff Hall administrative staff, who is responsible for managing residents in hall. This includes keeping track of their information, such as the rooms they stay in, their student group, their matriculation number and contact information."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## 2 About This Document"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The following table explains the formatting used in this guide, its\u0027 definition, and a relevant example."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Format | Definition, Examples"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "`code` | Represent a command or part of a command. \u003cbr\u003e e.g. `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 br/A104 g/M m/A0199242X`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "UPPER_CASE | Represent a parameter to be supplied by the user. \u003cbr\u003e e.g. `n/NAME` can be used as `n/John Doe`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[item] | Represent an optional parameter to be supplied by the user.\u003cbr\u003e Parameters can be keyed in any order \u003cbr\u003e e.g. `n/NAME [p/PHONE_NUMBER]` can be used as `n/John Doe p/91234567` or as `n/John Doe`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## 3 Getting Started"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "You can get Hall-y up and running within 5 minutes. Just follow the steps below:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "2. Download the latest `hall-y.jar` file from [here](https://github.com/AY2021S1-CS2103T-T11-2/tp/releases/)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "3. Copy the downloaded file and paste it into the folder you want to use as the home folder for your application"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "4. Double-click on `hall-y.jar` to start the application"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "5. You should see a similar GUI to the one below - notice that the application comes with some sample data:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![Initial load](https://i.imgur.com/nYAiX49.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You now have Hall-y running on your Computer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Now, suppose you want to add a resident called Timmy Tan. He is one of your new residents with the following details:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Category | Details"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "-------- | ------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Phone    | 91234567"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Email    | \u003cspan\u003efirst@example.com\u003c/span\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Address  | Blk 10, Bedok St 1, #02-01"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Block and Room | A101"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Gender | Male"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Matriculation Number | A2000000X"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Here is how you can add him into Hall-y:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the following command into the input box:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "`add n/Timmy Tan p/91234567 e/first@example.com a/Blk 10, Bedok St 1, #02-01 br/A101 g/M m/A2000000X`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "2. You should see the application update, like so:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Add new resident](https://i.imgur.com/EaXkXD5.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "3. Scroll down to see the resident you have just added, like so:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "![Scroll down to see resident](https://i.imgur.com/JNjrMIN.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have just added a resident called Timmy Tan."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "You can continue experimenting with some of the commands below:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "- `list`: lists all the residents currently in the application"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "- `delete 1`: deletes the first resident shown in the application"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "- `clear`: deletes all the contacts in the application"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "- `exit`: exits the application"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Alternatively, you can check out Hall-y\u0027s feature list [here](#5-features) for more commands."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "## 4 Application Interface"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the diagram below to understand how Hall-y looks like:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "![Hall-y\u0027s Interface](https://i.imgur.com/Awmyti6.png)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The table below shows a brief explanation of each section:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Section        | Explanation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "-------------- | -----------"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Input box      | You should input your command here."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Result box     | You can see the results of your command here.\u003cbr /\u003eIf there is an error in your command, you can see it here too."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Blocks list    | This is the list of blocks present in your hall.\u003cbr /\u003eYou should only use these blocks and rooms in your inputs."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Residents list | This is the list of residents based on your latest command. \u003cbr /\u003eWhen you first launch, this is the full list of residents in Hall-y."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Events list | This is the list of events currently stored in Hall-y."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "## 5 Features"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### 5.1 Listing all residents : `list`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "You can list all added residents by using the `list` command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1. Enter the list command by typing `list` into the input box"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show \u0027Listed all residents\u0027 \u003cbr\u003e ![](https://i.imgur.com/RuRPnAq.png)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "4. The residents list will then show the list of residents \u003cbr\u003e ![](https://i.imgur.com/qkR7DTG.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "### 5.2 Adding a resident: `add`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "You can add a new resident to Hall-y by using the `add` command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the add command by typing `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS br/ROOM_NUMBER g/GENDER m/MATRICULATION_NUMBER [s/STUDENT_GROUP...]` into the input box, followed by enter to execute the command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "2. The result box will show the details of the added resident  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/5dSSf4h.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "3. Scroll down to the bottom of the residents list to view the newly added resident  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/PPahQcr.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Please take note of the format required:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `ROOM_NUMBER`:  \\\u003cBlock\\\u003e\\\u003cRoom Number\\\u003e, e.g. B505, C201"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `GENDER`:  M for male, F for female"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "*   `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 br/A104 g/M m/A0199242X s/soccer`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*   `add n/Lee Xiao Ming p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 g/M br/A420 m/A0123456B s/basketball s/hackers`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "### 5.3 Editing a resident : `edit`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "You can edit an existing resident to Hall-y by using the `edit` command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the edit command by typing `edit [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [br/ROOM_NUMBER] [g/GENDER] [m/MATRICULATION_NUMBER] [s/STUDENT_GROUP...]` into the input box, followed by enter to execute the command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show the details of the edited resident  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/sgWw2sz.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "4. Scroll to the specified index of the resident list to view the update resident  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/BJAWQ3y.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Please take note of the format required:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* `ROOM_NUMBER`:  \\\u003cBlock\\\u003e\\\u003cRoom Number\\\u003e, e.g. B505, C201"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `GENDER`:  M for male, F for female"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com br/B402`   "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number, email address and room number of the 1st resident to be 91234567, johndoe@example.com and B402 respectively."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower p/87652103`   "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd resident and phone number to be `Betsy Crower` and 87652103 respectively."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### 5.4 Deleting a resident : `delete` - Lee Yan Cheng"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "This command helps you delete a resident from Hall-y."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Let\u0027s say a resident Alex Yeoh has left the hall recently, and you wish to remove his details. Assume that Alex Yeoh is the first resident in the resident list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Parameters | Details"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "-------- | ------"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "RESIDENT_INDEX | Index of resident in the resident list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "You can remove him from Hall-y by typing in the command with these parameters using the following format:`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Here’s a step by step guide:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1. Type the following command into the input box `delete 1` and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command. \u003cbr\u003e ![](https://i.imgur.com/CcVhFWK.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. The resident list will be updated to reflect the deleted resident. \u003cbr\u003e ![](https://i.imgur.com/myogQWb.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "### 5.5 Listing all student groups : `list-group`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "You can list all student groups by using the `list-group` command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the list group command by typing `list-group` into the input box"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will display all the student groups:   "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/BOa35Ql.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "### 5.6 Adding a hall event : `add-event`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "You can add a hall event by using the `add-event` command."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the add event command by typing `add-event n/NAME dt/DATE l/LOCATION d/DESCRIPTION` into the input box"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show the new event created:  "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/L774mDy.png)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "4. The events list will show the newly added event:  "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/HZJgK3F.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "### 5.7 Editing a hall event : `edit-event`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "You can edit a hall event by using the `edit-event` command."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the edit event command by typing `edit-event INDEX [n/NAME] [dt/DATE] [l/LOCATION] [d/DESCRIPTION]`. \u003cbr\u003ewith `INDEX` being the corresponding index of the specified event as seen on the events list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "into the input box."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show the edited event:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/XV4CSap.png)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index refers to the index number shown in the displayed event list respectively."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 5.8 Deleting a hall event : `delete-event`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "You can delete a hall event specified at an index by using the `delete-event` command followed by the index."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the delete event command by typing `delete-event INDEX` into the input box. \u003cbr\u003ewith `INDEX` being the corresponding index of the specified event as seen on the events list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show \u0027Deleted Event:\u0027 and the details of the deleted event: "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/jo5YIr7.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index refers to the index number shown in the displayed event list respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### 5.9 Assigning a resident to a hall event: `assign` - Lee Yan Cheng"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "This command helps you assign a resident to an event."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Let\u0027s say resident Alex Yeoh will be attending the Hall Lunch event. Assume Alex Yeoh is the first resident in the resident list and Hall Lunch is the first event in the event list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Parameters | Details"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "-------- | ------"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "RESIDENT_INDEX | Index of resident in the resident list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "EVENT_INDEX | Index of event in the event list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "You can add him into Hall-y by typing in the command with these parameters using the following format:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Format: `assign RESIDENT_INDEX EVENT_INDEX` "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Here’s a step by step guide:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1. Type the following command into the input box `assign 1 1` and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command. ![](https://i.imgur.com/XXmm8FI.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. The event list will then be updated to show the newly assigned resident \u003cbr\u003e ![](https://i.imgur.com/3JFM1sk.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* Both indices refers to the index number shown in the displayed resident and event list respectively."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* Both indices **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* `assign 1 1` assigns the 1st resident to the 1st event"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 5.10 Clearing attendee list of event: `clear-event`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "You can clear the attendee list of an event by using the `clear-event` command followed by the index of the event."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the clear event command by typing `clear-event EVENT_INDEX` into the input box. \u003cbr\u003e with `EVENT_INDEX` being the corresponding index of the specified event as seen on the events list. \u003cbr\u003e![](https://i.imgur.com/det13Su.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show \u0027Cleared attendee list of Event:\u0027 followed by the details of the event \u003cbr\u003e ![](https://i.imgur.com/7TxhF41.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "4. The event list will then be updated to show the cleared event \u003cbr\u003e ![](https://i.imgur.com/sFGxyMY.png)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index refers to the index number shown in the displayed event list respectively."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `clear-event 1` clears the attendee list of the 1st event"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### 5.11 Filtering residents by event: `filter-event` - Lee Yan Cheng"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "This command helps you to filter the resident list by event."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Let’s say you want to get the details of the residents attending the event Hall Lunch. You can filter them by using this command. Suppose that the event is the first event on the event list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Parameters | Details"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "-------- | ------"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "EVENT_INDEX | Index of event on the event list"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "You can filter residents by event by typing in the command with these parameters using the following format:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Format: `filter-event EVENT_INDEX` "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Here’s a step by step guide:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1. Type the following command into the input box `filter-event 1` and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command. \u003cbr\u003e ![](https://i.imgur.com/xnTRZJL.png)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. The resident list will then be updated to show attendees of the event \u003cbr\u003e ![](https://i.imgur.com/iKSFteY.png)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index refers to the index number shown in the displayed event list respectively."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* Event index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* `filter-event 1` shows the residents that are attending the 1st event"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 5.12 Locating residents by characteristics: `find`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "You can find all persons whose characteristics match the given arguments and keywords. The residents list will automatically display these residents."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the find command by typing `find [n/KEYWORDS [MORE KEYWORDS]] [b/BLOCK] [f/FLOOR] [r/ROOM_NUMBER] [m/MATRICULATION_NUMBER] [g/GENDER] [s/STUDENT_GROUP...]` into the input box."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "2. Press enter."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show how many residents fit the inputted characteristics. \u003cbr\u003e ![Result box of find](https://i.imgur.com/gPMxpz9.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "4. The residents list will be updated with the residents who fit the inputted characteristics. \u003cbr\u003e ![Residents list of find](https://i.imgur.com/aq1YmhQ.png)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Please take note of the format required:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* `ROOM_NUMBER`:  The last 2 digits of the room numbers, e.g. 05, 12, 15, etc."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* `FLOOR`:  The number of the floor of the resident you want to find, e.g. 1, 2, 3 and so on."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `BLOCK`: The alphabetical name of the block, e.g. A, B, C, or D"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* `GENDER`:  M for male, F for female"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* `KEYWORDS`: refers to any part of a resident\u0027s name, e.g. `Carl` is a keyword from `Carl Kurz`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Tips"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* When searching with names, residents matching at least one keyword with names will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* For the rest of the parameters, like block and floor, residents matching all of them will be returned (i.e. `AND` search, where the returned resident will live on this floor AND in this block)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* `find n/John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* `find l/3 s/badminton` returns `Alice Pauline`, `Fiona Kunz` who live on the third floor and are in the `Badminton` student group. \u003cbr\u003e ![Example 2](https://i.imgur.com/hAmEOib.png)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed resident list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd resident in Hall-y."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st resident in the results of the `find` command."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### 5.13 Exporting of email : `export` - Lee Yan Cheng"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "This command helps you to export the list of residents\u0027 emails."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Let’s say you need to send out details of the latest circular to all residents! You can export the list of emails as a .txt file using this command. "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "The current displayed resident list can be exported using the following format:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Format: `export email` "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Here’s a step by step guide:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1. Type the following command into the input box `export email` and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command. \u003cbr\u003e ![](https://i.imgur.com/jMP6o6w.png)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "2. A data folder which contains the .txt file will be created in the same location as your Hall-y application "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "3. Click the folder and the list of emails will be in the file named hally.txt \u003cbr\u003e ![](https://i.imgur.com/CEYx5J8.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 5.14 Clearing all entries : `clear`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "schoolex"
        },
        "content": "You can clear all residents in Hall-y by using the `clear` command"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "schoolex"
        },
        "content": "1. Enter the clear command by typing `clear` into the input box."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2. Press enter"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "3. The result box will show \"Address book has been cleared\"\u003cbr\u003e ![](https://i.imgur.com/taII762.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "4. The resident list will now be empty.\u003cbr\u003e ![](https://i.imgur.com/TLAwDc4.png)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "### 5.15 Viewing help : `help` - Lee Yan Cheng"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "This command helps you to access the online user guide of Hall-y."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Let’s say you forgot a command. You can refresh your memory by using this command. "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "You can request for help if you are unfamiliar with the commands. You can copy the URL and view an online copy of our user guide by using the following format."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Here’s a step by step guide:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "1.  Type the following command into the input box `help` and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute the command. \u003cbr\u003e ![](https://i.imgur.com/SvtfPqe.png)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "4. The help window will pop out \u003cbr\u003e ![](https://i.imgur.com/HJTJNgM.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "5. Copy the URL and paste it into a browser of your choice to view the online user guide"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 5.16 Exiting the application : `exit`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "schoolex"
        },
        "content": "You can exit the application by using the `exit` command"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "schoolex"
        },
        "content": "The steps for this command are as follows:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter the exit command by typing `exit` into the input box, followed by enter to execute the command."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "schoolex"
        },
        "content": "3. The application should now be closed"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "### 5.17 Saving the data"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Hall-y\u0027s data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "## 6 Advanced Features"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "### 6.1 Changing the blocks and rooms configuration"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Important note: \u003cbr\u003e This feature is for advanced users only! Please ensure that you know what you are doing before proceeding.**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "Want to add an additional block or change the room numbers? You can modify the settings file directly by following the steps below:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "1) Exit Hall-y by using the `exit` command"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "schoolex"
        },
        "content": "2) Open up the `preferences.json` file which resides in the same folder as \u0027hall-y.jar\u0027   "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "schoolex"
        },
        "content": "![](https://i.imgur.com/4yexKNC.png)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "3) Edit the block and room settings as required.   "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "The default settings specifies 4 blocks(A, B, C, D), 4 floors(1 - 4) and 20 rooms(1 - 20).  "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://i.imgur.com/PiFpKJb.png)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "3) Save the file and relaunch Hall-y."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "## 7 FAQ"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Hall-y home folder."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: Where is all my save data stored?"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: They are stored in the `data` folder that in the Hall-y home folder"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I make backups of my data in Hall-y?"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Copy and paste the `data` folder located in the Hall-y home folder somewhere safe. To restore the backup. Copy it back into the same home folder."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I delete all my data in Hall-y?"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Delete the `data` folder located in the Hall-y home folder."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "## 8 Command Summary"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "**Add event** | `add-event n/NAME dt/EVENT_DATE l/LOCATION d/DESCRIPTION` \u003cbr /\u003ee.g. `add-event n/Night Cycling dt/30/10/2020 18:00 l/Meet at Hall Entrance d/A night cycling event held every semester.`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "**Add resident** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS br/ROOM_NUMBER g/GENDER m/MATRICULATION_NUMBER [s/STUDENT_GROUP]…` \u003cbr\u003e e.g. `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 br/A104 g/M m/A0199242X s/badminton`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "**Assign resident** | `assign RESIDENT_INDEX EVENT_INDEX` \u003cbr\u003e e.g. `assign 1 1`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear event** | `clear-event EVENT_INDEX` \u003cbr\u003e e.g. `clear-event 1`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete event** | `delete-event INDEX`\u003cbr\u003e e.g. `delete-event 2`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete resident** | `delete INDEX`\u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "**Edit event** | `edit INDEX [n/NAME] [dt/EVENT_DATE] [l/LOCATION] [d/DESCRIPTION] `\u003cbr\u003e e.g.`edit 2 n/Hall Lunch for Semester 1`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "**Edit resident** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [br/ROOM_NUMBER] [g/GENDER] [m/MATRICULATION_NUMBER][s/STUDENT_GROUP]…​​`\u003cbr\u003e e.g.`edit 2 n/James Lee e/jameslee@example.com br/A210`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "**Export** | `export` \u003cbr\u003e e.g. `export email`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find [n/KEYWORDS [MORE KEYWORDS]] [b/BLOCK] [f/FLOOR] [r/ROOM_NUMBER] [m/MATRICULATION_NUMBER] [g/GENDER] [s/STUDENT_GROUP...]`\u003cbr\u003e e.g. `find b/B l/2 g/F`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "**Filter event** | `filter-event EVENT_INDEX` \u003cbr\u003e e.g. `filter-event 1`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "**List all residents** | `list`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "**List all student groups** | `list-group`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## Appendix A: Glossary"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Command Line Interface (CLI)**: Text interface to interact with the application by typing the command"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Graphical User Interface (GUI)**: Visual interface to interact with the application"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Hall admin**: An administrative staff to handle hall-related matters"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Matriculation number**: Unique identification for NUS students, which they will obtain when they matriculate into NUS "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Student group**: An interest group for the hall residents to conduct extracurricular activities"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 86,
      "teekoksiang": 20,
      "lowjiefeng1998": 15,
      "-": 330,
      "athuyaoo": 1,
      "schoolex": 32
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "participant \":ExportCommandParser\" as ExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "participant \"e:ExportCommand\" as ExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "participant \":ReadOnlyAddressBook\" as ReadOnlyAddressBook MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "[-\u003e LogicManager : execute(export)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(export)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "AddressBookParser -\u003e ExportCommandParser : parse(export)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate ExportCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "create ExportCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommandParser -\u003e ExportCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand --\u003e ExportCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate ExportCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "destroy ExportCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "AddressBookParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "LogicManager -\u003e ExportCommand : execute()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand -\u003e Model : getAddressBook()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Model --\u003e ExportCommand : addressBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand -\u003e ReadOnlyAddressBook: getPersonList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate ReadOnlyAddressBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ReadOnlyAddressBook --\u003e ExportCommand: personList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate ReadOnlyAddressBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand -\u003e ExportCommand: handleEmail()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "activate ExportCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand --\u003e ExportCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate ExportCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "ExportCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "destroy ExportCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 69
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "skinparam sequence {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    BoxFontSize 21"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    ArrowFontSize 18"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    ParticipantFontSize 18"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "[-\u003e LogicManager : execute(\"find n/meier b/B\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"find n/meier b/B\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "AddressBookParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "AddressBookParser -\u003e FindCommandParser : parse(\"n/meier b/B\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommandParser --\u003e AddressBookParser : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "AddressBookParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommand -\u003e Model : updateFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 75
    }
  },
  {
    "path": "docs/diagrams/ListGroupSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "participant \"l:ListGroupCommand\" as ListGroupCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "[-\u003e LogicManager : execute(\"list-group\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"list-group\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "create ListGroupCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "AddressBookParser -\u003e ListGroupCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "activate ListGroupCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "ListGroupCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "deactivate ListGroupCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "AddressBookParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "LogicManager -\u003e ListGroupCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "activate ListGroupCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "ListGroupCommand -\u003e Model : getFilteredPersonList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Model --\u003e ListGroupCommand : residentList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "ListGroupCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "deactivate ListGroupCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 44
    }
  },
  {
    "path": "docs/images/scene-builder-mockup/Hall-y.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cVBox prefHeight\u003d\"600.0\" prefWidth\u003d\"720.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cMenuBar\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003cmenus\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Help F1\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003c/menus\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"34.0\" prefWidth\u003d\"600.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cTextField text\u003d\"add n/Emily Sim p/91234567 e/example@example.com \" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cStackPane layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cTextArea maxHeight\u003d\"100.0\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cLabel text\u003d\"Reference\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cTextArea prefHeight\u003d\"374.0\" prefWidth\u003d\"102.0\" text\u003d\"Block/Room\u0026#10;A: 1 to 10\u0026#10;B: 1 to 10\u0026#10;C: 1 to 10\u0026#10;\u0026#10;Faculties\u0026#10;SoC\u0026#10;SDE\u0026#10;FASS\u0026#10;FoE\u0026#10;FoS\u0026#10;Dentistry\u0026#10;Medicine\u0026#10;Music\u0026#10;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"610.0\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                          \u003cLabel /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                          \u003cLabel text\u003d\"1. Alex Yeoh\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cFlowPane prefHeight\u003d\"46.0\" prefWidth\u003d\"610.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"91234567\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"Singapore\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"example@example.com\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"610.0\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                          \u003cLabel /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                          \u003cLabel text\u003d\"2. Bobby Tan\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cFlowPane prefHeight\u003d\"46.0\" prefWidth\u003d\"610.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"91234567\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"Singapore\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"example@example.com\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"610.0\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                          \u003cLabel /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                          \u003cLabel text\u003d\"3. Charlie\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cFlowPane prefHeight\u003d\"46.0\" prefWidth\u003d\"610.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"91234567\" /\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"Singapore\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                    \u003cLabel text\u003d\"example@example.com\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"18.0\" prefWidth\u003d\"720.0\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cLabel text\u003d\"./data/addressBook.json\" /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 185
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "title: Hall-y"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T11-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T11-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T11-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T11-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "**Hall-y is a desktop application for managing your hall residents.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* If you are interested in using Hall-y, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* If you are interested about developing Hall-y, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/aungthuyaoo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "title: Aung Thuya Oo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "## Project: Hall-y"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Hall-y is a hall residents\u0027 contact management application. It helps to keep track and update the residents\u0027 record, so the hall admin staff can easily find the residents based on the saved records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **New Feature**: To be updated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Code contributed**: [RepoSense link (to be updated)]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Project management**: To be updated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Enhancements to existing features**: To be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "  * User Guide: To be updated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "  * Developer Guide: To be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Community**: To be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "* **Tools**: To be updated."
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 26
    }
  },
  {
    "path": "docs/team/leeyancheng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "title: Lee Yan Cheng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "## Project: Hall-y"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Hall-y is a hall residents\u0027 contact management application. It helps to keep track and update the residents\u0027 record, so the hall admin staff can easily find the residents based on the saved records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **New Feature**: To be updated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Code contributed**: [RepoSense link (to be updated)]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Project management**: To be updated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Enhancements to existing features**: To be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "  * User Guide: To be updated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "  * Developer Guide: To be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Community**: To be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "* **Tools**: To be updated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 27
    }
  },
  {
    "path": "docs/team/lowjiefeng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "title: Low Jie Feng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "## Project: Hall-y"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Hall-y is a hall residents\u0027 contact management application. It helps to keep track and update the residents\u0027 record, so the hall admin staff can easily find the residents based on the saved records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **New Feature**: To be updated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Code contributed**: [RepoSense link (to be updated)]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Project management**: To be updated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Enhancements to existing features**: To be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  * User Guide: To be updated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  * Developer Guide: To be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Community**: To be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "* **Tools**: To be updated."
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 26
    }
  },
  {
    "path": "docs/team/pangbiaoyi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "schoolex"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "schoolex"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "title: Pang Biao Yi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "## Project: Hall-y"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Hall-y is a hall residents\u0027 contact management application. It helps to keep track and update the residents\u0027 record, so the hall admin staff can easily find the residents based on the saved records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **New Feature**: To be updated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Code contributed**: [RepoSense link (to be updated)]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Project management**: To be updated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Enhancements to existing features**: To be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  * User Guide: To be updated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  * Developer Guide: To be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Community**: To be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": "* **Tools**: To be updated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "schoolex": 27
    }
  },
  {
    "path": "docs/team/teekoksiang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "title: Tee Kok Siang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "## Project: Hall-y"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Hall-y is a hall residents\u0027 contact management application. It helps to keep track and update the residents\u0027 record, so the hall admin staff can easily find the residents based on the saved records."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **New Feature**: To be updated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Code contributed**: [RepoSense link (to be updated)]()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Project management**: To be updated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Enhancements to existing features**: To be updated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "  * User Guide: To be updated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "  * Developer Guide: To be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Community**: To be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "* **Tools**: To be updated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 7, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        logger.info(String.format(\"Events: Loaded %d events from file\", model.getEventList().size()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        logger.info(String.format(\"Persons: Loaded %d persons from file\", model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            Block.setBlockPref(userPrefs.getBlockSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            Room.setRoomPref(userPrefs.getMinRoomSettings(), userPrefs.getMaxRoomSettings(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                    userPrefs.getMinFloorSettings(), userPrefs.getMaxFloorSettings());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 2,
      "-": 182,
      "athuyaoo": 1,
      "schoolex": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 900;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns an unmodifiable view of the list of all events"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns the user prefs\u0027 address book file path"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 10,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return model.getEventList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCKROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resident to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_BLOCKROOM + \"BLOCKROOM \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION_NUMBER \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            + \"[\" + PREFIX_STUDENT_GROUP + \"STUDENT_GROUP...]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_BLOCKROOM + \"A420 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_MATRICULATION_NUMBER + \"A0123456B \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + PREFIX_STUDENT_GROUP + \"basketball \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + PREFIX_STUDENT_GROUP + \"hackers \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New resident added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This resident already exists in the address book\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 4,
      "lowjiefeng1998": 4,
      "-": 59,
      "athuyaoo": 3,
      "schoolex": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_NAME + \"NAME \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_DATE + \"DATE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_DESC + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Hall Dinner@Dining Room \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_DATE + \"01/01/2020 15:00 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_LOCATION + \"Dining Hall \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_DESC + \"The yearly Eusoff Hall Dinner.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added:\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assert toAdd !\u003d null : \"A null event was associated to this AddEventCommand\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class AssignCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_ASSIGN_PERSON_SUCCESS \u003d \"Assigned resident %s to %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON_ADDED \u003d \"Duplicate resident %s being added to event %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT \u003d \"The event provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \": Assigns the person identified by the index number used in the displayed person list\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \" to the event specified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Parameters: RESIDENT_INDEX EVENT_INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AssignCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    // index of person in person list to add"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    // index event that person will be added to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Index residentIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @param residentIndex index of the resident to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @param eventIndex index of the event to be modified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public AssignCommand(Index residentIndex, Index eventIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.residentIndex \u003d residentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    // an example of an assign command is assign 1 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d model.getEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // get person from list based on index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (residentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (eventIndex.getZeroBased() \u003e\u003d eventList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // ensure that index is not negative"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // to be taken out on final release"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assert residentIndex.getZeroBased() \u003e\u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assert eventIndex.getZeroBased() \u003e\u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Person personToAdd \u003d lastShownList.get(residentIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // get event from event list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Event event \u003d eventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // get attendee list from event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Set\u003cPerson\u003e attendeesList \u003d new HashSet\u003c\u003e(event.getAttendeesList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // check if person to add is already in the event list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (attendeesList.contains(personToAdd)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            logger.warning(String.format(MESSAGE_DUPLICATE_PERSON_ADDED,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    personToAdd.getName(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    event.getName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PERSON_ADDED,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    personToAdd.getName(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    event.getName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // add person to event\u0027s attendee list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        attendeesList.add(personToAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedEvent \u003d new Event(event.getName(), event.getEventDate(), event.getLocation(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                event.getDescription(), attendeesList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // update model"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        model.setEvent(event, editedEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        logger.fine(String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, personToAdd.getName(), event.getName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, personToAdd.getName(), event.getName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                || (obj instanceof AssignCommand)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 residentIndex.equals(((AssignCommand) obj).residentIndex)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 eventIndex.equals(((AssignCommand) obj).eventIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 104,
      "lowjiefeng1998": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " * Deletes an event identified using its displayed index from the events list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class ClearEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \": Clears the attendee list of the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Parameter: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_CLEAR_EVENT_SUCCESS \u003d \"Cleared attendee list of Event:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Creates a {@code DeleteEventCommand} with the given {@code targetIndex}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public ClearEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d model.getEventList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d eventsList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Event event \u003d eventsList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Event editedEvent \u003d new Event(event.getName(), event.getEventDate(), event.getLocation(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                event.getDescription(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // update model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        model.setEvent(event, editedEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_EVENT_SUCCESS, event));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                || (other instanceof ClearEventCommand // instanceof handles null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ClearEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // check event list for any occurrences of the person to be deleted and remove them"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        model.getEventList().forEach(event -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            if (event.getAttendeesList().contains(personToDelete)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                Set\u003cPerson\u003e attendeesList \u003d new HashSet\u003c\u003e(event.getAttendeesList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                attendeesList.remove(personToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                Event editedEvent \u003d new Event(event.getName(), event.getEventDate(), event.getLocation(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        event.getDescription(), attendeesList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                model.setEvent(event, editedEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 15,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Deletes an event identified using its displayed index from the events list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Parameter: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event:\\n%1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Creates a {@code DeleteEventCommand} with the given {@code targetIndex}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d model.getEventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d eventsList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event eventToDelete \u003d eventsList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            || (other instanceof DeleteEventCommand // instanceof handles null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCKROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the resident identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"by the index number used in the displayed residents list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            + \u0027[\u0027 + PREFIX_BLOCKROOM + \"BLOCKROOM] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"[\" + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION_NUMBER] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + \"[\" + PREFIX_STUDENT_GROUP + \"STUDENT_GROUP]...\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Resident: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This resident already exists in Hall-y.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e updatedStudentGroups \u003d editPersonDescriptor.getStudentGroups()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .orElse(personToEdit.getStudentGroups());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Block updatedBlock \u003d editPersonDescriptor.getBlock().orElse(personToEdit.getBlock());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Room updatedRoom \u003d editPersonDescriptor.getRoom().orElse(personToEdit.getRoom());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        MatriculationNumber updatedMatriculationNumber \u003d editPersonDescriptor.getMatriculationNumber()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .orElse(personToEdit.getMatriculationNumber());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedGender, updatedStudentGroups,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                updatedBlock, updatedRoom, updatedMatriculationNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        private Set\u003cStudentGroup\u003e studentGroups;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        private Block block;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        private Room room;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        private MatriculationNumber matriculationNumber;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "         * A defensive copy of {@code studentGroups} is used internally."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            setStudentGroups(toCopy.studentGroups);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            setBlock(toCopy.block);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            setRoom(toCopy.room);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            setMatriculationNumber(toCopy.matriculationNumber);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    gender, studentGroups, block, room, matriculationNumber);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "         * Sets {@code studentGroups} to this object\u0027s {@code studentGroups}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "         * A defensive copy of {@code studentGroups} is used internally."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        public void setStudentGroups(Set\u003cStudentGroup\u003e studentGroups) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            this.studentGroups \u003d (studentGroups !\u003d null) ? new HashSet\u003c\u003e(studentGroups) : null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "         * Returns an unmodifiable student group set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code studentGroups} is null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        public Optional\u003cSet\u003cStudentGroup\u003e\u003e getStudentGroups() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            return (studentGroups !\u003d null) ? Optional.of(Collections.unmodifiableSet(studentGroups)) : Optional.empty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        public void setMatriculationNumber(MatriculationNumber matriculationNumber) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            this.matriculationNumber \u003d matriculationNumber;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        public Optional\u003cMatriculationNumber\u003e getMatriculationNumber() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            return Optional.ofNullable(matriculationNumber);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    \u0026\u0026 getStudentGroups().equals(e.getStudentGroups())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    \u0026\u0026 getMatriculationNumber().equals(e.getMatriculationNumber());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        public Optional\u003cBlock\u003e getBlock() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            return Optional.ofNullable(block);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        public void setBlock(Block block) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            this.block \u003d block;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        public Optional\u003cRoom\u003e getRoom() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            return Optional.ofNullable(room);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        public void setRoom(Room room) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            this.room \u003d room;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 32,
      "lowjiefeng1998": 5,
      "-": 208,
      "athuyaoo": 15,
      "schoolex": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Edits the details of an existing event in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-event\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"by the index number used in the displayed events list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"[\" + PREFIX_EVENT_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"[\" + PREFIX_EVENT_DATE + \"DATE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"[\" + PREFIX_EVENT_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"[\" + PREFIX_EVENT_DESC + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Block Lunch \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + PREFIX_EVENT_LOCATION + \"UTown\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in Hall-y\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @param index index of the event in the events list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @param editEventDescriptor details to edit the event with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireAllNonNull(index, editEventDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.editEventDescriptor \u003d editEventDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d model.getEventList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d eventsList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event eventToEdit \u003d eventsList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Event createEditedEvent(Event eventToEdit, EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assert editEventDescriptor !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        EventName updatedName \u003d editEventDescriptor.getEventName().orElse(eventToEdit.getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        EventDate updatedDate \u003d editEventDescriptor.getEventDate().orElse(eventToEdit.getEventDate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Location updatedLocation \u003d editEventDescriptor.getLocation().orElse(eventToEdit.getLocation());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Description updatedDescription \u003d editEventDescriptor.getDescription().orElse(eventToEdit.getDescription());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new Event(updatedName, updatedDate, updatedLocation, updatedDescription, eventToEdit.getAttendeesList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Class that stores the details to edit the event with. Each non-empty field will replace"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * the corresponding field of the event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Note that attendees cannot be edited through this. That field will be directly copied from the original."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        private EventName eventName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        private EventDate eventDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public EditEventDescriptor() {}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         * Copy using the constructor by calling each field\u0027s setter."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            setEventName(toCopy.eventName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            setEventDate(toCopy.eventDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return CollectionUtil.isAnyNonNull(eventName, eventDate, location, description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public void setEventName(EventName eventName) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public void setEventDate(EventDate eventDate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public Optional\u003cEventName\u003e getEventName() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return Optional.ofNullable(eventName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public Optional\u003cEventDate\u003e getEventDate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return Optional.ofNullable(eventDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (!(obj instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            EditEventDescriptor otherDescriptor \u003d (EditEventDescriptor) obj;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return getEventName().equals(otherDescriptor.getEventName())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    \u0026\u0026 getEventDate().equals(otherDescriptor.getEventDate())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    \u0026\u0026 getLocation().equals(otherDescriptor.getLocation())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    \u0026\u0026 getDescription().equals(otherDescriptor.getDescription());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " * Exports the email of all existing residents."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_EMAIL_SUCCESS \u003d \"List of emails exported\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_PHONE_SUCCESS \u003d \"List of phone numbers exported\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"export: Exports the corresponding information to a text file\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Parameters: INFORMATION (e.g. email, phone)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Example: export email\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String FILENAME \u003d \"./data/hally.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String DIRECTORY_NAME \u003d \"./data/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final String extractType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Creates an ExportCommand to handle the specified information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public ExportCommand(String type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        extractType \u003d type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        switch (extractType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        case \"email\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            handleEmail(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            message \u003d MESSAGE_EMAIL_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        case \"phone\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            handlePhone(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            message \u003d MESSAGE_PHONE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Writes the email of all residents into a txt file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @param personList list of residents the command should operate on."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @throws CommandException if file IO is interrupted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private void handleEmail(ObservableList\u003cPerson\u003e personList) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        createDir();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILENAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            for (Person person : personList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                fw.write(person.getEmail().toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(\"File is missing\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Writes the phone numbers of all residents into a txt file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @param personList list of residents the command should operate on."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @throws CommandException If file IO is interrupted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private void handlePhone(ObservableList\u003cPerson\u003e personList) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        createDir();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            FileWriter fw \u003d new FileWriter(FILENAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            for (Person person : personList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                fw.write(person.getPhone().toString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(\"File is missing\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Creates a directory at ./data/."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private void createDir() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        File directory \u003d new File(DIRECTORY_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // checks if directory exists, else directory will be created"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 extractType.equals(((ExportCommand) other).extractType)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterEventCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.FilterEventPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class FilterEventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_FILTER_SUCCESS \u003d \"Displaying residents attending event %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \": Displays the residents attending \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"the event specified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Parameters: EVENT_INDEX\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Index eventIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public FilterEventCommand(Index eventIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.eventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d model.getEventList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (eventIndex.getZeroBased() \u003e\u003d eventList.size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_EVENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // get event from event list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Event event \u003d eventList.get(eventIndex.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        FilterEventPredicate predicate \u003d new FilterEventPredicate(event.getAttendeesList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FILTER_SUCCESS, event.getName()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLOOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose characteristics match the\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \" given keywords and parameters\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \" and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"KEYWORDS [MORE KEYWORDS]\" + \"] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_BLOCK + \"BLOCK\" + \"] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_FLOOR + \"FLOOR\" + \"]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_ROOM_NUMBER + \"ROOM_NUMBER\" + \"] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION_NUMBER\" + \"] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER\" + \"] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + \"[\" + PREFIX_STUDENT_GROUP + \"STUDENT_GROUP \" + \"]\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"alice bob charlie \" + PREFIX_BLOCK + \"B\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String MESSAGE_EMPTY_KEYWORD \u003d \"Keywords must not be empty\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final List\u003cPredicate\u003cPerson\u003e\u003e predicates;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Create a findCommand with the appropriate predicates."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param predicates List of predicates to use to find the resident"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cPerson\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(predicates);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assert predicates !\u003d null : \"predicates shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        Predicate\u003cPerson\u003e personPredicate \u003d predicates.stream().reduce(Predicate::and).orElse(person -\u003e true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        model.updateFilteredPersonList(personPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assert predicates !\u003d null : \"predicates shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 2,
      "-": 32,
      "athuyaoo": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all residents\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "schoolex": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListGroupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Lists all student groups of residents."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class ListGroupCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-group\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all student groups\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(ListGroupCommand.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assert model !\u003d null : \"Model is null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // retrieve a list of all residents"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        ObservableList\u003cPerson\u003e residentList \u003d model.getPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        logger.log(Level.INFO, \"The number of residents is \" + residentList.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // use Set to avoid storing duplicate elements"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cString\u003e groupNameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        for (Person resident : residentList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            Set\u003cStudentGroup\u003e studentGroupSet \u003d resident.getStudentGroups();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            for (StudentGroup studentGroup : studentGroupSet) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                groupNameSet.add(studentGroup.studentGroupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        logger.log(Level.INFO, \"The number of student groups is \" + groupNameSet.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // sort the student groups alphabetically"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        List\u003cString\u003e sortedGroupNameList \u003d groupNameSet.stream().sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // add number prefix for every student group"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String groupNamesWithNumber \u003d IntStream.range(0, sortedGroupNameList.size()).boxed()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .reduce(\"\", (groupNames, index) -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                groupNames.concat(\"\\n\").concat(String.valueOf(index + 1))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    .concat(\". \").concat(sortedGroupNameList.get(index)), String::concat);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String feedbackToUser \u003d MESSAGE_SUCCESS.concat(groupNamesWithNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCKROOM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_STUDENT_GROUP, PREFIX_GENDER, PREFIX_BLOCKROOM,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        PREFIX_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                PREFIX_BLOCKROOM, PREFIX_MATRICULATION_NUMBER) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupList \u003d ParserUtil.parseStudentGroups(argMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .getAllValues(PREFIX_STUDENT_GROUP));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        String blockString \u003d argMultimap.getValue(PREFIX_BLOCKROOM).orElse(\"\").substring(0, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        String roomString \u003d argMultimap.getValue(PREFIX_BLOCKROOM).orElse(\"\").substring(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        Block block \u003d ParserUtil.parseBlock(blockString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        Room room \u003d ParserUtil.parseRoom(roomString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        MatriculationNumber matriculationNumber \u003d ParserUtil.parseMatriculationNumber("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, gender, studentGroupList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                block, room, matriculationNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 12,
      "-": 51,
      "athuyaoo": 4,
      "schoolex": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        PREFIX_EVENT_LOCATION, PREFIX_EVENT_DESC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_EVENT_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                PREFIX_EVENT_LOCATION, PREFIX_EVENT_DESC)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        EventName name \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_EVENT_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_EVENT_LOCATION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_EVENT_DESC).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event event \u003d new Event(name, eventDate, location, description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new AddEventCommand(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.ClearEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.FilterEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        case ClearEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new ClearEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        case ListGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            return new ListGroupCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        case FilterEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new FilterEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 17,
      "teekoksiang": 4,
      "lowjiefeng1998": 12,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private static final int RESIDENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private static final int EVENT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            // assign 1 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            String[] split \u003d args.stripLeading().split(\" \", 2); // { 1, 1 }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            Index residentIndex \u003d ParserUtil.parseIndex(split[RESIDENT_INDEX]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            Index eventIndex \u003d ParserUtil.parseIndex(split[EVENT_INDEX]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new AssignCommand(residentIndex, eventIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.ClearEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class ClearEventCommandParser implements Parser\u003cClearEventCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearEventCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * and returns a ClearEventCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public ClearEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new ClearEventCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /* Prefix definitions - for residents */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_GROUP \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final Prefix PREFIX_BLOCKROOM \u003d new Prefix(\"br/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final Prefix PREFIX_BLOCK \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final Prefix PREFIX_FLOOR \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final Prefix PREFIX_ROOM_NUMBER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final Prefix PREFIX_MATRICULATION_NUMBER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /* Prefix definitions - for events */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Prefix PREFIX_EVENT_DESC \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Prefix PREFIX_EVENT_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Prefix PREFIX_EVENT_DATE \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 2,
      "lowjiefeng1998": 6,
      "-": 14,
      "athuyaoo": 4,
      "schoolex": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * and returns a DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCKROOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        PREFIX_BLOCKROOM, PREFIX_STUDENT_GROUP, PREFIX_MATRICULATION_NUMBER, PREFIX_GENDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOCKROOM).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            String blockString \u003d argMultimap.getValue(PREFIX_BLOCKROOM).orElse(\"\").substring(0, 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            String roomString \u003d argMultimap.getValue(PREFIX_BLOCKROOM).orElse(\"\").substring(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            editPersonDescriptor.setBlock(ParserUtil.parseBlock(blockString));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            editPersonDescriptor.setRoom(ParserUtil.parseRoom(roomString));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        parseStudentGroupsForEdit(argMultimap.getAllValues(PREFIX_STUDENT_GROUP))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .ifPresent(editPersonDescriptor::setStudentGroups);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            editPersonDescriptor.setMatriculationNumber("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    ParserUtil.parseMatriculationNumber(argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e studentGroups} into a {@code Set\u003cStudentGroup\u003e} if {@code studentGroups}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * If {@code studentGroups} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * {@code Set\u003cStudentGroup\u003e} containing zero studentGroups."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Optional\u003cSet\u003cStudentGroup\u003e\u003e parseStudentGroupsForEdit(Collection\u003cString\u003e studentGroups)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assert studentGroups !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (studentGroups.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Collection\u003cString\u003e studentGroupSet \u003d studentGroups.size() \u003d\u003d 1 \u0026\u0026 studentGroups.contains(\"\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                ? Collections.emptySet() : studentGroups;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return Optional.of(ParserUtil.parseStudentGroups(studentGroupSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 21,
      "-": 69,
      "athuyaoo": 4,
      "schoolex": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        PREFIX_EVENT_LOCATION, PREFIX_EVENT_DESC);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            editEventDescriptor.setEventName(ParserUtil.parseEventName("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_DATE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            editEventDescriptor.setEventDate(ParserUtil.parseEventDate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_DATE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            editEventDescriptor.setLocation(ParserUtil.parseLocation("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_LOCATION).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EVENT_DESC).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            editEventDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    argMultimap.getValue(PREFIX_EVENT_DESC).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new EditEventCommand(index, editEventDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public ExportCommand parse(String args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        String type \u003d args.strip().toLowerCase();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return new ExportCommand(type);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterEventCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.FilterEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class FilterEventCommandParser implements Parser\u003cFilterEventCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public FilterEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            Index eventIndex \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return new FilterEventCommand(eventIndex);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterEventCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FLOOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.StudentGroupPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FindCommandParser.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"going to start parsing find command\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                        PREFIX_BLOCK, PREFIX_STUDENT_GROUP, PREFIX_FLOOR,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                        PREFIX_ROOM_NUMBER, PREFIX_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d parsePredicates(argMultimap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new FindCommand(predicates);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Predicate\u003cPerson\u003e getStudentGroupPredicate(Collection\u003cString\u003e studentGroups) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        logger.log(Level.INFO, \"getting student group predicate\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new StudentGroupPredicate(parseStudentGroupsForFind(studentGroups));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e studentGroups} into a {@code Set\u003cStudentGroup\u003e}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * If {@code studentGroups} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * {@code Set\u003cStudentGroup\u003e} containing zero studentGroups."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @throws ParseException if {@code studentGroups} contain invalid student group name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Set\u003cStudentGroup\u003e parseStudentGroupsForFind(Collection\u003cString\u003e studentGroups)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assert studentGroups !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Collection\u003cString\u003e studentGroupNames \u003d studentGroups.size() \u003d\u003d 1 \u0026\u0026 studentGroups.contains(\"\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            ? Collections.emptySet() : studentGroups;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return ParserUtil.parseStudentGroups(studentGroupNames);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses {@code ArgumentMultimap argMultimap} into a {@code List\u003cPredicate\u003cPerson\u003e\u003e}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if {@code list of predicates} is empty or if parsing each argument throws an exception."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private List\u003cPredicate\u003cPerson\u003e\u003e parsePredicates(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d parseRoomPredicates(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            predicates.add(ParserUtil.parseNameContainsKeywordPredicate(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            predicates.add(ParserUtil.parseGenderMatchPredicate(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            predicates.add(ParserUtil.parseMatriculationNumberMatchPredicate("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                    argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_STUDENT_GROUP).isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            predicates.add(getStudentGroupPredicate(argMultimap.getAllValues(PREFIX_STUDENT_GROUP)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (predicates.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return predicates;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Takes room related predicates from {@code ArgumentMultimap argMultimap} and returns"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * a {@code List\u003cPredicate\u003cPerson\u003e\u003e roomPredicates} of room-related predicates."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if parsing each argument throws an exception."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private List\u003cPredicate\u003cPerson\u003e\u003e parseRoomPredicates(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e roomPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BLOCK).isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            roomPredicates.add(ParserUtil.parseRoomInBlockPredicate(argMultimap.getValue(PREFIX_BLOCK).get()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FLOOR).isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            roomPredicates.add(ParserUtil.parseRoomInFloorPredicate(argMultimap.getValue(PREFIX_FLOOR).get()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            roomPredicates"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                    .add(ParserUtil.parseRoomMatchesNumberPredicate(argMultimap.getValue(PREFIX_ROOM_NUMBER).get()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return roomPredicates;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 25,
      "-": 25,
      "athuyaoo": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.GenderMatchPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.MatriculationNumberMatchPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.RoomInBlockPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.RoomInFloorPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.RoomMatchesNumberPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ParserUtil.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses a {@code String studentGroup} into a {@code StudentGroup}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @throws ParseException if the given {@code studentGroup} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static StudentGroup parseStudentGroup(String studentGroup) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireNonNull(studentGroup);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String trimmedStudentGroup \u003d studentGroup.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (!StudentGroup.isValidStudentGroupName(trimmedStudentGroup)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            throw new ParseException(StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new StudentGroup(trimmedStudentGroup);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e studentGroups} into a {@code Set\u003cStudentGroup\u003e}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @throws ParseException if the {@code studentGroupName} is invalid while iterating studentGroups."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static Set\u003cStudentGroup\u003e parseStudentGroups(Collection\u003cString\u003e studentGroups) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireNonNull(studentGroups);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        final Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        for (String studentGroupName : studentGroups) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            studentGroupSet.add(parseStudentGroup(studentGroupName));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return studentGroupSet;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Parses {@code Block block} into a {@code Remark}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static Block parseBlock(String block) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(block);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        String trimmedBlock \u003d block.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (!Block.isValidBlock(trimmedBlock)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            throw new ParseException(Block.getMessageConstraints());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return new Block(trimmedBlock);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Parses {@code Room room} into a {@code Room}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static Room parseRoom(String room) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        String trimmedRoom \u003d room.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (!Room.isValidRoom(trimmedRoom)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            throw new ParseException(Room.getMessageConstraints());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return new Room(trimmedRoom);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses a {@code String matriculationNumber} into an {@code MatriculationNumber}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @throws ParseException if the given {@code matriculationNumber} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static MatriculationNumber parseMatriculationNumber(String matriculationNumber) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireNonNull(matriculationNumber);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String trimmedMatriculationNumber \u003d matriculationNumber.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (!MatriculationNumber.isValidMatriculationNumber(trimmedMatriculationNumber)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            throw new ParseException(MatriculationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new MatriculationNumber(trimmedMatriculationNumber);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses a {@code String eventName} into an {@code EventName}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static EventName parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        String trimmedEventName \u003d eventName.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!EventName.isValidEventName(trimmedEventName)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new EventName(trimmedEventName);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses a {@code String eventDate} into a {@code EventDate}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the given {@code eventDate} is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static EventDate parseEventDate(String eventDate) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        String trimmedEventDate \u003d eventDate.trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!EventDate.isValidEventDate(eventDate)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new EventDate(trimmedEventDate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses a {@code String block} into a {@code RoomInBlockPredicate}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the given {@code block} is invalid."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static RoomInBlockPredicate parseRoomInBlockPredicate(String block) throws ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"parsing RoomInBlockPredicate\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        Block searchedBlock \u003d parseBlock(block);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new RoomInBlockPredicate(searchedBlock);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses a {@code String floor} into a {@code RoomInFloorPredicate}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the given {@code floor} is invalid."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static RoomInFloorPredicate parseRoomInFloorPredicate(String floor) throws ParseException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"parsing RoomInFloorPredicate\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(floor);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String trimmedFloor \u003d floor.trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!RoomInFloorPredicate.isValidFloorNumber(trimmedFloor)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new ParseException(RoomInFloorPredicate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new RoomInFloorPredicate(trimmedFloor);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses {@code String keywords} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the {@code keywords} are empty."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static NameContainsKeywordsPredicate parseNameContainsKeywordPredicate("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            String keywords) throws ParseException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"adding name keywords to filter\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String trimmedKeywords \u003d keywords.trim();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (trimmedKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            logger.log(Level.WARNING, \"empty keywords for name\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new ParseException(FindCommand.MESSAGE_EMPTY_KEYWORD);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String[] nameKeywords \u003d trimmedKeywords.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assert nameKeywords.length \u003e 0 : \"there should be some keywords\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses {@code String roomNumber} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the given {@code roomNumber} is invalid."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static RoomMatchesNumberPredicate parseRoomMatchesNumberPredicate("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            String roomNumber) throws ParseException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"parsing RoomMatchesNumberPredicate\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(roomNumber);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String trimmedRoomNumber \u003d roomNumber.trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!RoomMatchesNumberPredicate.isValidRoomNumber(trimmedRoomNumber)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new ParseException(RoomMatchesNumberPredicate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new RoomMatchesNumberPredicate(trimmedRoomNumber);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses a {@code String matriculationNumberString} into a {@code MatriculationNumberMatchPredicate}."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the given {@code matriculationNumberString} is invalid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static MatriculationNumberMatchPredicate parseMatriculationNumberMatchPredicate("
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            String matriculationNumberString) throws ParseException {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"parsing MatriculationNumberMatchPredicate\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumber matriculationNumber \u003d parseMatriculationNumber(matriculationNumberString);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new MatriculationNumberMatchPredicate(matriculationNumber);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses a {@code String gender} into a {@code GenderMatchPredicate}."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static GenderMatchPredicate parseGenderMatchPredicate(String gender) throws ParseException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        logger.log(Level.INFO, \"parsing GenderMatchPredicate\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        Gender predicateGender \u003d parseGender(gender);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new GenderMatchPredicate(predicateGender);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 32,
      "lowjiefeng1998": 64,
      "-": 117,
      "athuyaoo": 108,
      "schoolex": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    //// event-level methods"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The event must not already exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Removes this {@code event} from this {@code AddressBook}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * {@code event} must exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void removeEvent(Event event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        events.remove(event);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * The event identity of {@code editedPerson} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                + events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 events.equals(((AddressBook) other).events);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return Objects.hash(persons, events);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 11,
      "lowjiefeng1998": 51,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void deleteEvent(Event event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * {@code event} must not already exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    void setEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Returns an unmodifiable view of a list of all person"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns an unmodifiable view of a list of all events"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 7,
      "teekoksiang": 5,
      "lowjiefeng1998": 26,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return addressBook.hasEvent(event);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        addressBook.removeEvent(event);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        addressBook.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return addressBook.getPersonList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return addressBook.getEventList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 6,
      "teekoksiang": 5,
      "lowjiefeng1998": 26,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    String[] getBlockSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    int getMinRoomSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    int getMaxRoomSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    int getMinFloorSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    int getMaxFloorSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "schoolex": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private String[] blockSettings \u003d {\"A\", \"B\", \"C\", \"D\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private int minRoomSettings \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private int maxRoomSettings \u003d 20;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private int minFloorSettings \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private int maxFloorSettings \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        setBlockSettings(newUserPrefs.getBlockSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        setMinRoomSettings(newUserPrefs.getMinRoomSettings());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        setMaxRoomSettings(newUserPrefs.getMaxRoomSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        setMinFloorSettings(newUserPrefs.getMinFloorSettings());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        setMaxFloorSettings(newUserPrefs.getMaxFloorSettings());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public String[] getBlockSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return blockSettings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void setBlockSettings(String[] blockSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(blockSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.blockSettings \u003d blockSettings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public int getMinRoomSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return minRoomSettings;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void setMinRoomSettings(int minRoomSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(minRoomSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.minRoomSettings \u003d minRoomSettings;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public int getMaxRoomSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return maxRoomSettings;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void setMaxRoomSettings(int maxRoomSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(maxRoomSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.maxRoomSettings \u003d maxRoomSettings;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public int getMinFloorSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return minFloorSettings;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void setMinFloorSettings(int minFloorSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(minFloorSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.minFloorSettings \u003d minFloorSettings;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public int getMaxFloorSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return maxFloorSettings;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void setMaxFloorSettings(int maxFloorSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(maxFloorSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.maxFloorSettings \u003d maxFloorSettings;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        sb.append(\"\\nBlock Settings : \" + blockSettings);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        sb.append(\"\\nMin room Settings : \" + minRoomSettings);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        sb.append(\"\\nMax room Settings : \" + maxRoomSettings);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        sb.append(\"\\nMin floor Settings : \" + minFloorSettings);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        sb.append(\"\\nMax floor Settings : \" + maxFloorSettings);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "schoolex": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Represents an Event\u0027s description in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                || (other instanceof Description // instance of handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Represents an Event in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final EventDate eventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Set\u003cPerson\u003e attendeesList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Event(EventName eventName, EventDate eventDate, Location location, Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireAllNonNull(eventName, eventDate, location, description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.attendeesList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Event (EventName eventName, EventDate eventDate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                  Location location, Description description, Set\u003cPerson\u003e personSet) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireAllNonNull(eventName, eventDate, location, description, personSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.attendeesList \u003d personSet;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventName getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventDate getEventDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Set\u003cPerson\u003e getAttendeesList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return attendeesList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if both events have the same name, location, eventDate and description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 otherEvent.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if both events have the same name and description."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 otherEvent.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 attendeesList.equals(otherEvent.attendeesList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return Objects.hash(eventName, description, eventDate, location, attendeesList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                .append(\"\\nEvent Date: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                .append(getEventDate())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                .append(\"\\nLocation: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                .append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 12,
      "lowjiefeng1998": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Represents an Event\u0027s occurrence date in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class EventDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \"Event dates must be of the format DD/MM/YYYY HH:mm. e.g. 01/01/2020 15:00 for 01 Jan 2020, 3pm.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final DateTimeFormatter VALIDATION_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * See also {@link #toString()} to get a proper string format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public final LocalDateTime eventDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Constructs a {@code EventDate}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @param date A valid event date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventDate(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        checkArgument(isValidEventDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventDate \u003d LocalDateTime.parse(date, VALIDATION_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static boolean isValidEventDate(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            LocalDateTime.parse(test, VALIDATION_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return VALIDATION_FORMATTER.format(eventDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return obj \u003d\u003d this"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            || (obj instanceof EventDate"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 eventDate.equals(((EventDate) obj).eventDate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return eventDate.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Represents an Event\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Event names can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The first character of the eventName must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Constructs an {@code EventName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @param eventName A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        checkArgument(isValidEventName(eventName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static boolean isValidEventName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 eventName.equals(((EventName) other).eventName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return eventName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/FilterEventPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class FilterEventPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Set\u003cPerson\u003e attendeeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public FilterEventPredicate(Set\u003cPerson\u003e attendeeList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.attendeeList \u003d attendeeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return attendeeList.contains(person);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Represents an Event\u0027s location in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Event locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public final String location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 location.equals(((Location) other).location)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return location.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * An event is considered unique using {@code Event#isSameEvent}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * events uses #Event#isSameEvent(Event) for equality so as to ensure the event being added is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * as to ensure that the event with the exact same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if the list contains an equivalent event in the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * The event identity of {@code editedPerson} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 17,
      "lowjiefeng1998": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class EventNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Block.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "schoolex"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": " * Represents a Person\u0027s Block number in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBlock(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "public class Block {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \"Block should only contain alphabets\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static List\u003cString\u003e blockPref \u003d Arrays.asList(\"A\", \"B\", \"C\", \"D\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Constructs a {@code Block}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * @param block A valid Block number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public Block(String block) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(block);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        checkArgument(isValidBlock(block), getMessageConstraints());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        value \u003d block.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static List\u003cString\u003e getBlockList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return new ArrayList\u003c\u003e(blockPref);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        StringBuilder blockConstraints \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        blockConstraints.append(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        for (String block : blockPref) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            blockConstraints.append(block);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            blockConstraints.append(\", \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        blockConstraints.setLength(blockConstraints.length() - 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return MESSAGE_CONSTRAINTS + blockConstraints.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Returns true if a given string is a valid Block number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static boolean isValidBlock(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 blockPref.contains(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static void setBlockPref(String[] pref) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        blockPref \u003d Arrays.asList(pref);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                || (other instanceof Block // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                \u0026\u0026 value.equals(((Block) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "schoolex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "schoolex": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Represents a Resident\u0027s gender in Hall-y."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender should either be M for male or F for female.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public final GenderType type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Represents the type of gender, male and female"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public enum GenderType {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MALE(\"Male\", \"M\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FEMALE(\"Female\", \"F\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        private final String option;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        GenderType(String name, String option) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            this.option \u003d option;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        public String getOption() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            return this.option;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            return this.name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Constructs an {@code Gender}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        type \u003d gender.equals(GenderType.MALE.getOption()) ? GenderType.MALE : GenderType.FEMALE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Returns if a given string is a valid gender."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return test.equals(GenderType.MALE.getOption()) || test.equals(GenderType.FEMALE.getOption());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return type.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 type \u003d\u003d ((Gender) other).type); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/GenderMatchPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code gender} matches the current predicate\u0027s gender."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class GenderMatchPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Constructs a {@code GenderMatchPredicate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param gender to test people with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public GenderMatchPredicate(Gender gender) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return person.getGender().equals(gender);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                || (other instanceof GenderMatchPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 gender.equals(((GenderMatchPredicate) other).gender)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatriculationNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Represents a Person\u0027s matriculation number in Hall-y."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatriculationNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class MatriculationNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Matriculation numbers \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + \"should follow \u0027A0000000X\u0027 format.\\nIt begins with a character \u0027A\u0027, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + \"follows by 7 numeric characters and ends with an upper case alphabetic character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * The first character of the matriculation number must be \u0027A\u0027,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * follows by 7 numeric characters and ends with an upper case alphabetic character."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^A[0-9]{7}[A-Z]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Constructs an {@code MatriculationNumber}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @param matriculationNumber A valid matriculation number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public MatriculationNumber(String matriculationNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireNonNull(matriculationNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        checkArgument(isValidMatriculationNumber(matriculationNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        value \u003d matriculationNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Returns true if a given string is a valid matriculationNumber."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static boolean isValidMatriculationNumber(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                || (other instanceof MatriculationNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                \u0026\u0026 value.equals(((MatriculationNumber) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatriculationNumberMatchPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code matriculation number} matches the current matriculation number."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class MatriculationNumberMatchPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final MatriculationNumber matriculationNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Constructs a {@code MatriculationNumberMatchPredicate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param matriculationNumber matriculationNumber to test people with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public MatriculationNumberMatchPredicate(MatriculationNumber matriculationNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(matriculationNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.matriculationNumber \u003d matriculationNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return person.getMatriculationNumber().equals(matriculationNumber);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                || (other instanceof MatriculationNumberMatchPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 matriculationNumber"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                    .equals(((MatriculationNumberMatchPredicate) other).matriculationNumber)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private final MatriculationNumber matriculationNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private final Set\u003cStudentGroup\u003e studentGroups \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private final Block block;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private final Room room;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Gender gender, Set\u003cStudentGroup\u003e studentGroups,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                Block block, Room room, MatriculationNumber matriculationNumber) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireAllNonNull(name, phone, email, address, gender, studentGroups, block, room, matriculationNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.studentGroups.addAll(studentGroups);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.block \u003d block;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.matriculationNumber \u003d matriculationNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public Block getBlock() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return block;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public Room getRoom() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return room;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Returns an immutable student group set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public Set\u003cStudentGroup\u003e getStudentGroups() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return Collections.unmodifiableSet(studentGroups);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public MatriculationNumber getMatriculationNumber() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return matriculationNumber;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                || otherPerson.getMatriculationNumber().equals(getMatriculationNumber()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                \u0026\u0026 otherPerson.getStudentGroups().equals(getStudentGroups())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                \u0026\u0026 otherPerson.getMatriculationNumber().equals(getMatriculationNumber());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return Objects.hash(name, phone, email, address, gender, studentGroups, matriculationNumber);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .append(\" Block: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                .append(getBlock())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                .append(\" Room: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                .append(getRoom())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                .append(\" Matriculation Number: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .append(getMatriculationNumber())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .append(\" Student Groups: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        getStudentGroups().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 21,
      "-": 110,
      "athuyaoo": 9,
      "schoolex": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "schoolex"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": " * Represents a Person\u0027s Room number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \"Room numbers should only contain numbers, and it should be 3 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static int minFloorNumber \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static int minRoomNumber \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static int maxFloorNumber \u003d 4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static int maxRoomNumber \u003d 20;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Constructs a {@code Room}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * @param room A valid Room number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public Room(String room) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        checkArgument(isValidRoom(room), getMessageConstraints());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        value \u003d room;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Returns true if a given string is a valid Room number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static boolean isValidRoom(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        int room \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        int roomNo \u003d room % 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        int floorNo \u003d Math.floorDiv(room, 100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return isFloorWithinRange(floorNo) \u0026\u0026 isRoomWithinRange(roomNo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static boolean isRoomWithinRange(int roomNo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return (roomNo \u003c\u003d maxRoomNumber) \u0026\u0026 (roomNo \u003e\u003d minRoomNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static boolean isFloorWithinRange(int floorNo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return (floorNo \u003c\u003d maxFloorNumber) \u0026\u0026 (floorNo \u003e\u003d minFloorNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static String getFloorRange() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return \"Floors : \" + minFloorNumber + \" to \" + maxFloorNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static String getFloorNumRange() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return minFloorNumber + \" - \" + maxFloorNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static String getRoomRange() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return \"Rooms : \" + minFloorNumber + String.format(\"%02d\", minRoomNumber) + \" to \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + maxFloorNumber + maxRoomNumber;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static String getRoomNumRange() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return String.format(\"%02d\", minRoomNumber) + \" - \" + maxFloorNumber;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return MESSAGE_CONSTRAINTS + \"\\nFloor : \" + minFloorNumber + \" to \" + maxFloorNumber"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + \"\\nRoom: \" + minRoomNumber + \" - \" + maxRoomNumber;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static void setRoomPref(int minRoom, int maxRoom, int minFloor, int maxFloor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        minRoomNumber \u003d minRoom;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        maxRoomNumber \u003d maxRoom;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        minFloorNumber \u003d minFloor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        maxFloorNumber \u003d maxFloor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                || (other instanceof Room // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                \u0026\u0026 value.equals(((Room) other).value)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "schoolex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 17,
      "schoolex": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RoomInBlockPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Room} is in the current block."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class RoomInBlockPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final Block block;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Constructs a {@code RoomInBlockPredicate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param block A block to check with people\u0027s block."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public RoomInBlockPredicate(Block block) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(block);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.block \u003d block;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return person.getBlock().equals(block);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                || (other instanceof RoomInBlockPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 block.equals(((RoomInBlockPredicate) other).block)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RoomInFloorPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.model.person.Room.getFloorNumRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.model.person.Room.isFloorWithinRange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Room} is in the current floor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class RoomInFloorPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            \"Floor should have one number inside.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"It should also be within \" + getFloorNumRange() + \".\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final String floor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Constructs a {@code RoomInFloorPredicate}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param floor A valid floor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public RoomInFloorPredicate(String floor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(floor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        checkArgument(isValidFloorNumber(floor), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.floor \u003d floor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Returns true if a given string is a valid floor number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static boolean isValidFloorNumber(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        int floorNo \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return isFloorWithinRange(floorNo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return person.getRoom().value.startsWith(floor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                || (other instanceof RoomInFloorPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 floor.equals(((RoomInFloorPredicate) other).floor)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/RoomMatchesNumberPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.model.person.Room.getRoomNumRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.model.person.Room.isRoomWithinRange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Room} is in the current floor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class RoomMatchesNumberPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            \"Room number is invalid, it should be 2 digits long.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            + \"It should also be in the range \" + getRoomNumRange() + \".\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private static final int ROOM_NUMBER_START_INDEX \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final String room;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Constructs a {@code RoomMatchesNumberPredicate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * @param room A valid room."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public RoomMatchesNumberPredicate(String room) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        checkArgument(isValidRoomNumber(room), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assert isValidRoomNumber(room) : \"The string is a valid room number.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Returns true if a given string is a valid room number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static boolean isValidRoomNumber(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        int roomNo \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return isRoomWithinRange(roomNo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return person.getRoom().value.substring(ROOM_NUMBER_START_INDEX).equals(room);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                || (other instanceof RoomMatchesNumberPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                \u0026\u0026 room.equals(((RoomMatchesNumberPredicate) other).room)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/StudentGroupPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Tests that a {@code Person} contains the {@code Set\u003cStudentGroup\u003e}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class StudentGroupPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private final Set\u003cStudentGroup\u003e studentGroupSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public StudentGroupPredicate(Set\u003cStudentGroup\u003e studentGroupSet) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.studentGroupSet \u003d studentGroupSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return person.getStudentGroups().containsAll(studentGroupSet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            || (other instanceof StudentGroupPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            \u0026\u0026 studentGroupSet.equals(((StudentGroupPredicate) other).studentGroupSet)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studentgroup/StudentGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.model.studentgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Represents a Student group in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidStudentGroupName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class StudentGroup {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Student groups names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public final String studentGroupName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Constructs a {@code StudentGroup}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @param studentGroupName A valid student group name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public StudentGroup(String studentGroupName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        requireNonNull(studentGroupName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        checkArgument(isValidStudentGroupName(studentGroupName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.studentGroupName \u003d studentGroupName.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Returns true if a given string is a valid student group name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static boolean isValidStudentGroupName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                || (other instanceof StudentGroup // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                \u0026\u0026 studentGroupName.equals(((StudentGroup) other).studentGroupName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return studentGroupName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return \u0027[\u0027 + studentGroupName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Gender(\"M\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                getStudentGroupSet(\"badminton\"), new Block(\"A\"), new Room(\"405\"), new MatriculationNumber(\"A0123456B\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Gender(\"F\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                getStudentGroupSet(\"basketball\", \"dance\"), new Block(\"A\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                    new Room(\"405\"), new MatriculationNumber(\"A0123456C\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Gender(\"F\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                getStudentGroupSet(\"hackers\"), new Block(\"A\"), new Room(\"405\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    new MatriculationNumber(\"A0123456D\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Gender(\"M\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                getStudentGroupSet(\"soccer\"), new Block(\"A\"), new Room(\"405\"), new MatriculationNumber(\"A0123456E\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Gender(\"M\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                getStudentGroupSet(\"choir\"), new Block(\"A\"), new Room(\"405\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    new MatriculationNumber(\"A0123456F\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Gender(\"M\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                getStudentGroupSet(\"tableTennis\"), new Block(\"A\"), new Room(\"405\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                new MatriculationNumber(\"A0123456G\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            new Event(new EventName(\"Hall Lunch\"), new EventDate(\"01/11/2020 13:00\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    new Location(\"Dining Hall\"), new Description(\"Hall-wide lunch event.\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            new Event(new EventName(\"Hall Dinner\"), new EventDate(\"24/11/2020 18:00\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    new Location(\"Dining Hall\"), new Description(\"Hall-wide dinner event.\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Returns a student group set containing the list of strings given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static Set\u003cStudentGroup\u003e getStudentGroupSet(String... strings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .map(StudentGroup::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 14,
      "lowjiefeng1998": 14,
      "-": 47,
      "athuyaoo": 7,
      "schoolex": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BlockSetting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Represents a block with its settings."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class BlockSetting {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final String blockName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public BlockSetting(String blockName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.blockName \u003d blockName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public String getBlockName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return blockName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public String getFloors() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return Room.getFloorRange();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public String getRooms() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return Room.getRoomRange();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!(other instanceof BlockSetting)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        BlockSetting otherBlockSetting \u003d (BlockSetting) other;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return otherBlockSetting.getBlockName().equals(getBlockName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 32,
      "schoolex": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Jackson-friendly version of {@link Event}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event %s field is missing\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String PERSON_NOT_FOUND_FORMAT \u003d \"Resident with matriculation number %s was not found\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String PERSON_FIELD_INVALID_FORMAT \u003d \"%s is not a valid matriculation number\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String PERSON_REPEATED_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \"Resident with matriculation number %s appeared twice in the list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final String eventName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final String eventDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final List\u003cString\u003e attendees;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                            @JsonProperty(\"eventDate\") String eventDate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                            @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                            @JsonProperty(\"attendees\") List\u003cString\u003e attendees) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireAllNonNull(eventName, eventDate, location, description, attendees);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public JsonAdaptedEvent(Event event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventName \u003d event.getName().eventName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventDate \u003d event.getEventDate().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.location \u003d event.getLocation().location;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.description \u003d event.getDescription().description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.attendees \u003d event.getAttendeesList().stream().map(person -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                person.getMatriculationNumber().value).collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Converts this Jackson-friendly adapted event into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Event toModelType(Map\u003cString, Person\u003e personMap) throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!EventName.isValidEventName(eventName)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        final EventName modelName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!EventDate.isValidEventDate(eventDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        final EventDate modelDate \u003d new EventDate(eventDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (attendees \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                    \"attendees\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        final Set\u003cPerson\u003e modelAttendees \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (String matriculationNumber : attendees) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (!MatriculationNumber.isValidMatriculationNumber(matriculationNumber)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                logger.warning(String.format(PERSON_FIELD_INVALID_FORMAT, matriculationNumber));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                logger.warning(String.format(\"Omitting %s from the attendees list\", matriculationNumber));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (!personMap.containsKey(matriculationNumber)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                logger.warning(String.format(PERSON_NOT_FOUND_FORMAT, matriculationNumber));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                logger.warning(String.format(\"Omitting %s from the attendees list\", matriculationNumber));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            boolean hasAddedPerson \u003d modelAttendees.add(personMap.get(matriculationNumber));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (!hasAddedPerson) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                logger.warning(String.format(PERSON_REPEATED_FORMAT, matriculationNumber));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                logger.warning(String.format(\"%s will be only added once\", matriculationNumber));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new Event(modelName, modelDate, modelLocation, modelDescription, modelAttendees);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private final List\u003cJsonAdaptedStudentGroup\u003e studentGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private final String block;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private final String room;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private final String matriculationNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                             @JsonProperty(\"studentGroups\") List\u003cJsonAdaptedStudentGroup\u003e studentGroups,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"block\") String block, @JsonProperty(\"room\") String room,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            @JsonProperty(\"matriculationNumber\") String matriculationNumber) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (studentGroups !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            this.studentGroups.addAll(studentGroups);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.block \u003d block;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.matriculationNumber \u003d matriculationNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        gender \u003d source.getGender().type.getOption();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroups.addAll(source.getStudentGroups().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .map(JsonAdaptedStudentGroup::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        block \u003d source.getBlock().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        room \u003d source.getRoom().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        matriculationNumber \u003d source.getMatriculationNumber().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        final List\u003cStudentGroup\u003e personStudentGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        for (JsonAdaptedStudentGroup studentGroup : studentGroups) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            personStudentGroups.add(studentGroup.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        final Set\u003cStudentGroup\u003e modelStudentGroups \u003d new HashSet\u003c\u003e(personStudentGroups);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (matriculationNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    MatriculationNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (!MatriculationNumber.isValidMatriculationNumber(matriculationNumber)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            throw new IllegalValueException(MatriculationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (block \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                    Block.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (!Block.isValidBlock(block)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            throw new IllegalValueException(Block.getMessageConstraints());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (room \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                    Room.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        if (!Room.isValidRoom(room)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            throw new IllegalValueException(Room.getMessageConstraints());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        final Block modelBlock \u003d new Block(block);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        final Room modelRoom \u003d new Room(room);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        final MatriculationNumber modelMatriculationNumber \u003d new MatriculationNumber(matriculationNumber);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                modelAddress, modelGender, modelStudentGroups, modelBlock, modelRoom, modelMatriculationNumber);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 27,
      "-": 98,
      "athuyaoo": 13,
      "schoolex": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudentGroup.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Jackson-friendly version of {@link StudentGroup}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "class JsonAdaptedStudentGroup {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private final String studentGroupName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudentGroup} with the given {@code studentGroupName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public JsonAdaptedStudentGroup(String studentGroupName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.studentGroupName \u003d studentGroupName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Converts a given {@code StudentGroup} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public JsonAdaptedStudentGroup(StudentGroup source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupName \u003d source.studentGroupName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public String getStudentGroupName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return studentGroupName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Converts this Jackson-friendly adapted student group object into the model\u0027s {@code StudentGroup} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student group."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public StudentGroup toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (!StudentGroup.isValidStudentGroupName(studentGroupName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            throw new IllegalValueException(StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new StudentGroup(studentGroupName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons and events."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Map\u003cString, Person\u003e personMap \u003d getMatriculationNumberMap(addressBook.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType(personMap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Map\u003cString, Person\u003e getMatriculationNumberMap(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        requireNonNull(personList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Map\u003cString, Person\u003e personsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            assert person !\u003d null : \"null was included in the personList\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            String matriculationNumber \u003d person.getMatriculationNumber().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            personsMap.put(matriculationNumber, person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return personsMap;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 35,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BlockSettingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.storage.BlockSetting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class BlockSettingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String FXML \u003d \"BlockSettingCard.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private final BlockSetting blockSetting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Label blockName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private Label floors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private Label rooms;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Creates a {@code BlockSettingCard} with the given {@code BlockSetting}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public BlockSettingCard(BlockSetting blockSetting) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.blockSetting \u003d blockSetting;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        blockName.setText(blockSetting.getBlockName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        floors.setText(blockSetting.getFloors());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        rooms.setText(blockSetting.getRooms());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        if (!(other instanceof BlockSettingCard)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        BlockSettingCard card \u003d (BlockSettingCard) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return blockSetting.equals(card.blockSetting);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 47,
      "schoolex": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private Label eventDateLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Creates a {@code EventCode} with the given {@code Event} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        name.setText(event.getName().eventName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        eventDateLocation.setText(event.getEventDate().toString() + \" @ \" + event.getLocation().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        description.setText(event.getDescription().description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        event.getAttendeesList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                .forEach(person -\u003e tags.getChildren()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                .add(new Label(person.getName().toString())));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 69,
      "lowjiefeng1998": 2,
      "schoolex": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Creates a {@code EventListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t11-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private StackPane referenceSectionPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        ReferenceSection referenceSection \u003d new ReferenceSection();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        referenceSectionPlaceholder.getChildren().add(referenceSection.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getEventList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 7,
      "lowjiefeng1998": 6,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private FlowPane studentGroups;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private Label blockRoom;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Label matriculationNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        address.setWrapText(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        email.setWrapText(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        blockRoom.setText(person.getBlock().value + person.getRoom().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        gender.setText(person.getGender().type.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        matriculationNumber.setText(person.getMatriculationNumber().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        person.getStudentGroups().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .sorted(Comparator.comparing(studentGroup -\u003e studentGroup.studentGroupName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .forEach(studentGroup -\u003e studentGroups.getChildren().add(new Label(studentGroup.studentGroupName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 6,
      "-": 74,
      "athuyaoo": 3,
      "schoolex": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReferenceSection.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.storage.BlockSetting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * Panel containing the reference to blocks present."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class ReferenceSection extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String FXML \u003d \"ReferenceSection.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private ListView\u003cBlockSetting\u003e blockListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Creates a {@code ReferenceSection}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public ReferenceSection() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        ObservableList\u003cBlockSetting\u003e blocksReference \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        List\u003cBlockSetting\u003e blocks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        List\u003cString\u003e availableBlocks \u003d Block.getBlockList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        for (String block : availableBlocks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            blocks.add(new BlockSetting(block));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        blocksReference.addAll(blocks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        blockListView.setItems(blocksReference);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        blockListView.setCellFactory(listView -\u003e new BlockCardCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    class BlockCardCell extends ListCell\u003cBlockSetting\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         * Overrides the default listCell view."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         * @param item object to create"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         * @param empty boolean flag to check if the item is just a placeholder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         * @see PersonListPanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        protected void updateItem(BlockSetting item, boolean empty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                setGraphic(new BlockSettingCard(item).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 54,
      "schoolex": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/houses.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/BlockSettingCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  \u003cLabel fx:id\u003d\"blockName\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\" GridPane.rowSpan\u003d\"2\" styleClass\u003d\"blockName\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cInsets right\u003d\"10\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  \u003cLabel fx:id\u003d\"floors\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  \u003cLabel fx:id\u003d\"rooms\" GridPane.rowIndex\u003d\"1\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 17,
      "schoolex": 3
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": ".label-section-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-font-size: 24pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-background-color: #1e5f74;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ".reference-list .label {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ".reference-list .blockName {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-background-color: #4f3b78;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "#studentGroups {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "#studentGroups .label {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-background-color: #008891;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 6,
      "teekoksiang": 2,
      "lowjiefeng1998": 16,
      "-": 355,
      "schoolex": 9
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cLabel fx:id\u003d\"eventDateLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventDateLocation\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 39
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"68.0\" prefWidth\u003d\"248.0\" styleClass\u003d\"label-section-header\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" text\u003d\"Events\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 6,
      "schoolex": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         title\u003d\"Hall-y\" minWidth\u003d\"900\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    \u003cImage url\u003d\"@/images/houses.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003cMenuBar VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"menuBar\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                   minHeight\u003d\"185\" prefHeight\u003d\"185\" maxHeight\u003d\"185\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003cBorderPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003cleft\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cStackPane fx:id\u003d\"referenceSectionPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                        minWidth\u003d\"200\" maxWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003c/left\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003ccenter\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "          \u003c/center\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "          \u003cright\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003cVBox fx:id\u003d\"eventList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "              \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "          \u003c/right\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"statusbarPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 9,
      "lowjiefeng1998": 15,
      "-": 53,
      "schoolex": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"studentGroups\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003cLabel fx:id\u003d\"blockRoom\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$blockRoom\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "      \u003cLabel fx:id\u003d\"matriculationNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matriculationNumber\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 2,
      "-": 35,
      "athuyaoo": 1,
      "schoolex": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "   \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"68.0\" prefWidth\u003d\"248.0\" styleClass\u003d\"label-section-header\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "         \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" text\u003d\"Residents\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "         \u003c/Text\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" prefWidth\u003d\"248.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "         \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "schoolex": 20
    }
  },
  {
    "path": "src/main/resources/view/ReferenceSection.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "\u003cBorderPane styleClass\u003d\"reference-list\" xmlns\u003d\"http://javafx.com/javafx/11.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" fillHeight\u003d\"true\" styleClass\u003d\"label-section-header\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "              \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" text\u003d\"Blocks\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"180.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                      \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "              \u003c/Text\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "          \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": "              \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "          \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "         \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003c/top\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003ccenter\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        \u003cInsets left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \u003cListView fx:id\u003d\"blockListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003c/center\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 21,
      "schoolex": 18
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"room\" : \"405\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"room\" : \"405\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \"events\": []"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 2,
      "-": 10,
      "schoolex": 6
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \"events\": []"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"room\" : \"405\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\": \"F\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\": [ \"badminton\" ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456B\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"room\" : \"405\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\": \"F\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456B\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \"events\": []"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 4,
      "lowjiefeng1998": 2,
      "-": 12,
      "athuyaoo": 2,
      "schoolex": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\": \"M\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"room\" : \"405\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"a0123456b\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \"events\": []"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 1,
      "lowjiefeng1998": 2,
      "-": 6,
      "athuyaoo": 1,
      "schoolex": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"315\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456B\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [ \"badminton\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"johnd@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"block\" : \"C\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"410\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456C\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [ \"hackers\", \"soccer\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"heinz@example.com\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"wall street\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"block\" : \"B\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"119\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456D\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [  ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"cornelia@example.com\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"10th street\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    \"block\" : \"A\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"201\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456E\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [ \"dance\" ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"werner@example.com\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"michegan ave\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"block\" : \"D\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"118\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456F\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [  ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"lydia@example.com\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"little tokyo\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"block\" : \"C\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"301\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"F\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456G\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [ \"badminton\" ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\" : \"anna@example.com\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\" : \"4th street\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"block\" : \"B\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"room\" : \"310\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    \"gender\" : \"M\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"matriculationNumber\": \"A0123456H\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    \"studentGroups\" : [ \"basketball\" ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  \"events\": ["
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \"eventName\": \"Hall Lunch\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \"eventDate\": \"01/01/2020 15:00\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \"location\": \"Dining Hall\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \"description\": \"Eat lunch together\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "      \"attendees\": []"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 14,
      "lowjiefeng1998": 10,
      "-": 38,
      "athuyaoo": 19,
      "schoolex": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/houses.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOCKROOM_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_AMY + GENDER_DESC_AMY + BLOCKROOM_DESC_AMY + MATRICULATION_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withStudentGroups().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 2,
      "-": 160,
      "athuyaoo": 1,
      "schoolex": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 5,
      "teekoksiang": 5,
      "lowjiefeng1998": 19,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AssignCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.MESSAGE_DUPLICATE_PERSON_ADDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void execute_assignResident_success() throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Event event \u003d model.getEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        CommandResult commandResult \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT).execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // compare output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertEquals(String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, person.getName(), event.getName()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void execute_dupeResidentInList_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        Event event \u003d model.getEventList().get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        CommandResult commandResult \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT).execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(INDEX_FIRST_PERSON, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_PERSON_ADDED,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        person.getName(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        event.getName()), () -\u003e assignCommand.execute(model));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCKROOM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String VALID_STUDENT_GROUP_DANCE \u003d \"dance\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String VALID_STUDENT_GROUP_BASKETBALL \u003d \"basketball\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String VALID_BLOCK \u003d \"A\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String VALID_ROOM \u003d \"420\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String VALID_MATRICULATION_NUMBER_AMY \u003d \"A0123456K\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String VALID_MATRICULATION_NUMBER_BOB \u003d \"A0123456L\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String STUDENT_GROUP_DESC_BASKETBALL \u003d \" \" + PREFIX_STUDENT_GROUP"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + VALID_STUDENT_GROUP_BASKETBALL;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String STUDENT_GROUP_DESC_DANCE \u003d \" \" + PREFIX_STUDENT_GROUP + VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String BLOCKROOM_DESC_AMY \u003d \" \" + PREFIX_BLOCKROOM + VALID_BLOCK + VALID_ROOM;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String BLOCKROOM_DESC_BOB \u003d \" \" + PREFIX_BLOCKROOM + VALID_BLOCK + VALID_ROOM;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String MATRICULATION_NUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRICULATION_NUMBER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + VALID_MATRICULATION_NUMBER_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String MATRICULATION_NUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRICULATION_NUMBER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + VALID_MATRICULATION_NUMBER_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String INVALID_GENDER \u003d \" \" + PREFIX_GENDER + \"A\"; // \u0027*\u0027 not allowed in gender"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    // \u0027*\u0027 not allowed in student group"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String INVALID_STUDENT_GROUP_DESC \u003d \" \" + PREFIX_STUDENT_GROUP + \"soccer*\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String INVALID_MATRICULATION_NUMBER_DESC \u003d \" \" + PREFIX_MATRICULATION_NUMBER"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            + \"C0123456B\"; // should start with \u0027A\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String INVALID_BLOCK \u003d \" \" + PREFIX_BLOCK + \"A2\"; // number not allowed in block"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withMatriculationNumber(VALID_MATRICULATION_NUMBER_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_BASKETBALL).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withMatriculationNumber(VALID_MATRICULATION_NUMBER_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE, VALID_STUDENT_GROUP_BASKETBALL).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 22,
      "-": 120,
      "athuyaoo": 7,
      "schoolex": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 3,
      "-": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // different student groups -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.commands.ExportCommand.MESSAGE_EMAIL_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.commands.ExportCommand.MESSAGE_PHONE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void execute_exportEmail_exportSuccessful() throws CommandException, IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        CommandResult commandResult \u003d new ExportCommand(\"email\").execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // compare output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertTrue(compareOutput(\"./src/test/data/ExportTest/email.txt\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertEquals(MESSAGE_EMAIL_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void execute_exportPhone_exportSuccessful() throws CommandException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        CommandResult commandResult \u003d new ExportCommand(\"phone\").execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        // compare output"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertTrue(compareOutput(\"./src/test/data/ExportTest/phone.txt\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertEquals(MESSAGE_PHONE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void execute_invalidType_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(\"a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE), () -\u003e exportCommand.execute(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * Compares the output text at /data/hally.txt with the .txt file at the specified location."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @param compare Path of the .txt file to be compared to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @return True if both text files have the same content, false otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     * @throws IOException If file reading is interrupted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public static boolean compareOutput(String compare) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        BufferedReader reader1 \u003d new BufferedReader(new FileReader(\"./data/hally.txt\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        BufferedReader reader2 \u003d new BufferedReader(new FileReader(compare));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        String line1 \u003d reader1.readLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        String line2 \u003d reader2.readLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        boolean areEqual \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        int lineNum \u003d 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        while (line1 !\u003d null || line2 !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            if (line1 \u003d\u003d null || line2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                areEqual \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            } else if (!line1.equalsIgnoreCase(line2)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                areEqual \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            line1 \u003d reader1.readLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            line2 \u003d reader2.readLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            lineNum++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        reader1.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        reader2.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        if (areEqual) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            System.out.println(\"Two files have same content.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            System.out.println(\"Two files have different content. They differ at line \" + lineNum);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            System.out.println(\"File1 has \" + line1 + \" and File2 has \" + line2 + \" at line \" + lineNum);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.RoomInBlockPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.StudentGroupPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e firstPredicates \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                List.of(new NameContainsKeywordsPredicate(Collections.singletonList(\"first\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e secondPredicates \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                Collections.singletonList(new NameContainsKeywordsPredicate(Collections.singletonList(\"second\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e thirdPredicates \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                List.of(new NameContainsKeywordsPredicate(Collections.singletonList(\"second\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                        new RoomInBlockPredicate(new Block(\"B\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"soccer\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e fourthPredicates \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            List.of(new NameContainsKeywordsPredicate(Collections.singletonList(\"second\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                new RoomInBlockPredicate(new Block(\"C\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                new StudentGroupPredicate(studentGroupSet));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicates);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        FindCommand findFourthCommand \u003d new FindCommand(fourthPredicates);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicates);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // extra block field -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // extra block and student group field -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(findFirstCommand.equals(findFourthCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNameKeywordsPredicate(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNameKeywordsPredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void execute_block_personInBlockFound() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        RoomInBlockPredicate predicate \u003d prepareBlockPredicate(\"B\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertEquals(Arrays.asList(CARL, GEORGE), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void execute_blockAndNameKeyword_singlePersonFound() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        RoomInBlockPredicate blockPredicate \u003d prepareBlockPredicate(\"C\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNameKeywordsPredicate(\"meier\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(blockPredicate, namePredicate));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(blockPredicate.and(namePredicate));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertEquals(Arrays.asList(BENSON), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void execute_studentGroup_personWithOneStudentGroupFound() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"badminton\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        StudentGroupPredicate predicate \u003d prepareStudentGroupPredicate(studentGroupSet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void execute_studentGroup_personWithMultipleStudentGroupsFound() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"hackers\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"soccer\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        StudentGroupPredicate predicate \u003d prepareStudentGroupPredicate(studentGroupSet);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(Collections.singletonList(BENSON), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void execute_studentGroup_personNotFound() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"invalidStudentGroup\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        StudentGroupPredicate predicate \u003d prepareStudentGroupPredicate(studentGroupSet);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        FindCommand command \u003d new FindCommand(Collections.singletonList(predicate));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void execute_nameBlockStudentGroup_personFound() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNameKeywordsPredicate(\"george\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        RoomInBlockPredicate blockPredicate \u003d prepareBlockPredicate(\"B\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"basketball\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        StudentGroupPredicate studentGroupPredicate \u003d prepareStudentGroupPredicate(studentGroupSet);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e predicateList \u003d List.of(namePredicate, blockPredicate, studentGroupPredicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicateList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        expectedModel.updateFilteredPersonList(namePredicate.and(blockPredicate).and(studentGroupPredicate));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(Collections.singletonList(GEORGE), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses {@code keywords} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNameKeywordsPredicate(String keywords) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(keywords.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Parses {@code block} into a {@code RoomInBlockPredicate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private RoomInBlockPredicate prepareBlockPredicate(String block) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return new RoomInBlockPredicate(new Block(block));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses {@code Set\u003cStudentGroup\u003e} into a {@code StudentGroupPredicate}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private StudentGroupPredicate prepareStudentGroupPredicate(Set\u003cStudentGroup\u003e studentGroupSet) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new StudentGroupPredicate(studentGroupSet);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 70,
      "-": 72,
      "athuyaoo": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListGroupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalStudentGroups;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListGroupCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class ListGroupCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void execute_listGroup_showsAllStudentGroups() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        List\u003cString\u003e groupList \u003d getTypicalStudentGroups();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedGroupMessage \u003d formatStudentGroupsWithNumber(groupList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedCommandMessage \u003d ListGroupCommand.MESSAGE_SUCCESS.concat(expectedGroupMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model, expectedCommandMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static String formatStudentGroupsWithNumber(List\u003cString\u003e groupNameList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return IntStream.range(0, groupNameList.size()).boxed()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .reduce(\"\", (groupNames, index) -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                groupNames.concat(\"\\n\").concat(String.valueOf(index + 1))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    .concat(\". \").concat(groupNameList.get(index)), String::concat);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOCKROOM_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BLOCKROOM_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRICULATION_NUMBER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_GROUP_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRICULATION_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_GROUP_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_GROUP_DESC_DANCE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_BASKETBALL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withStudentGroups(VALID_STUDENT_GROUP_BASKETBALL)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // multiple student groups - all accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person expectedPersonMultipleStudentGroups \u003d new PersonBuilder(BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_BASKETBALL, VALID_STUDENT_GROUP_DANCE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + MATRICULATION_NUMBER_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                new AddCommand(expectedPersonMultipleStudentGroups));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // multiple matriculation number - last matriculation number accepted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + MATRICULATION_NUMBER_DESC_AMY + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + BLOCKROOM_DESC_BOB + STUDENT_GROUP_DESC_BASKETBALL + MATRICULATION_NUMBER_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + GENDER_DESC_AMY + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // zero student groups"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withStudentGroups().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_AMY + BLOCKROOM_DESC_AMY + GENDER_DESC_AMY + MATRICULATION_NUMBER_DESC_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + VALID_ADDRESS_BOB + MATRICULATION_NUMBER_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // missing matriculation number prefix"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + ADDRESS_DESC_BOB + VALID_MATRICULATION_NUMBER_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + ADDRESS_DESC_BOB + MATRICULATION_NUMBER_DESC_BOB + VALID_GENDER_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                + VALID_GENDER_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + VALID_MATRICULATION_NUMBER_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + MATRICULATION_NUMBER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + MATRICULATION_NUMBER_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + MATRICULATION_NUMBER_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + INVALID_ADDRESS_DESC + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_DESC_BASKETBALL + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + INVALID_GENDER"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_DESC_BASKETBALL + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // invalid student group"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "schoolex"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + INVALID_STUDENT_GROUP_DESC + VALID_STUDENT_GROUP_BASKETBALL + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + INVALID_ADDRESS_DESC + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + MATRICULATION_NUMBER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + ADDRESS_DESC_BOB + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB + STUDENT_GROUP_DESC_DANCE"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_BASKETBALL + MATRICULATION_NUMBER_DESC_BOB,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // invalid matriculation number"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + BLOCKROOM_DESC_BOB + GENDER_DESC_BOB + STUDENT_GROUP_DESC_DANCE"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_BASKETBALL"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + INVALID_MATRICULATION_NUMBER_DESC, MatriculationNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 55,
      "-": 106,
      "athuyaoo": 41,
      "schoolex": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertEquals(new FindCommand(Collections.singletonList(new NameContainsKeywordsPredicate(keywords))), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseCommand_listGroup() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(parser.parseCommand(ListGroupCommand.COMMAND_WORD) instanceof ListGroupCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(parser.parseCommand(ListGroupCommand.COMMAND_WORD + \" 3\") instanceof ListGroupCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 7,
      "-": 99,
      "athuyaoo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String argsString \u003d \"  some random string /s student group with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AssignCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_validArgs_returnsAssignCommand() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseSuccess(parser, \" 1 1\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                new AssignCommand(ParserUtil.parseIndex(\"1\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                ParserUtil.parseIndex(\"1\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_validArgsWithSpace_returnsAssignCommand() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseSuccess(parser, \"     1        1       \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                new AssignCommand(ParserUtil.parseIndex(\"1\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "                        ParserUtil.parseIndex(\"1\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_GROUP_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_GROUP_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STUDENT_GROUP_DESC_DANCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_BASKETBALL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String STUDENT_GROUP_EMPTY \u003d \" \" + PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // invalid student group"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STUDENT_GROUP_DESC, StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // while parsing {@code PREFIX_STUDENT_GROUP} alone will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // reset the student groups of the {@code Person} being edited,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // parsing it together with a valid student group results in error"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + STUDENT_GROUP_DESC_BASKETBALL + STUDENT_GROUP_DESC_DANCE + STUDENT_GROUP_EMPTY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + STUDENT_GROUP_DESC_BASKETBALL + STUDENT_GROUP_EMPTY + STUDENT_GROUP_DESC_DANCE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, \"1\" + STUDENT_GROUP_EMPTY + STUDENT_GROUP_DESC_BASKETBALL + STUDENT_GROUP_DESC_DANCE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + STUDENT_GROUP_DESC_DANCE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + STUDENT_GROUP_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE, VALID_STUDENT_GROUP_BASKETBALL).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // student groups"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STUDENT_GROUP_DESC_BASKETBALL;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withStudentGroups(VALID_STUDENT_GROUP_BASKETBALL).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_BASKETBALL + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + STUDENT_GROUP_DESC_BASKETBALL + PHONE_DESC_BOB + ADDRESS_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + EMAIL_DESC_BOB + STUDENT_GROUP_DESC_DANCE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_BASKETBALL, VALID_STUDENT_GROUP_DANCE)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parse_resetStudentGroups_success() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STUDENT_GROUP_EMPTY;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withStudentGroups().build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 32,
      "-": 183,
      "athuyaoo": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " * Test cases for export command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_validArgsEmail_returnsExportCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseSuccess(parser, \"email\", new ExportCommand(\"email\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_validArgsPhone_returnsExportCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseSuccess(parser, \"phone\", new ExportCommand(\"phone\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_validArgsCapitalizedEmail_returnsExportCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseSuccess(parser, \"EMAIL\", new ExportCommand(\"email\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    public void parse_validArgsCapitalizedPhone_returnsExportCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "        assertParseSuccess(parser, \"PHONE\", new ExportCommand(\"phone\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yanchenglee98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yanchenglee98": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOCK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_GROUP_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.RoomInBlockPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.StudentGroupPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void parse_emptyFields_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME, FindCommand.MESSAGE_EMPTY_KEYWORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertParseFailure(parser, INVALID_BLOCK, Block.getMessageConstraints());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertParseFailure(parser, INVALID_STUDENT_GROUP_DESC, StudentGroup.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        List\u003cPredicate\u003cPerson\u003e\u003e namePredicateList \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                Collections.singletonList(namePredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new FindCommand(namePredicateList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // combined block, name and student group keywords find command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroupSet.add(new StudentGroup(\"badminton\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        FindCommand expectedCombinedFindCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new FindCommand(List.of(new RoomInBlockPredicate(new Block(\"B\")), namePredicate,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                    new StudentGroupPredicate(studentGroupSet)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // test parsing of multiple fields"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" \\n Alice \\n \\t Bob  \\t\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                + \" \" + PREFIX_BLOCK + \u0027B\u0027 + \" \" + PREFIX_STUDENT_GROUP + \"badminton\", expectedCombinedFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 12,
      "-": 29,
      "athuyaoo": 33,
      "schoolex": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String INVALID_STUDENT_GROUP \u003d \"#basketball\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String VALID_STUDENT_GROUP_1 \u003d \"basketball\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String VALID_STUDENT_GROUP_2 \u003d \"dance\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroup_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStudentGroup(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroup_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStudentGroup(INVALID_STUDENT_GROUP));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroup_validValueWithoutWhitespace_returnsStudentGroup() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        StudentGroup expectedStudentGroup \u003d new StudentGroup(VALID_STUDENT_GROUP_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(expectedStudentGroup, ParserUtil.parseStudentGroup(VALID_STUDENT_GROUP_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroup_validValueWithWhitespace_returnsTrimmedStudentGroup() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String studentGroupWithWhitespace \u003d WHITESPACE + VALID_STUDENT_GROUP_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        StudentGroup expectedStudentGroup \u003d new StudentGroup(VALID_STUDENT_GROUP_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(expectedStudentGroup, ParserUtil.parseStudentGroup(studentGroupWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroups_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStudentGroups(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroups_collectionWithInvalidStudentGroups_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            ParserUtil.parseStudentGroups(Arrays.asList(VALID_STUDENT_GROUP_1, INVALID_STUDENT_GROUP)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroups_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(ParserUtil.parseStudentGroups(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void parseStudentGroups_collectionWithValidStudentGroups_returnsStudentGroupSet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e actualStudentGroupSet \u003d ParserUtil.parseStudentGroups("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            Arrays.asList(VALID_STUDENT_GROUP_1, VALID_STUDENT_GROUP_2));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e expectedStudentGroupSet \u003d new HashSet\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .asList(new StudentGroup(VALID_STUDENT_GROUP_1), new StudentGroup(VALID_STUDENT_GROUP_2)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertEquals(expectedStudentGroupSet, actualStudentGroupSet);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 28,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    //TODO: [Event] Implement test for getEventList()."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 5,
      "lowjiefeng1998": 9,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    //TODO: [Event] Implement test for getEventList()."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 2,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String DESC_WITH_CAROT \u003d \"^\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String DESC_WITH_AT \u003d \"Dinner@Hall\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String DESC_WITH_SLASH \u003d \"Hello/World.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String DESC_WITH_TRAILING_SPACES \u003d \"Hall Event!   \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String DESC_WITH_LEADING_SPACES \u003d \"   Hall Event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(\" \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // inputs with leading spaces are rejected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(DESC_WITH_LEADING_SPACES));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_validDescription_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Description(DESC_WITH_CAROT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Description(DESC_WITH_AT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Description(DESC_WITH_SLASH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new EventName(DESC_WITH_TRAILING_SPACES));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void isDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(EventName.isValidEventName(DESC_WITH_LEADING_SPACES));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Description.isValidDescription(DESC_WITH_CAROT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Description.isValidDescription(DESC_WITH_AT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Description.isValidDescription(DESC_WITH_SLASH));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(EventName.isValidEventName(DESC_WITH_TRAILING_SPACES));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "class EventDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String VALID_DATE \u003d \"01/01/2020 15:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020/01/01 15:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventDate(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_invalidEventDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(INVALID_DATE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_validEventDate_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new EventDate(VALID_DATE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void isValidEventDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventDate.isValidEventDate(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(EventDate.isValidEventDate(INVALID_DATE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(EventDate.isValidEventDate(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(EventDate.isValidEventDate(VALID_DATE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        int testHashCode \u003d new EventDate(VALID_DATE).hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(testHashCode, new EventDate(VALID_DATE).hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "class EventNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String NAME_WITH_CAROT \u003d \"^\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String NAME_WITH_AT \u003d \"Dinner@Hall\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String NAME_WITH_SLASH \u003d \"Hello/World.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String NAME_WITH_TRAILING_SPACES \u003d \"Hall Event!   \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String NAME_WITH_LEADING_SPACES \u003d \"   Hall Event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_invalidEventName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(\" \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(\"   \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // inputs with leading spaces are rejected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(NAME_WITH_LEADING_SPACES));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_validEventName_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new EventName(NAME_WITH_CAROT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new EventName(NAME_WITH_AT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new EventName(NAME_WITH_SLASH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new EventName(NAME_WITH_TRAILING_SPACES));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void isValidEventName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EventName.isValidEventName(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(EventName.isValidEventName(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(EventName.isValidEventName(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(EventName.isValidEventName(NAME_WITH_LEADING_SPACES));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(EventName.isValidEventName(NAME_WITH_CAROT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(EventName.isValidEventName(NAME_WITH_AT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(EventName.isValidEventName(NAME_WITH_SLASH));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(EventName.isValidEventName(NAME_WITH_TRAILING_SPACES));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LUNCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private EventName eventName \u003d new EventName(\"Hall dinner\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private EventDate date \u003d new EventDate(\"01/01/2020 15:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Location location \u003d new Location(\"Dining Hall\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Description description \u003d new Description(\"Have dinner together\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private HashSet\u003cPerson\u003e attendees \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_withoutAttendees() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null, date, location, description));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, null, location, description));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, date, null, description));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, date, location, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Event(eventName, date, location, description));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void constructor_withAttendees() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null, date, location, description, attendees));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, null, location, description, attendees));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, date, null, description, attendees));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, date, location, null, attendees));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(eventName, date, location, description, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Event(eventName, date, location, description, attendees));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void isSameEvent_sameEvent_returnTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event lunchCopy \u003d new EventBuilder(LUNCH).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(LUNCH.isSameEvent(lunchCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // different attendees -\u003e return true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Set\u003cPerson\u003e attendees \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedLunch \u003d new EventBuilder(LUNCH).withAttendees(attendees).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(LUNCH.isSameEvent(editedLunch));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void isSameEvent_null_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.isSameEvent(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void isSameEvent_differentEvent_returnFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedLunch \u003d new EventBuilder(LUNCH).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assert(LUNCH.isSameEvent(editedLunch)) : \"Lunch event is not the same to begin with\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withEventName(\"Postponed Lunch\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.isSameEvent(editedLunch));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withDate(\"12/12/2022 00:00\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.isSameEvent(editedLunch));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withLocation(\"Cool Spot\").build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.isSameEvent(editedLunch));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withDescription(\"Blah blah blah\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.isSameEvent(editedLunch));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void equals_sameEvent_returnTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedLunch \u003d new EventBuilder(LUNCH).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void equals_null_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void equals_differentEvent_returnFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedLunch \u003d new EventBuilder(LUNCH).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assert(LUNCH.equals(editedLunch)) : \"Lunch event was not equals to begin with\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withEventName(\"Postponed lunhc\").build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withDate(\"12/12/2030 00:00\").build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withDescription(\"Blah blah blah.\").build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withLocation(\"Far far away\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // different attendees -\u003e return false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        editedLunch \u003d new EventBuilder(LUNCH).withAttendees(attendees).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(LUNCH.equals(editedLunch));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void hashCode_sameInput() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        int testHashCode \u003d new EventBuilder(LUNCH).build().hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(testHashCode, LUNCH.hashCode());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void toString_sameInput() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        String testString \u003d \"Hall Lunch\\nEvent Date: 01/01/2020 15:00\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            + \"Location: Dining Hall\\nDescription: Eat lunch together\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        System.out.println(LUNCH.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(testString, LUNCH.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "class LocationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String LOCATION_WITH_CAROT \u003d \"^\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String LOCATION_WITH_AT \u003d \"Dining Hall@Eusoff\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String LOCATION_WITH_SLASH \u003d \"Dining Hall/Function Hall\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String LOCATION_WITH_TRAILING_SPACES \u003d \"Dining Hall!   \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String LOCATION_WITH_LEADING_SPACES \u003d \"   Dining Hall!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void constructor_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(\"  \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(\"     \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // inputs with leading spaces are rejected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(LOCATION_WITH_LEADING_SPACES));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void constructor_validLocation_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Location(LOCATION_WITH_CAROT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Location(LOCATION_WITH_AT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Location(LOCATION_WITH_SLASH));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertNotNull(new Location(LOCATION_WITH_TRAILING_SPACES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void isValidLocation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(Location.isValidLocation(\"  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(Location.isValidLocation(LOCATION_WITH_LEADING_SPACES));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Location.isValidLocation(LOCATION_WITH_CAROT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Location.isValidLocation(LOCATION_WITH_AT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Location.isValidLocation(LOCATION_WITH_SLASH));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(Location.isValidLocation(LOCATION_WITH_TRAILING_SPACES));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        int testHashCode \u003d new Location(LOCATION_WITH_SLASH).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(testHashCode, new Location(LOCATION_WITH_SLASH).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DINNER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LUNCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "class UniqueEventListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private UniqueEventList uniqueEventList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d Collections.singletonList(LUNCH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.setEvents(eventsList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void contains_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(uniqueEventList.contains(LUNCH));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(uniqueEventList.contains(DINNER));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void contains_eventWithUpdatedFields() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedLunch \u003d new EventBuilder(LUNCH).withEventName(\"Postponed Lunch\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertFalse(uniqueEventList.contains(editedLunch));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Set\u003cPerson\u003e attendees \u003d new HashSet\u003c\u003e(Collections.singletonList(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event lunchWithAttendees \u003d new EventBuilder(LUNCH).withAttendees(attendees).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(uniqueEventList.contains(lunchWithAttendees));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void add_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.add(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(DuplicateEventException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.add(LUNCH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void add_validInputs_containsNewEvent() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(LUNCH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(DINNER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.add(DINNER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expected, uniqueEventList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void remove_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.remove(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(EventNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.remove(DINNER));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.remove(LUNCH);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expected, uniqueEventList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvent_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.setEvent(null, LUNCH));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.setEvent(LUNCH, null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvent_targetNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(EventNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.setEvent(DINNER, DINNER));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvent_editedEventEqualsTarget_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.setEvent(LUNCH, LUNCH);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertTrue(uniqueEventList.contains(LUNCH));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvent_editedEventDifferentTarget_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(DINNER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.setEvent(LUNCH, DINNER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expected, uniqueEventList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvent_editedEventHasDifferentAttendees_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Set\u003cPerson\u003e attendees \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        Event editedLunch \u003d new EventBuilder(LUNCH).withAttendees(attendees).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(editedLunch);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.setEvent(LUNCH, editedLunch);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expected, uniqueEventList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvent_setsExistingEventToDuplicate_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.add(DINNER);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // attempt to introduce 2 dinners into list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(DuplicateEventException.class, () -\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.setEvent(LUNCH, DINNER));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvents_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.setEvents(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvents_uniqueList_replacesOwnList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(DINNER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d Collections.singletonList(DINNER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        uniqueEventList.setEvents(eventsList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expected, uniqueEventList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void setEvents_listWithDuplicates_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        List\u003cEvent\u003e eventsList \u003d Arrays.asList(LUNCH, DINNER, LUNCH);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(DuplicateEventException.class, () -\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.setEvents(eventsList));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "                uniqueEventList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void equals_validInput_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(LUNCH);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expected, uniqueEventList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void hashCode_sameInput() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        // expected"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        UniqueEventList expected \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        expected.add(LUNCH);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        int expectedHashCode \u003d expected.hashCode();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(expectedHashCode, uniqueEventList.hashCode());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    void iterator_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (Event e : uniqueEventList) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 212
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BlockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "schoolex"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": "public class BlockTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Block(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void constructor_invalidBlock_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        String invalidBlock \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Block(invalidBlock));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void isValidBlock() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // null block"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Block.isValidBlock(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // blank block"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // incorrect length"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"ABCDE\")); // incorrect length"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"FFED\")); // incorrect length"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"AA\")); // incorrect length"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // not an alphabet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"4\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"5\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"9\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"-\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"+\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"A \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"B \")); // trailing space"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Block.isValidBlock(\"C \")); // trailing space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // valid block"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Block.isValidBlock(\"A\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Block.isValidBlock(\"B\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Block.isValidBlock(\"C\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Block.isValidBlock(\"D\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "schoolex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "schoolex": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatriculationNumberMatchPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "public class MatriculationNumberMatchPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumber firstMatriculationNumber \u003d new MatriculationNumber(VALID_MATRICULATION_NUMBER_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumber secondMatriculationNumber \u003d new MatriculationNumber(VALID_MATRICULATION_NUMBER_BOB);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumberMatchPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new MatriculationNumberMatchPredicate(firstMatriculationNumber);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumberMatchPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new MatriculationNumberMatchPredicate(secondMatriculationNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumberMatchPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new MatriculationNumberMatchPredicate(firstMatriculationNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void test_matriculationNumber_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // same matriculation number -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        MatriculationNumberMatchPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new MatriculationNumberMatchPredicate(new MatriculationNumber(VALID_MATRICULATION_NUMBER_AMY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertTrue(predicate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                .test(new PersonBuilder().withMatriculationNumber(VALID_MATRICULATION_NUMBER_AMY).build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        // different matriculation number -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        predicate \u003d new MatriculationNumberMatchPredicate(new MatriculationNumber(VALID_MATRICULATION_NUMBER_BOB));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertFalse(predicate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                .test(new PersonBuilder().withMatriculationNumber(VALID_MATRICULATION_NUMBER_AMY).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "athuyaoo": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatriculationNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class MatriculationNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MatriculationNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void constructor_invalidMatriculationNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String invalidMatriculationNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MatriculationNumber(invalidMatriculationNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void isValidMatriculationNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // null matriculation number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MatriculationNumber.isValidMatriculationNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // blank matriculation number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // incomplete matriculation number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A0123\")); // incomplete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A0123456\")); // incomplete"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A012345B\")); // incomplete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // invalid matriculation number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"a0123456B\")); // start with \u0027a\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"B0123456B\")); // start with \u0027B\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"0123456BA\")); // start with a number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A0123456b\")); // end with \u0027b\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A01234567\")); // end with a number"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // contain alphabetic character in the middle"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A012E456B\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // contain special symbol in the middle"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A_______B\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\" A0123456B\")); // leading space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertFalse(MatriculationNumber.isValidMatriculationNumber(\"A0123456B \")); // trailing space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // valid matriculation number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatriculationNumber(\"A0111111A\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatriculationNumber(\"A0222222B\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatriculationNumber(\"A0333333C\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertTrue(MatriculationNumber.isValidMatriculationNumber(\"A0444444Z\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getStudentGroups().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // different phone, email and matriculation number -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withMatriculationNumber(VALID_MATRICULATION_NUMBER_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // different student groups -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withStudentGroups(VALID_STUDENT_GROUP_DANCE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // different matriculation number -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withMatriculationNumber(VALID_MATRICULATION_NUMBER_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 16,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "schoolex"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": "public class RoomTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Room(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void constructor_invalidRoom_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        String invalidRoom \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Room(invalidRoom));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public void isValidRoom() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // null Room"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Room.isValidRoom(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // blank Room"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // incorrect length"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"1234\")); // incorrect length"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"54000\")); // incorrect length"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"10\")); // incorrect length"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // contains invalid characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"4b2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"50b\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"90a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"---\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"+z/\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"405 \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"320 \")); // trailing space"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"105 \")); // trailing space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // room number 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"400\")); // Room number 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"200\")); // Room number 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertFalse(Room.isValidRoom(\"100\")); // Room number 0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        // valid Room"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Room.isValidRoom(\"405\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Room.isValidRoom(\"120\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Room.isValidRoom(\"301\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertTrue(Room.isValidRoom(\"212\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "schoolex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "schoolex": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .withStudentGroups(VALID_STUDENT_GROUP_DANCE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 5,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/studentgroup/StudentGroupTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "package seedu.address.model.studentgroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "public class StudentGroupTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StudentGroup(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void constructor_invalidStudentGroupName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String invalidStudentGroupName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StudentGroup(invalidStudentGroupName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void isValidStudentGroupName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        // null student group name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StudentGroup.isValidStudentGroupName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 9,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/BlockSettingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class BlockSettingTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final String BLOCK_A_NAME \u003d \"A\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static final String BLOCK_A_FLOORS \u003d \"Floors : 1 to 4\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static final String BLOCK_A_ROOMS \u003d \"Rooms : 101 to 420\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private static final BlockSetting BLOCK_A \u003d new BlockSetting(BLOCK_A_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void blockSetting_equalBlockSetting() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        BlockSetting blockA \u003d new BlockSetting(BLOCK_A_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(blockA, BLOCK_A);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void blockSetting_constructor_correctBlockName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        BlockSetting blockA \u003d new BlockSetting(BLOCK_A_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        assertEquals(BLOCK_A_NAME, blockA.getBlockName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public void blockSetting_getLevels_correctRoomRangeString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        BlockSetting blockA \u003d new BlockSetting(BLOCK_A_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertEquals(BLOCK_A_ROOMS, blockA.getRooms());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        assertEquals(BLOCK_A_FLOORS, blockA.getFloors());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 28,
      "schoolex": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"A\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String INVALID_MATRICULATION_NUMBER \u003d \"a0123456B\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String INVALID_STUDENT_GROUP \u003d \"#basketball\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private static final String VALID_GENDER \u003d \"M\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final List\u003cJsonAdaptedStudentGroup\u003e VALID_STUDENT_GROUPS \u003d BENSON.getStudentGroups().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .map(JsonAdaptedStudentGroup::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static final String VALID_BLOCK \u003d BENSON.getBlock().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private static final String VALID_MATRICULATION_NUMBER \u003d BENSON.getMatriculationNumber().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        System.out.println(VALID_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        VALID_GENDER, VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_GENDER,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                INVALID_GENDER, VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        null, VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void toModelType_invalidStudentGroups_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        List\u003cJsonAdaptedStudentGroup\u003e invalidStudentGroups \u003d new ArrayList\u003c\u003e(VALID_STUDENT_GROUPS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        invalidStudentGroups.add(new JsonAdaptedStudentGroup(INVALID_STUDENT_GROUP));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        invalidStudentGroups, VALID_BLOCK, VALID_ROOM, VALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void toModelType_invalidMatriculationNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, INVALID_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedMessage \u003d MatriculationNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public void toModelType_nullMatriculationNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                VALID_GENDER, VALID_STUDENT_GROUPS, VALID_BLOCK, VALID_ROOM, null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatriculationNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 36,
      "-": 95,
      "athuyaoo": 29,
      "schoolex": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        descriptor.setStudentGroups(person.getStudentGroups());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        descriptor.setMatriculationNumber(person.getMatriculationNumber());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses the {@code studentGroups} into a {@code Set\u003cStudentGroup\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public EditPersonDescriptorBuilder withStudentGroups(String... studentGroups) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cStudentGroup\u003e studentGroupSet \u003d Stream.of(studentGroups).map(StudentGroup::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        descriptor.setStudentGroups(studentGroupSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Sets the {@code MatriculationNumber} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public EditPersonDescriptorBuilder withMatriculationNumber(String matriculationNumber) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        descriptor.setMatriculationNumber(new MatriculationNumber(matriculationNumber));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 13,
      "-": 85,
      "athuyaoo": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Hall Event X\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"27/10/2020 15:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Dining Hall\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"The Xth event of the Hall\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Set\u003cPerson\u003e DEFAULT_ATTENDEES \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private EventDate eventDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    private Set\u003cPerson\u003e attendees;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Creates a {@code EventBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        eventDate \u003d new EventDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        attendees \u003d Set.copyOf(DEFAULT_ATTENDEES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder(Event event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        eventName \u003d event.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        eventDate \u003d event.getEventDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        location \u003d event.getLocation();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        description \u003d event.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        attendees \u003d Set.copyOf(event.getAttendeesList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Sets the {@code eventName} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder withEventName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventName \u003d new EventName(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Sets the {@code eventDate} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.eventDate \u003d new EventDate(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Sets the {@code location} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Sets the {@code description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Set the {@code attendees} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public EventBuilder withAttendees(Set\u003cPerson\u003e attendees) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        this.attendees \u003d Set.copyOf(attendees);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     * Converts the current {@code EventBuilder} to an actual {@code Event}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new Event(eventName, eventDate, location, description, attendees);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Block;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.person.MatriculationNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String DEFAULT_BLOCK \u003d \"A\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public static final String DEFAULT_ROOM \u003d \"420\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static final String DEFAULT_MATRICULATION_NUMBER \u003d \"A0123456A\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private Set\u003cStudentGroup\u003e studentGroups;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private Block block;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    private Room room;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    private MatriculationNumber matriculationNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroups \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        block \u003d new Block(DEFAULT_BLOCK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        room \u003d new Room(DEFAULT_ROOM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        matriculationNumber \u003d new MatriculationNumber(DEFAULT_MATRICULATION_NUMBER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        studentGroups \u003d new HashSet\u003c\u003e(personToCopy.getStudentGroups());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        block \u003d personToCopy.getBlock();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        room \u003d personToCopy.getRoom();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        matriculationNumber \u003d personToCopy.getMatriculationNumber();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Parses the {@code studentGroups} into a {@code Set\u003cStudentGroup\u003e} and"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public PersonBuilder withStudentGroups(String ... studentGroups) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        this.studentGroups \u003d SampleDataUtil.getStudentGroupSet(studentGroups);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Sets the {@code Block} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public PersonBuilder withBlock(String block) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.block \u003d new Block(block);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "schoolex"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     * Sets the {@code Room} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "schoolex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    public PersonBuilder withRoom(String room) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        this.room \u003d new Room(room);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "schoolex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Sets the {@code gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return new Person(name, phone, email, address, gender, studentGroups, block, room, matriculationNumber);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     * Sets the {@code MatriculationNumber} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    public PersonBuilder withMatriculationNumber(String matriculationNumber) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        this.matriculationNumber \u003d new MatriculationNumber(matriculationNumber);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 19,
      "-": 88,
      "athuyaoo": 16,
      "schoolex": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOCKROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_GROUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "schoolex"
        },
        "content": "        sb.append(PREFIX_BLOCKROOM + person.getBlock().value + person.getRoom().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().type.getOption() + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        person.getStudentGroups().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            s -\u003e sb.append(PREFIX_STUDENT_GROUP + s.studentGroupName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        sb.append(PREFIX_MATRICULATION_NUMBER + person.getMatriculationNumber().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.type).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        descriptor.getMatriculationNumber()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                .ifPresent(matriculationNumber -\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                        sb.append(PREFIX_MATRICULATION_NUMBER).append(matriculationNumber.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        if (descriptor.getStudentGroups().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            Set\u003cStudentGroup\u003e studentGroups \u003d descriptor.getStudentGroups().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            if (studentGroups.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                sb.append(PREFIX_STUDENT_GROUP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                studentGroups.forEach(s -\u003e sb.append(PREFIX_STUDENT_GROUP).append(s.studentGroupName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 14,
      "-": 53,
      "athuyaoo": 3,
      "schoolex": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Event LUNCH \u003d new EventBuilder().withEventName(\"Hall Lunch\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            .withDescription(\"Eat lunch together\").withLocation(\"Dining Hall\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            .withDate(\"01/01/2020 15:00\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static final Event DINNER \u003d new EventBuilder().withEventName(\"Hall Dinner\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            .withDescription(\"Eat dinner together\").withLocation(\"Dining Hall\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            .withDate(\"01/02/2020 15:00\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LUNCH));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiefeng1998": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRICULATION_NUMBER_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "schoolex"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_BASKETBALL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STUDENT_GROUP_DANCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEvents;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "import seedu.address.model.studentgroup.StudentGroup;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withPhone(\"94351253\").withGender(\"F\").withMatriculationNumber(\"A0123456B\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withBlock(\"A\").withRoom(\"420\").withStudentGroups(\"badminton\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withGender(\"M\").withMatriculationNumber(\"A0123456C\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withBlock(\"C\").withRoom(\"420\").withStudentGroups(\"hackers\", \"soccer\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withBlock(\"B\").withRoom(\"420\").withGender(\"M\").withMatriculationNumber(\"A0123456D\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withGender(\"M\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withBlock(\"A\").withRoom(\"420\").withMatriculationNumber(\"A0123456E\").withStudentGroups(\"dance\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withBlock(\"D\").withRoom(\"420\").withGender(\"F\").withMatriculationNumber(\"A0123456F\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withBlock(\"C\").withRoom(\"420\").withMatriculationNumber(\"A0123456G\").withGender(\"F\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withStudentGroups(\"badminton\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withBlock(\"B\").withRoom(\"420\").withMatriculationNumber(\"A0123456H\").withGender(\"M\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withStudentGroups(\"basketball\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withMatriculationNumber(\"A0123456I\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            .withBlock(\"A\").withRoom(\"420\").withGender(\"M\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withMatriculationNumber(\"A0123456J\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            .withBlock(\"A\").withRoom(\"420\").withGender(\"F\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withStudentGroups(VALID_STUDENT_GROUP_BASKETBALL)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "schoolex"
        },
        "content": "            .withGender(VALID_GENDER_AMY).withBlock(VALID_BLOCK).withRoom(VALID_ROOM)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withMatriculationNumber(VALID_MATRICULATION_NUMBER_AMY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            .withStudentGroups(VALID_STUDENT_GROUP_DANCE, VALID_STUDENT_GROUP_BASKETBALL).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "athuyaoo"
        },
        "content": "            .withMatriculationNumber(VALID_MATRICULATION_NUMBER_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     * Returns an {@code List\u003cStudentGroup\u003e} with all the student groups."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    public static List\u003cString\u003e getTypicalStudentGroups() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        Set\u003cString\u003e studentGroupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            for (StudentGroup studentGroup : person.getStudentGroups()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "                studentGroupSet.add(studentGroup.studentGroupName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "        return studentGroupSet.stream().sorted().collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teekoksiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiefeng1998"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teekoksiang": 28,
      "lowjiefeng1998": 6,
      "-": 61,
      "athuyaoo": 19,
      "schoolex": 5
    }
  }
]
