[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* The KanBug Tracker is a **desktop application for managing the tracking of bugs you encounter, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). \u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * management of bugs encountered during a self-initiated project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * documenting the bug fixing process by being able to add descriptions to and modifying the status of different bugs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* The project was built using software engineering best practices that governed how the code was written and how the project was managed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * It is **written in OOP fashion**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * Project was managed using a **forking workflow**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* It is named `KanBug Tracker` because the product makes use of the concept of a **Kanban board**, an agile project management tool, for the visualisation of different bugs the user encounters."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* For the detailed documentation of this project, see the **[KanBug Tracker Product Website](https://ay2021s1-cs2103t-w17-1.github.io/tp/)**."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Team Name: AY2021S1-CS2103T-W17-1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 13,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    archiveName \u003d \u0027KanBugTracker.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "run {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "the-reefshark": 1,
      "-": 70,
      "Rogerlys": 5
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg). This project is  our module project for CS2103T, Software Engineering."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You can reach us at the state `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### Kishen Ashok Kumar"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003cimg src\u003d\"images/kishenkumarrrrr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[[github](https://github.com/KishenKumarrrrr)] [[portfolio](team/kishenkumarrrrr.md)] [[Linkedin](https://www.linkedin.com/in/kishen-ashok-kumar-75b0a1190/)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* Roles: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "### Rishabh Paliwal"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u003cimg src\u003d\"images/the-reefshark.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "[[github](https://github.com/the-reefshark)] [[portfolio](team/the-reefshark.md)] [[Linkedin](https://www.linkedin.com/in/rishabh-paliwal-44b865190/)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "### Tran Gia Phong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003cimg src\u003d\"images/phongtran98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "[[github](https://github.com/PhongTran98)] [[portfolio](team/phongtran98.md)] [[Linkedin](https://www.linkedin.com/in/gia-phong-tran-1b30b519b/)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* Responsibilities: Testing + Integration"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "### Nguyen Khanh Duy"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cimg src\u003d\"images/duynguyen24501.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "[[github](http://github.com/duynguyen24501)] [[portfolio](team/duynguyen24501.md)] [[Linkedin](https://www.linkedin.com/in/nguyen-khanh-duy-25a595121/)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* Responsibilities: Scheduling and Tracking"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "### Roger Lim"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cimg src\u003d\"images/rogerlys.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[[github](https://github.com/rogerlys)] [[portfolio](team/rogerlys.md)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "* Role: Code Quality"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 6,
      "the-reefshark": 4,
      "PhongTran98": 4,
      "duynguyen24501": 4,
      "-": 32,
      "Rogerlys": 5
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/description/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "-": 78
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* At shut down: Shuts down the components and invokes clean-up methods where necessary."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "1. `Logic` uses the `KanBugTrackerParser` class to parse the user command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a bug)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: Note: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* stores the KanBug Tracker data."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBug\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: Note: An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `KanBugTracker`, which `Bug` references. This allows `KanBugTracker` to only require one `Tag` object per unique `Tag`, instead of each `Bug` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W17-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* can save the KanBug Tracker data in json format and read it back."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### Edit Tag feature"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The edit tag feature is facilitated by `EditTagCommandParser`, `EditTagCommand` and `EditTagByStateCommand`.  The class structure of the implementation is given below."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![EditTagClassStructure](images/EditTagClassStructure.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "### FeatureUI kanban view window"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "The kanban view window would comprise of 4 columns that would divide the list of bug by their states. This would be implemented by putting 4 BugListPane in a horizontal box. The 4 BugListPanes would be constructed using a Observerable list that contains only the bugs that belong to their respective state. This observerable list would be provided by the logic manager. These 4 BugListPanes would be filled when the method fillInnerParts() is called by MainWindow."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cimg src\u003d\"images/Ui.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Given below is how the KanbanBoard window will create the 4 BugListpanes"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Step 1:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "The user lanches the app and the system initalises the UI."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "MainWindow calls fillInnerParts() on KanbanBoard."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "For each of the 4 states, KanbanBoard would call getFilteredBugListByState on logic manager to get the appropriate lists and create the BugListPane."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Given below is sequence diagram for the creation of the BugListPanes:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cimg src\u003d \"images/KanbanBoardUI.png\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "With the implementation of kanban view window, command such as delete, move and edit that depend on the index would not work as expected. This is because, the Kanban view seperates the bugs and place then in different columns. As such, it would be essential to allow the users to execute these commands in the kanban view as we implement the new window. This can be done by allowing the user to chose which column would be affected by these commands."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "This can be done by adding the following classes:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- `DeleteByStateCommand` which extends `DeleteCommand`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- `MoveBystateCommand` which extends `MoveCommand`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- `EditByStateCommand` which extends `EditCommand`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "These command would take in an extra input to specify which column is being targeted. The list of bugs would then be filtered according to the column specified. The respective parsers would also have to be modified such that the new command could be returned if a column is specifed. The following activity diagram summerizes what happens when the user enters a delete command.(edit and move command parser would act in a similar way)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cimg src \u003d \"images/DeleteCommandParserActivityDiagram.png\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- **Alternative 1**: Use a prefix \"/c\" to specify which column we are refering to.(Current choice)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    - Pros: Easier to implement"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    - Cons: Adds an additional prefix which the user has to remember to the applicatiom"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- **Alternative 2**: Allow the users to specify an active column and execute the commands with respect to that column"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    - Cons: Need to add an additional command to change the active column."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "`EditTagCommand` extends `Command` and uses **editTag** as its `COMMAND_WORD`  and makes use of the **ot/** and **nt/** prefixes."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The operations that each class implements is given below:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "`EditTagCommandParser`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `EditTagCommandParser#parse(String)`— Parses input "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "`EditTagCommand`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `EditTagCommand#execute(Model)`  —  Executes the command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `EditTagCommand#updateTagInBug(Bug, Tag, Tag)` — Replaces the old Tag in Bug with the new Tag."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Usages"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "There are two possible usages of this feature, depending on whether the user is in the **Kanban view** or **List view**. "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Given below is an example usage scenario in **Kanban View** and how the edit tag feature behaves at each step."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Step 1. The user launches the application for the first time. The `KanBugTracker` will be initialized with the initial KanBug tracker state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Step 2. The user executes `add n/Print bug d/prints the wrong message s/todo t/Ui` command to add a new bug to the KanBug tracker. A new bug with the following information is added:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- name: **Print bug**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- description: **prints the wrong message**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- state: **todo**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- tag: **Ui**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "This bug is added as the 6th bug in the KanBug tracker."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Note that the index 6 is for illustration purposes only**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Step 3. The user decides that the tag they added is incorrect and would like to modify it. The user executes `editTag 6 c/todo ot/Ui nt/display`. This will result in the tag of the bug at index **6** of the **todo** column being modified such that the new tag is **display** instead of **Ui**."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The updated bug is as follows:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- name: **Print bug**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- description: **prints the wrong message**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- state: **todo**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- tag: **display**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The following sequence diagram shows how the edit tag operation works in **Kanban view**:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![EditTagByStateKanBan](images/EditTagByStateSequenceDiagram.png)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "ℹ️ **Note:** The lifeline for `EditTagCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The usage scenario in **List view** is similar to that of **Kanban view** except that the user does not supply a **column** as input. An example of such a command would be `editTag 6 ot/Ui nt/display`. Instead of an `EditTagByStateCommand` , an `EditTagCommand` is returned by `EditTagCommandParser`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The following sequence diagram shows how the edit tag operation works in **List view**:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![EditTagByStateKanBan](images/EditTagSequence.png)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "ℹ️ **Note:** The lifeline for `EditTagCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### Add tag feature"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The add tag feature is facilitated by `AddTagCommandParser`, `AddTagCommand` and `AddTagByStateCommand`.  The class structure of the implementation is given below."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![AddTagClassStructure](images/AddTagClassStructure.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "`AddTagCommand` extends `Command` and uses **addTag** as its `COMMAND_WORD`  and makes use of the **nt/** prefix."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The operations that each class implements is given below:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "`AddTagCommandParser`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `AddTagCommandParser#parse(String)`— Parses input "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "`AddTagCommand`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `AddTagCommand#execute(Model)`  —  Executes the command."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `AddTagCommand#updateTagInBug(Bug, Tag)` — Adds the new Tag to the Bug."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Usages"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "There are two possible usages of this feature, depending on whether the user is in the **Kanban view** or **List view**. "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Given below is an example usage scenario in **Kanban View** and how the edit tag feature behaves at each step."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Step 1. The user launches the application for the first time. The `KanBugTracker` will be initialized with the initial KanBug tracker state."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Step 2. The user executes `add n/Print bug d/prints the wrong message s/todo t/Ui` command to add a new bug to the KanBug tracker. A new bug with the following information is added:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- name: **Print bug**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- description: **prints the wrong message**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- state: **todo**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- tag: **Ui**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "This bug is added as the 6th bug in the KanBug tracker."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Note that the index 6 is for illustration purposes only**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Step 3. The user decides that they would like to add an additional tag to the bug. The user executes `addTag 6 c/todo nt/wrongPrinting`. This will result in a new tag **wrongPrinting** being added to the bug at index **6** of the **todo** column."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The updated bug is as follows:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- name: **Print bug**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- description: **prints the wrong message**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- state: **todo**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- tag: **Ui**, **wrongPrinting**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The following sequence diagram shows how the edit tag operation works in **Kanban view**:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![AddTagByStateKanBan](images/AddTagByStateSequenceDiagram.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "ℹ️ **Note:** The lifeline for `AddTagCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The usage scenario in **List view** is similar to that of **Kanban view** except that the user does not supply a **column** as input. An example of such a command would be `addTag 6 nt/display`. Instead of an `AddTagByStateCommand` , an `AddTagCommand` is returned by `AddTagCommandParser`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The following sequence diagram shows how the edit tag operation works in **List view**:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![AddTagKanBan](images/AddTagSequenceDiagram.png)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "ℹ️ **Note:** The lifeline for `AddTagCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "### Bug priority"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Feature description: Each bug will now have a priority level (low, medium, high) that will be shown on the GUI. Users"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "can add or edit a bug with the priority using the `pr/` tag. The priority is optional, but each bug must have at most"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "one priority only."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "The followings are notable differences between `Priority` and other fields of `Bug`:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- The `VALIDATION_REGEX` of `PRIORITY` will be set such that its constructor can only accept the `String` `\"low\"`, "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "`\"medium\"`, `\"higher\"` (either uppercase or lowercase)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- Aside from the 3 possible states of `Priority` (`\"low\"`, `\"medium\"` or `\"high\"`), it will also have the state `\"\"` "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "that represent when the bug have no priority indicated. This type of `Priority` will be create using an overload "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "version of the constructor that accept no argument: `new Priority(\"low\")` will create a low priority, but "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "`new Priority()` will create an \"empty\" priority. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- We will check if the `Priority` is \"empty\" before showing it on the UI."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: Note: This is to simplified the code so that every instance of `Bug` is mandatory and also avoid using `null` (which could cause `NullPointerException` and break the app) at the same time."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Here is a diagram show how an AddCommandParser work with priority:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "![Priority](images/PrioritySequenceDiagram.png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Given below is an example usage scenario concerning only the bug\u0027s priority when the user add a new"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "bug:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Step 1. The user launches the application for the first time. The `KanBugTracker` will be initialized with the initial Kanbug Tracker state."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Step 2. The user execute the command \"add n/Bug name d/Bug description pr/high\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Step 3. Through `LogicManager` and `KanBugTrackerParser`, an `AddCommandParser` will eventually have to parse `\"n/Bug name d/Bug description pr/high\"`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Step 4. The process will continue as shown below, after which an `AddCommand` object will be returned and executed:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "![PriorityExample](images/PriorityExampleSequenceDiagram.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Regarding the Priority class:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- **Alternative 1**: Create `Priority` as a separate class [current implementation]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Pros: Adhere OOP principles"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Cons: Need to refactor quite a lot in many different places."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- **Alternative 2**: Create `Priority` as a subclass of `Tag` [rejected]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Cons: Break the Liskov Substitution Principle."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Regarding the situation when the bug\u0027s priority is not indicated:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- **Alternative 1**: Create a special type called \"empty\" Priority [current implementation]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Pros: Implementation will be similar to other existing fields."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Cons: Need to make sure that this special type will not be shown to users."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- **Alternative 2**: Use `Optional` [rejected]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Pros: Use imperative programming style, code look neater."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Cons: Harder to implement correctly."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- **Alternative 3**: Use `null` [rejected]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Pros: Easiest to implement."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    - Cons: Risky because of possible `NullPointerException`, also code will look complicated because of the need to check whether the object is `null`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "### Search feature"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "The proposed search command is facilitated by `ModelManager`. It generates a filtered list (updated by a specified `Predicate\u003cBug\u003e` as an argument), stored internally as `FilteredList\u003cBug\u003e`. It should have its own class named `SearchCommand` and inherits from the abstract class `Command`. The command then returns an instance of `CommandResult` upon success and prints feedback to the users."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Additionally, it implements the following operations:  "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* `SearchCommand#execute()` - Executes the search command.  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* `ModelManager#updateFilteredBugList(Predicate\u003cBug\u003e)` - Filters internal data storage via its argument `Predicate\u003cBug\u003e`   "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Given below is an example usage scenario and how the search feature behaves at each step.  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 1. The user launches the application for the first time. The `KanBugTracker` will be initialized with the initial kanbug tracker state.  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 2. The user executes `add n/Ui bug d/Displays wrongly the information s/todo t/Ui.java` command to add a new bug to the kanbug tracker. A new bug with the following information is added:  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- name: **Ui bug**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- description: **Displays wrongly the information**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- state: **todo**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- tag: **Ui.java**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 3. When there are a lot of bugs in the tracker, it is difficult for the user to look for the particular bug. The user wants to see the information of the above bug. Then, the user executes `search q/Ui bug`. This `search` command checks if the input is valid and then parses before using it to create a Predicate\u003cBug\u003e instance (`BugContainsQueryStringPredicate` in detail). The predicate is internally passed and used to filter `FilteredList\u003cBug\u003e`. "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "This results in the information of all the bugs of which name or description or tag contains `Ui bug` as a substring displays in the tracker."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "![SearchCommandStructure](images/SearchCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: Note: The query-string given by the user cannot be empty and is case-insensitive."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "**Alternative 1 (current choice)**: Use `q/` new prefix as a query-string to search"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- Pro: Flexible search"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- Con: Might be a long list of relevant bugs"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "**Alternative 2**: Use current field prefixes to search"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- Pro: When the user remembers exactly information of a particular field"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- Con: Restricted search"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "### Note feature"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "The proposed notes feature is facilitated by `Bug`, `AddCommandParser` and `EditCommandParser`. It adds a new `Note` state that can be parsed by the `AddCommandParser` and `EditCommandParser` and stored internally as an `Optional\u003cNote\u003e` object inside `Bug`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "The added operations by `Note` are internal operations that are handled by the `AddCommandParser` and `EditCommandParser` and as a result their functionality is not required elsewhere."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Given below is an example usage scenario and how the `Note` mechanism behaves at each step when used with `AddCommandParser` and `EditCommandParser`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 1: The user launches the application and executes the add command and provides a `Note` input using the `nt/` prefix. The `AddCommandParser` then executes and splits the input String into its respective components asccording to the given prefix."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 2: The `AddCommandParser` then wraps the string following the `nt/` prefix in an `Optional\u003cNote\u003e` object which is then stored inside the new `Bug` that has been created."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the add command:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cimg src\u003d\"images/NoteAddActivityDiagram.png\" width\u003d\"350\"\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `nt/` command is not followed by a String, it will result in a message to the user that their input should not be blank."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 3: The user then decides to change the `Note` in the bug that he has just added using the `edit` commmand accompanied with the `nt/` prefix. The `EditCommandParser` then executes and splits the input String into its respective components according to the given prefix."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Step 4: The `EditCommandParser` then copies the unchanged information from the original `Bug` into a new `Bug` while modifying the `Note` section by wrapping the given input String into an `Optional\u003cNote\u003e` object and storing it in the new `Bug` that has been created. This new `Bug` object then replace the original object in the KanBug Tracker."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the edit command:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cimg src\u003d\"images/NoteEditActivityDiagram.png\" width\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "##### Aspect: How notes are stored and accessed"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Alternative 1 (current choice):** Saves the Note inside an Optional\u003cNote\u003e object in Bug."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  * Pros: Prevents a null pointer exception and is a safer implementation while allowing the notes field to be optional"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  * Cons: Difficult to implement"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Alternative 2:** Saves the Note directly in Bug"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  * Cons: Will run into null pointer exceptions that are hard to trace if the user chooses not to add notes"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* Has a need to manage a significant number of bugs"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "**Value proposition**: Providing a command line interface for software engineering students to manage and track the bug fixing process faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "| `* * *`  | user                                       | add a new bug              |                                                                        |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "| `* * *`  | user                                       | delete a bug                | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "| `* * *`  | user                                       | add notes to specific bugs   | quickly remeber details about the bug|"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "| `* * *`  | user                                       | keep track of the number of issues | keep track of the number of issues in my code|"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "| `* * *`  | user                                       | see all the bugs             | Know what are the bugs in my program|"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "(For all use cases below, the **System** is the `Kanbug Tracker` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Use case: Delete a bug**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1.  User requests to list bugs"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2.  Kanbug Tracker shows the list of bug"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "3.  User requests to delete a specific bug in the list"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "4.  Kanbug Tracker deletes the bug"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * 3a1. Kanbug Tracker shows an error message."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "**Use case: Add a bug**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. User requests to add bug"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2. KanBug Tracker adds the new bug and displays the updated list of bugs"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   to the user"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 1a. The bug format is invalid"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - 1a1. Kanbug Tracker shows an error message."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Use case: Edit a bug**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. User requests to list bugs"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2. KanBug Tracker shows the list of bugs"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "3. User requests to edit a specific bug in the list"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "4. KanBug Tracker edits the bug"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - 3a1. KanBug Tracker shows an error message."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    Use case resumes at 2."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 3b. The user enters an invalid edit format"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - 3b1. KanBug Tracker shows an error message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    Use case resumes at 2."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Use case: Move a bug**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. User requests to list bugs"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2. KanBug Tracker shows the list of bugs"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "3. User requests to move a specific bug to another state"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "4. KanBug Tracker moves the bug"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - 3a1. KanBug Tracker shows an error message."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    Use case resumes at 2."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- 3b. The user enters an invalid edit format."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - 3b1. KanBug Tracker shows an error message."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    Use case resumes at 2."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Private bug fixing progress detail**: A bug fixing progress detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: Note: These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "### Deleting a bug"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "1. Deleting a bug while all bugs are being shown"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "   1. Prerequisites: List all bugs using the `list` command. Multiple bugs in the list."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "      Expected: First bug is deleted from the list. Details of the deleted bug shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "      Expected: No bug is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 203,
      "the-reefshark": 43,
      "PhongTran98": 44,
      "duynguyen24501": 63,
      "-": 250,
      "Rogerlys": 36
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   1. Run the `seedu.description.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   e.g. `seedu.description.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   e.g. `seedu.description.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   e.g. `seedu.description.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W17-1/tP/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W17-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## What is KanBug Tracker?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBug Tracker is a **desktop application for managing the tracking of bugs you encounter, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, KanBug Tracker can get your bug management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## Who is this application for?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBug Tracker was made to provide a lightweight, offline application for CS2103/T students to manage the bug details of their projects. Users interact with the application entirely through a CLI which makes the application perfect for fast typists. If you are looking for an offline, lightweight and easy-to-use application for your bug tracking needs, KanBug Tracker is the application for you!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## What can users expect?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBug Tracker provides two different views that the user can switch between. The first is the traditional Kanban board style view which aims to allow users to get a high-level overview of the state of bugs in their project. The second view is the To-Do list view which allows users to focus only on the bugs within a particular section of the KanBug Tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Kanban View:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![Ui](images/Ui3.png)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. Command Line Interface for users to enter their commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2. Display that the application uses to give feedback on commands to the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "3. Each individual bug will be displayed with the following data listed in order of display from top to bottom:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    - Name of bug"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - Priority of bug"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    - Short description of bug"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    - Relevant tags"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "4. Four of pre-declared states that KanBug Tracker comes with. Each bug will be assigned to one of the four states to aid users in tracking the life cycle of each bug."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### List View:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "![Ui](images/Ui4.png)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "1. Command Line Interface for users to enter their commands"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "2. Display that the application uses to give feedback on commands to the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "3. Scroll bar to navigate up and down the bug list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "4. Each individual bug will be displayed with the following data listed in order of display from top to bottom and left to right:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - Name of bug"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - Priority of bug"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - State of bug"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - Short description of bug"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - Relevant tags"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    - Note containing extra information about the bug"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## Table Of Contents"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "The first step in every journey is the preparation, after that when we have you all set up we will take you through some key points to aid you on your journey through our user guide. After which we will show you everything that you can do with this powerful tracker before we end off with some commands that will help you keep your bugs in order. Thank you for choosing KanBug Tracker!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. [Getting Started](#1-getting-started)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2. [Glossary](#2-glossary)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   2.1 [What is a bug?](#21-what-is-a-bug)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   2.2 [What are commands?](#22-what-are-commands)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "3. [Features](#3-features)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.1 [Switching Views : **`switch`**](#31-switching-views--switch)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.2 [Viewing help : **`help`**](#32-viewing-help--help)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.3 [Listing all bugs : **`list`**](#33-listing-all-bugs--list)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.4 [Searching for bugs: **`search`**](#34-searching-for-bugs--search)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.5 [Adding a bug : **`add`**](#35-adding-a-bug--add)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.6 [Deleting a bug : **`delete`**](#36-deleting-a-bug--delete)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.7 [Editing a bug : **`edit`**](#37-editing-a-bug--edit)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.8 [Editing a tag of a bug: **`editTag`**](#38-editing-a-tag-of-a-bug--edittag)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.9 [Adding a tag to a bug : **`addTag`**](#39-adding-a-tag-to-a-bug--addtag)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.10 [Moving a bug : **`move`**](#310-moving-a-bug--move)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.11 [Clearing all bugs: **`clear`**](#311-clearing-all-bugs--clear)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.12 [Exiting the program :  **`exit`**](#312-exiting-the-program--exit)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   3.13 [Saving the data](#313-saving-the-data--automatically)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "4. [Command Summary](#4-command-summary)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "------"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## 1. Getting Started"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. Ensure that you have `Java 11` or above installed on your computer. If you do not have a suitable version of `Java` installed on your computer, you may head [here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) to download the installer for your operating system."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "2. Download the latest `KanBugTracker.jar` from our [GitHub](https://github.com/AY2021S1-CS2103T-W17-1/tp/releases)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    ![Download](images/KanBugDownload.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "3. Copy the `KanBugTracker.jar` file to a folder you want to use as your _root folder_."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    ![HomeFolder](images/HomeFolder.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: Note: In this instance, \u003cb\u003eHome Folder\u003c/b\u003e acts as our \u003ci\u003eroot folder\u003c/i\u003e. Users are free to name their \u003ci\u003eroot folder\u003c/i\u003e however they wish. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "4. Double-click on the `KanBugTracker.jar`file to launch the application. You should see something similar."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   ![HomeFolder](images/Ui2.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The next section will cover the various terms that you need to be familiar with to get started!"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## 2. Glossary"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "We\u0027re sure that you\u0027re excited to start using KanBug Tracker! Before that however, there are some terms that you need to be familiar with to make the best out of your KanBug Tracker experience."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "We have divided this section into two. The first section introduces what a **bug is and explains its various parts**. The second section focuses on how the **user interacts with the application** and introduces some key ideas that users need to know."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 2.1 What is a bug?"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bugs take centre stage in this application, after all, our purpose is to help you manage them! "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Let\u0027s look at the various parts of a bug to understand how they are represented in the application. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![BugImage](images/Ui5.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "​\t"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### 1 - Bug Name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "You get to choose what you want to name each bug you enter into the KanBug Tracker."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### 2 - Priority"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "When adding bugs to the KanBug Tracker, you can include a priority level for the bug. Priority levels help give you an indication of how urgently a particular bug has to be fixed. "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "You choose from three pre-defined priority levels:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **LOW**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **MEDIUM**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **HIGH**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### 3 - State"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bugs in the KanBug Tracker can have one of four pre-defined states. States help you track which part of the bug\u0027s lifecycle a particular bug is in. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The four available states are:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **Backlog** - Bugs you have discovered but do not have the time to work on yet."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **Todo** - Bugs you intend to work on now."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **Ongoing** - Bugs you are currently working on."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **Done** - Bugs that have been resolved."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[//]: # \"-Add note about how the meanings of each state are iffy and users can use them however they feel is best\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### 4 - Description"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "A short description detailing some key parts of the bug. Useful in helping you remember what the bug is about at a glance."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### 5 - Tag"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Multiple user-defined tags can be attached to each bug. Tags aid in helping you draw connections between multiple bugs. For instance, two bugs with the same tag \"Ui\" indicates that both bugs are related to the user-interface."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### 6 - Notes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Notes are longer versions of descriptions. They are meant to provide more depth and can be used to log key pieces of information about the bug."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 2.2 What are commands?"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Commands are how you interact with the KanBug Tracker. The various commands will be covered in detail in the next [section](#3-features). However, there are some key parts of commands that you should take note of!"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Columns"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Some commands require users to include the column that a bug is in. Don\u0027t fret, columns simply refer to the state of a particular bug. In Kanban view, we can tell which column a bug is in easily. "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Index"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The index of a bug is the position of that bug in the list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#### Prefixes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Some commands require the use of prefixes to indicate user input. Every command will have its own specific format so do pay close attention to the command\u0027s requirements!"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- Words in `UPPER_CASE` are parameters to be supplied by the user"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- Items in `[...]` are optional"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `INDEX ` **must be a positive integer** 1,2,3..."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.1 Switching Views : `switch`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Want to get a high level overview of the bugs in your program or focus only on a particular column? Just switch views!"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Format: `switch`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- Switches between **Kanban view** and **List view**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.2 Viewing help : `help`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Not sure what to do next? Don\u0027t worry, just ask for help."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- Gets all commands’ syntax and usage and link to this User Guide."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.3 Listing all bugs : `list`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Lists all bugs in the tracker for times when you want to quickly look through all the bugs in the tracker."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- Shows a list of all bugs in the tracker system"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.4 Searching for bugs : `search`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "When there are a lot of bugs in the tracker, the search command is here to help to find out particular bugs you are looking for."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Format: `search q/QUERYSTRING`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- This command sorts out bugs based on your given query-string. The tracker returns all the bugs that has either name or description or tags containing this query-string as a substring. "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- The query-string cannot be empty and case-insensitive."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- If there are repetitive `q/` prefixes, the tracker only considers the last one."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- `search q/frontend`, returns a list of bugs of which either name or description or tags contains query-string *frontend* (case-insensitive) in the words."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.5 Adding a bug : `add`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "When a bug is encountered, the add command is here to help keep track of the bug for future reference."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Format: `add n/NAME d/DESCRIPTION [s/STATE] [note/NOTE] [t/TAG] [pr/PRIORITY]`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- Add a bug with the specified name, description and state to the bottom of the list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- The state, note and tag fields are optional, all other fields are needed."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- If state is not specified, a default state of backlog will be assigned."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- `add n/Print bug d/Prints the wrong message s/todo t/Ui`, adds a bug with name *Print Bug*, Description of *Prints the wrong message*, state of *To do* and a tag of *Ui*."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- `add n/Move bug d/Moves bug to wrong column s/backlog note/This bug is likely caused by issues in multiple classes`, adds a bug with name *Move bug*, Description of *Moves bug to wrong column*, state of *Backlog* and a note of *This bug is likely caused by issues in multiple classes*."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- `add n/Move bug d/Moves the wrong bug when run pr/high`, adds a bug with name *Move bug*, Description of *Moves the wrong bug when run*, default state of *Backlog* and priority of *high*."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.6 Deleting a bug : `delete`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "After a bug is fixed and a project is done, its time to remove the bug from the application."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Format: `delete INDEX [c/COLUMN]`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- The command to be used depends on which view the user is in. The user can either be in **Kanban view** or **List view**."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "  - **Kanban view**: User must supply the `COLUMN`. The bugs are filtered such that only bugs that have a `STATE` matching the `COLUMN` selected are considered. The bug at the specified `INDEX` of this filtered list is selected to be edited."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "  - **List view**: `COLUMN` should **not** be supplied. The bug at the specified `INDEX` is edited. The index refers to the index number shown in the displayed list of bugs."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- Deletes the bug at the specified index"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- `delete 1`, deletes the bug at index **1** of bug list in main view."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "- `delete 2 c/backlog`, deletes the second bug in the backlog column"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.7 Editing a bug : `edit`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Made a mistake when adding in a bug or simply changed your mind on what the description should be? Fret not, that\u0027s what the edit command is for."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Format: `edit INDEX [c/COLUMN] [n/NEW_NAME] [d/NEW_DESCRIPTION] [note/NEW_NOTE] [t/NEW_TAG]`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- The command to be used depends on which view the user is in. The user can either be in **Kanban view** or **List view**."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  - **Kanban view**: User must supply the `COLUMN`. The bugs are filtered such that only bugs that have a `STATE` matching the `COLUMN` selected are considered. The bug at the specified `INDEX` of this filtered list is selected to be edited."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  - **List view**: `COLUMN` should **not** be supplied. The bug at the specified `INDEX` is edited. The index refers to the index number shown in the displayed list of bugs."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- Edits the specified bug."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- Existing values will be updated to the input values."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- **Multiple tags** can be added or edited."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- `edit 1 c/backlog n/Wrong list numbers when displaying list d/List column printed as all 1\u0027s`, edits the name and description of the 1st bug in the backlog column to *Wrong list numbers when displaying list* and \"List column printed as all 1\u0027s\" respectively."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- `edit 2 d/When listing items, duplicates are printed note/Tried a fix using iterator, did not work`, edits the description of the 2nd bug to be *When listing items, duplicated are printed* and changes the note to *Tried a fix using iterator, did not work*"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `edit 3 t/Logger t/Logging`, edits/adds the two tags provided *Logger* and *Logging*."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.8 Editing a tag of a bug : `editTag`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Made a mistake when adding tags to your bug? With this command, you can easily make amends without having to retype every single tag!"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Format: `editTag INDEX [c/COLUMN] ot/OLD_TAG nt/NEW_TAG`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The command to be used depends on which view the user is in. The user can either be in **Kanban view** or **List view**."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - **Kanban view**: User must supply `COLUMN`. The bugs are filtered such that only bugs that have a `STATE` matching the `COLUMN` selected are considered. The bug at the specified `INDEX` of this filtered list is selected to be edited."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - **List view**: `COLUMN` should **not** be supplied. The bug at the specified `INDEX` is edited. The index refers to the index number shown in the displayed list of bugs."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The `OLD_TAG` supplied must be an existing tag."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The `NEW_TAG` supplied must **not** be an existing tag."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The `OLD_TAG` will be updated to the `NEW_TAG`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `editTag 1 ot/UI nt/UserDisplay` edits the bug at index **1** and replaces the tag **UI** with the tag **UserDisplay**."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `editTag 1 c/backlog ot/CommandResult nt/CommandParser` filters all bugs and only considers those that have a **state** of **backlog**. It then edits the bug at index **1** of this list and replaces the tag **CommandResult** with the tag **CommandParser**."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.9 Adding a tag to a bug : `addTag`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Forgot to add a tag to one of your bugs? Or perhaps you want to add a new one? With this command, adding tags has never been simpler!"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Format: `addTag INDEX [c/COLUMN] nt/NEW_TAG`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The command to be used depends on which view the user is in. The user can either be in **Kanban view** or **List view**."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - **Kanban view**: User must supply `COLUMN`. The bugs are filtered such that only bugs that have a `STATE` matching the `COLUMN` selected are considered. The bug at the specified `INDEX` of this filtered list is selected to be edited."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  - **List view**: `COLUMN` should **not** be supplied. The bug at the specified `INDEX` is edited. The index refers to the index number shown in the displayed list of bugs."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The `NEW_TAG` supplied must **not** be an existing tag."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The `NEW_TAG` will be added to the bug."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `addTag 2 nt/UserDisplay` edits the bug at index **2** and adds the tag **UI** to the bug."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- `addTag 1 c/backlog nt/CommandParser` filters all bugs and only considers those that have a **state** of **backlog**. It then edits the bug at index **1** of this list and adds the tag **CommandParser** to the bug."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.10 Moving a bug : `move`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Whether you begin to work on a bug, finish fixing one or plan to deal with a bug later, you can use `move` to update the "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "progress on dealing with that bug."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Format: `move INDEX [c/COLUMN] s/STATE`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "- The command to be used depends on which view the user is in. The user can either be in **Kanban view** or **List view**."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  - **Kanban view**: User must supply `COLUMN`. The bugs are filtered such that only bugs that have a `STATE` matching the `COLUMN` selected are considered. The bug at the specified `INDEX` of this filtered list is selected to be edited."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  - **List view**: `COLUMN` should **not** be supplied. The bug at the specified `INDEX` is edited. The index refers to the index number shown in the displayed list of bugs."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- Specifically, this command will change the state of the bug."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- The state field is **mandatory** and must be provided."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "- State can either be **backlog, todo, ongoing** or **done**."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- If the \"destination\" state is the same with the initial state of the bug, no change will be made."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- The bug must exist to be moved (e.g. we cannot move the fifth bug in the List view if there are only four bugs)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- `move 1 s/todo`, moves the first bug in the List view from its initial state to the “Todo” state."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "- `move 3 c/ongoing s/done`, moves the bug third bug in the Ongoing column of Kanban view from its initial state"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " (Ongoing) to the “Done” state."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.11 Clearing all bugs : `clear`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Imagine the project you just finish ends up with a hundred of bug records in the tracker. How to restart? Don\u0027t worry! Clear command is here to help you to clear all bugs to reinitialize the application."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "- This command is applicable to both Kanban and List views."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.12 Exiting the program : `exit`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Ends and closes the app."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "When you are done with managing your tasks, use this command to saves all of the local data and exit from the app. "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Alternatively, you can also close the window directly or press Esc key, and the app will do the same thing."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### 3.13 Saving the data : automatically"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Data is saved into the hard disk every time a change is made."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "------"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|   Action    |                            Format                            |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "| :---------: | :----------------------------------------------------------: |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|  **help**   |                            `help`                            |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|  **list**   |                            `list`                            |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "| **search**  |                      `search q/QUERYSTRING`                  |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|   **add**   |   `add n/NAME d/DESCRIPTION [s/STATE] [note/NOTE] [t/TAG]`   |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "| **delete**  |                        `delete INDEX [c/COLUMN]`                        |"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|  **edit**   | `edit INDEX [c/COLUMN] [n/NEW_NAME] [d/NEW_DESCRIPTION] [note/NOTE] [t/NEW_TAG]` |"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "| **editTag** |       `editTag INDEX [c/COLUMN] ot/OLD_TAG nt/NEW_TAG`       |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "| **addTag**  |             `addTag INDEX [c/COLUMN] nt/NEW_TAG`             |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|  **clear**  |                            `clear`                           |"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|  **move**   |               `move INDEX [c/COLUMN] s/STATE`                |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "|  **exit**   |                            `exit`                            |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[Back to top](#what-is-kanbug-tracker)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Team Name: AY2021S1-CS2103T-W17-1"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 208,
      "the-reefshark": 50,
      "duynguyen24501": 17,
      "PhongTran98": 13,
      "-": 90,
      "Rogerlys": 16
    }
  },
  {
    "path": "docs/diagrams/AddTagByStateSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":KanBugTrackerParser\" as KanBugTrackerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":AddTagCommandParser\" as AddTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \"a:AddTagByStateCommand\" as AddTagByStateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[-\u003e LogicManager : execute(\"addTag 1 c/backlog nt/UserDisplay\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e KanBugTrackerParser : parseCommand(\"addTag 1 c/backlog nt/UserDisplay\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate KanBugTrackerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create AddTagCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e AddTagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser --\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e AddTagCommandParser : parse(\"1 c/backlog nt/UserDisplay\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create AddTagByStateCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser -\u003e AddTagByStateCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagByStateCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagByStateCommand --\u003e AddTagCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagByStateCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser --\u003e KanBugTrackerParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser -[hidden]-\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "destroy AddTagCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate KanBugTrackerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e AddTagByStateCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagByStateCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagByStateCommand -\u003e Model : setBug(bugToEdit, EditedBug)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e AddTagByStateCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagByStateCommand -\u003e Model : updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e AddTagByStateCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagByStateCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "CommandResult --\u003e AddTagByStateCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagByStateCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagByStateCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 75
    }
  },
  {
    "path": "docs/diagrams/AddTagClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class AddTagCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class AddTagCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class AddTagByStateCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser .up.|\u003e Parser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser .right.\u003e AddTagCommand: creates \u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagByStateCommand -up-|\u003e AddTagCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 18
    }
  },
  {
    "path": "docs/diagrams/AddTagSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":KanBugTrackerParser\" as KanBugTrackerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":AddTagCommandParser\" as AddTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \"a:AddTagCommand\" as AddTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[-\u003e LogicManager : execute(\"addTag 1 nt/UserDisplay\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e KanBugTrackerParser : parseCommand(\"addTag 1 nt/UserDisplay\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate KanBugTrackerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create AddTagCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e AddTagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser --\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e AddTagCommandParser : parse(\"1 nt/UserDisplay\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create AddTagCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser -\u003e AddTagCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommand --\u003e AddTagCommandParser : a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser --\u003e KanBugTrackerParser : a"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommandParser -[hidden]-\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "destroy AddTagCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate KanBugTrackerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e AddTagCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommand -\u003e Model : setBug(bugToEdit, EditedBug)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommand -\u003e Model : updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "CommandResult --\u003e AddTagCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "AddTagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 75
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveKanBugTracker(kanBugTracker)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTracker *-right-\u003e \"1\" UniqueBugList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTracker *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "UniqueTagList -[hidden]down- UniqueBugList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "UniqueTagList -[hidden]down- UniqueBugList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "UniqueBugList o-right-\u003e Bug"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e State"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e Description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 9,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "if () then ([command commits KanBugTracker])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    :Save KanBugTracker to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    KanBugTrackerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandParserActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ":User enters a delete command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ": DeleteCommandParser parses the input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "if () then ([column is specified])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    :DeleteBySateCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "      is created;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    :DeleteCommand is created;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ": Command is executed an the bug is deleted;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 17
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":KanBugTrackerParser\" as KanBugTrackerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e KanBugTrackerParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate KanBugTrackerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "DeleteCommandParser --\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "DeleteCommandParser --\u003e KanBugTrackerParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate KanBugTrackerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/EditTagByStateSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":KanBugTrackerParser\" as KanBugTrackerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":EditTagCommandParser\" as EditTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \"e:EditTagByStateCommand\" as EditTagByStateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[-\u003e LogicManager : execute(\"editTag 1 c/todo ot/UI nt/UserDisplay\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e KanBugTrackerParser : parseCommand(\"ditTag 1 c/todo ot/UI nt/UserDisplay\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate KanBugTrackerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create EditTagCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e EditTagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser --\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e EditTagCommandParser : parse(\"1 c/todo ot/UI nt/UserDisplay\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create EditTagByStateCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser -\u003e EditTagByStateCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagByStateCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagByStateCommand --\u003e EditTagCommandParser : e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagByStateCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser --\u003e KanBugTrackerParser : e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser -[hidden]-\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "destroy EditTagCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate KanBugTrackerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e EditTagByStateCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagByStateCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagByStateCommand -\u003e Model : setBug(bugToEdit, EditedBug)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e EditTagByStateCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagByStateCommand -\u003e Model : updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e EditTagByStateCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagByStateCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "CommandResult --\u003e EditTagByStateCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagByStateCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagByStateCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 75
    }
  },
  {
    "path": "docs/diagrams/EditTagClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class EditTagCommandParser"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class EditTagCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class EditTagByStateCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser .up.|\u003e Parser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser .right.\u003e EditTagCommand: creates \u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagByStateCommand -up-|\u003e EditTagCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 18
    }
  },
  {
    "path": "docs/diagrams/EditTagSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":KanBugTrackerParser\" as KanBugTrackerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":EditTagCommandParser\" as EditTagCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \"e:EditTagCommand\" as EditTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[-\u003e LogicManager : execute(\"editTag 1 ot/UI nt/UserDisplay\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e KanBugTrackerParser : parseCommand(\"editTag 1 ot/UI nt/UserDisplay\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate KanBugTrackerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create EditTagCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e EditTagCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser --\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser -\u003e EditTagCommandParser : parse(\"1 ot/UI nt/UserDisplay\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create EditTagCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser -\u003e EditTagCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommand --\u003e EditTagCommandParser : e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser --\u003e KanBugTrackerParser : e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommandParser -[hidden]-\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "destroy EditTagCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate KanBugTrackerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager -\u003e EditTagCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate EditTagCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommand -\u003e Model : setBug(bugToEdit, EditedBug)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e EditTagCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommand -\u003e Model : updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Model --\u003e EditTagCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "CommandResult --\u003e EditTagCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "EditTagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate EditTagCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 75
    }
  },
  {
    "path": "docs/diagrams/KanbanBoardUI.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "box UI LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "participant \":KanbanBoard\" as KanbanBoard LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "participant \"todo:BugListPane\" as BugListPane LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "participant \"ongoing:BugListPane\" as BugListPane2 LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "participant \"done:BugListPane\" as BugListPane3 LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "participant \"backlog:BugListPane\" as BugListPane4 LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "box Logic MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "participant \":LogicManager\" as LogicManager MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[-\u003e KanbanBoard : fillInnerParts()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "activate KanbanBoard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e LogicManager : getFilteredBugListByState(\"backlog\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "LogicManager --\u003e KanbanBoard: ObserverableList\u003cBug\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "create BugListPane"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e BugListPane"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "activate BugListPane"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "BugListPane --\u003e KanbanBoard"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deactivate BugListPane"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e LogicManager : getFilteredBugListByState(\"todo\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "LogicManager --\u003e KanbanBoard: ObserverableList\u003cBug\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "create BugListPane2"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e BugListPane2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "activate BugListPane2"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "BugListPane2 --\u003e KanbanBoard"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deactivate BugListPane2"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e LogicManager : getFilteredBugListByState(\"ongoing\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "LogicManager --\u003e KanbanBoard: ObserverableList\u003cBug\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "create BugListPane3"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e BugListPane3"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "activate BugListPane3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "BugListPane3 --\u003e KanbanBoard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deactivate BugListPane3"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e LogicManager : getFilteredBugListByState(\"done\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "LogicManager --\u003e KanbanBoard: ObserverableList\u003cBug\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "create BugListPane4"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "KanbanBoard -\u003e BugListPane4"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "activate BugListPane4"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "BugListPane4 --\u003e KanbanBoard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deactivate BugListPane4"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deactivate KanbanBoard"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 59
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class KanBugTrackerParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "LogicManager --\u003e\"1\" KanBugTrackerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTrackerParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Interface ReadOnlyKanBugTracker \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class KanBugTracker"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class ReadOnlyKanBugTracker"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Package Bug {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class Bug"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class State"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class UniqueBugList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTracker .up.|\u003e ReadOnlyKanBugTracker"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "ModelManager o--\u003e \"1\" KanBugTracker"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBugTracker *--\u003e \"1\" UniqueBugList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "UniqueBugList o--\u003e \"*\" Bug"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e Name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e State"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e Description"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Bug *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "ModelManager --\u003e\"1\" Bug : filtered list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 17,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/NoteAddActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ":User executes add command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ":AddCommandParser"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  splits user input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "if () then ([note is provided])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    :Store Optional\u003cNote\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "         inside new Bug;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    :Store Empty Optional"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        inside new Bug;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ":Save new Bug to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " KanBugTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "the-reefshark": 20
    }
  },
  {
    "path": "docs/diagrams/NoteEditActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ":User executes edit command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ":EditCommandParser"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  splits user input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "if () then ([note is edited])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    :Store new Optional\u003cNote\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "         inside editted Bug;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    :Store Optional\u003cNote\u003e from"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    original Bug in edited Bug;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ":Replace edited Bug"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " in KanBugTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "the-reefshark": 20
    }
  },
  {
    "path": "docs/diagrams/PriorityExampleSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \"bug:Bug\" as Bug LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \"e:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \"priority:Priority\" as Priority LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "[-\u003e AddCommandParser : parse(\"n/Bug name d/Bug description pr/high\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parsePriority(\"high\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "create Priority"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "ParserUtil -\u003e Priority : new Priority(\"high\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate Priority"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Priority -\u003e ParserUtil"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate Priority"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "ParserUtil -\u003e AddCommandParser : priority"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "create Bug"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommandParser -\u003e Bug : new Bug(..., priority, ...)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate Bug"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Bug -\u003e AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate Bug"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "destroy Bug"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommandParser -\u003e AddCommand : new AddCommand(bug)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommand -\u003e AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommandParser -\u003e[ : e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 47
    }
  },
  {
    "path": "docs/diagrams/PrioritySequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \"bug:Bug\" as Bug LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "participant \"e:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "[-\u003e AddCommandParser : parse(args)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "alt Priority argument is indicated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    create Bug"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    AddCommandParser -\u003e Bug : new Bug(..., parsedPriority, ...)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    activate Bug"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    note right"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    parsedPriority is a Priority parsed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    using ParserUtil#parsePriority"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Bug -\u003e AddCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    deactivate Bug"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "else Priority argument is left empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    create Bug"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    AddCommandParser -\u003e Bug : new Bug(..., new Priority(), ...)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    activate Bug"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    note right"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    new Priority() is an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"empty\" Priority"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Bug -\u003e AddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    deactivate Bug"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "end"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommandParser -\u003e AddCommand : new AddCommand(bug)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommand -\u003e AddCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "AddCommandParser -\u003e[ : bug"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 43
    }
  },
  {
    "path": "docs/diagrams/SearchCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \":KanBugTrackerParser\" as KanBugTrackerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \":SearchCommandParser\" as SearchCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \":BugContainsQueryStringPredicate\" as BugContainsQueryStringPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \"s:SearchCommand\" as SearchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "[-\u003e LogicManager : execute(\"search q/Ui bug\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "LogicManager -\u003e KanBugTrackerParser : parseCommand(\"search q/Ui bug\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate KanBugTrackerParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "create SearchCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "KanBugTrackerParser -\u003e SearchCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate SearchCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommandParser --\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate SearchCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "KanBugTrackerParser -\u003e SearchCommandParser : parse(\"Ui bug\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate SearchCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "create SearchCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommandParser -\u003e SearchCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate SearchCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommand --\u003e SearchCommandParser : s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate SearchCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommandParser --\u003e KanBugTrackerParser : s"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate SearchCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommandParser -[hidden]-\u003e KanBugTrackerParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "destroy SearchCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "KanBugTrackerParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate KanBugTrackerParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "LogicManager -\u003e SearchCommand : execute()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate SearchCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "create BugContainsQueryStringPredicate"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommand -\u003e BugContainsQueryStringPredicate"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate BugContainsQueryStringPredicate"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "BugContainsQueryStringPredicate --\u003e SearchCommand : predicate"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate BugContainsQueryStringPredicate"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommand -\u003e Model : updateFilteredBugList(Predicate\u003cBug\u003e predicate)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Model --\u003e SearchCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "CommandResult --\u003e SearchCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "SearchCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate SearchCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "|||"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 111
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Interface KanBugTrackerStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class JsonKanBugTrackerStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "StorageManager o--\u003e KanBugTrackerStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "JsonKanBugTrackerStorage .left.|\u003e KanBugTrackerStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "JsonKanBugTrackerStorage .down.\u003e JsonSerializableKanBugTrackerStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "JsonSerializableKanBugTrackerStorage .right.\u003e JsonSerializableBug"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "JsonSerializableBug .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class BugListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Class BugCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "MainWindow *-down-\u003e BugListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "BugListPanel -down-\u003e BugCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "BugListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "BugCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "BugCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "BugListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 8,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "ecp -\u003e ec ++: index, editBugDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "title: KanBug Tracker"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**The KanBug Tracker is a desktop application for managing the tracking of bugs you encounter, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* If you are interested in using KanBug Tracker, head over to the [**User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* If you are interested about developing KanBug Tracker, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 4,
      "-": 15
    }
  },
  {
    "path": "docs/team/duynguyen24501.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "title: Nguyen Khanh Duy\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "## Project: KanBug Tracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "KanBug Tracker is a **desktop app for managing the tracking of bugs you encounter, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "**As the project is on going, this section will be filled up at a later time.**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 2,
      "duynguyen24501": 28
    }
  },
  {
    "path": "docs/team/kishenkumarrrrr.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "title: Kishen Ashok Kumar - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## Project: KanBug Tracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "This portfolio page highlights my contributions to KanBug Tracker - a Software Engineering project developed as part of the module CS2103T during my second year of undergraduate studies in the National University of Singapore. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### About the Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "We are five Year 2 Computer Science undergraduates reading CS2103T: Software Engineering. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "### About the project"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBug Tracker is a lightweight, easy to use bug management tool that aims to empower developers to keep better track of the bugs in their projects. It provides users not only with a convenient way to record their bugs, but also allows them to better coordinate their efforts between various bugs and track the state of each bug throughout its lifecycle. The team has also developed various other user-centric features to provide our users with the functionality they need to empower their bug tracking efforts. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**As the project is on going, this section will be filled up at a later time.**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **New Feature**: I implemented the ability to add tags to an already existing bug via the `addTag` command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * What it does: The feature provides the user with the ability to quickly select a target bug and add any number of tags to that bug."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * Justification: The feature improves KanBug Tracker significantly because users now have a quick and direct method to add more tags to an already existing bug. Without this feature, users will be forced to make use of the existing `edit` command which requires users to retype all of the bug\u0027s existing tags in addition to the tags they would now like to add. This saves the user valuable time, helping them improve their productivity and efficiency. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * Highlights: This enhancement requires and in-depth understanding of the Logic component\u0027s architecture and how the different components within it interact and function. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **New Feature**: I implemented the ability to edit tags of an already existing bug via the `editTag` command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * What it does: The feature provides the user with the ability to quickly select a target bug and modify one of its tags."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * Justification: The feature improves KanBug Tracker significantly because users now have a quick and direct method to update an existing tag of the bug. Without this feature, users will be forced to make use of the existing `edit` command which requires users to retype all of the bug\u0027s existing tags in addition to the newly modified tag. This saves the user valuable time, helping them improve their productivity and efficiency. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **Code contributed**: You can view my functional code and test code contributions to KanBug Tracker [here](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dKishenKumarrrrr\u0026tabRepo\u003dAY2021S1-CS2103T-W17-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **Other contributions:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * **Project management**: "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * As the in-charge of Deadlines and Deliverables, I monitored and coordinated the efforts between the various team members to ensure that the team worked cohesively and were putting in consistent effort. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Set up GitHub team organization, repository and GitHub pages."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Set up Continuous Integration actions on team repository and added branch protection to ensure that code contributions would be of high standard."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Contributed to product ideation, brainstorming user stories and key features, and ensuring that everyone had an equal share of assigned tasks. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Created meeting agendas for weekly team meeting to ensure that the team was always on task and that each individual was making progress on their assigned tasks. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * **Team Documentation:**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Wrote the sections for the Introduction, Getting Started, Glossary, `editTag` and `addTag` commands in KanBug Tracker\u0027s User Guide."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Wrote the sections for Edit Tag and Add Tag features in the Developer Guide."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  * **Beyond the team**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    * Peer testing and bug reporting:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  ## Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  ## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 55
    }
  },
  {
    "path": "docs/team/phongtran98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "title: Tran Gia Phong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "## Project: KanBug Tracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "KanBug Tracker is a **desktop app for managing the tracking of bugs you encounter, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "**As the project is on going, this section will be filled up at a later time.**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 21
    }
  },
  {
    "path": "docs/team/rogerlys.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "## Project: KanBug Tracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "KanBug Tracker is a **desktop app for managing the tracking of bugs you encounter, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "**As the project is on going, this section will be filled up at a later time.**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 8,
      "-": 22
    }
  },
  {
    "path": "docs/team/the-reefshark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "## Project: KanBug Tracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "KanBug Tracker is a **desktop app for managing the tracking of bugs you encounter, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "**As the project is on going, this section will be filled up at a later time.**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **Code contributed**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "the-reefshark": 30
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their description book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/description/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.description.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.description.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * Changes the remark of an existing bug in the description book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * Changes the remark of an existing bug in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 33b37e54cbc184873b939ea9b3a713905b4e8d13"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the bug identified \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"by the index number used in the last bug listing. \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.description.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param index of the bug in the filtered bug list to edit the remark"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param remark of the bug to be updated to"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.description.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of bug data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the bug’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a bug."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Create a new `Remark` in `seedu.description.model.bug`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Create a new `Remark` in `seedu.address.model.bug`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 33b37e54cbc184873b939ea9b3a713905b4e8d13"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each bug."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Simply add the following to [`seedu.description.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "Simply add the following to [`seedu.address.ui.BugCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 33b37e54cbc184873b939ea9b3a713905b4e8d13"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty description book!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public PersonCard(Person bug, int displayedIndex) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    remark.setText(bug.getRemark().value);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Person bugToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Person editedBug \u003d new Person(bugToEdit.getName(), bugToEdit.getPhone(), bugToEdit.getEmail(),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                bugToEdit.getAddress(), remark, bugToEdit.getTags());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        model.setPerson(bugToEdit, editedBug);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedBug));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * {@code bugToEdit}."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private String generateSuccessMessage(Person bugToEdit) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return String.format(message, bugToEdit);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 35,
      "duynguyen24501": 3,
      "-": 368
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `description` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "The `description` field in `Person` is actually an instance of the `seedu.address.model.bug.Descriptionress` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.bug.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 33b37e54cbc184873b939ea9b3a713905b4e8d13"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. Safe delete the field `description` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "1. Remove the usages of `description` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `description` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `description` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$description` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "![$description](../images/remove/$description.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "private Label description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cLabel fx:id\u003d\"state\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$state\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `description` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "  \"bugs\": [ {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \"state\": \"hans@example.com\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"description\": \"4th street\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "You can go through each individual `json` file and manually remove the `description` field."
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 17,
      "duynguyen24501": 1,
      "-": 87,
      "Rogerlys": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.description.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "       Person bugToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "       Person editedBug \u003d createEditedPerson(bugToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "       Person editedBug \u003d createEditedPerson(bugToEdit, editBugDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 33b37e54cbc184873b939ea9b3a713905b4e8d13"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "       if (!bugToEdit.isSamePerson(editedBug) \u0026\u0026 model.hasPerson(editedBug)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "       model.setPerson(bugToEdit, editedBug);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedBug));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "       bugs.addAll("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    3.  Save the description book in the CSV format instead"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    6.  Add a new entity to the description book"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 12,
      "duynguyen24501": 1,
      "-": 241
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "#Tue Oct 06 13:36:16 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "Rogerlys": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.storage.JsonKanBugTrackerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.storage.KanBugTrackerStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing KanBugTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        KanBugTrackerStorage kanBugTrackerStorage \u003d new JsonKanBugTrackerStorage(userPrefs.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        storage \u003d new StorageManager(kanBugTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s bug tracker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The data from the sample bug tracker will be used instead if {@code storage}\u0027s bug tracker is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * or an empty bug tracker will be used instead if errors occur when reading {@code storage}\u0027s bug tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Optional\u003cReadOnlyKanBugTracker\u003e kanBugTrackerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ReadOnlyKanBugTracker initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            kanBugTrackerOptional \u003d storage.readKanBugTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            if (!kanBugTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample KanBugTracker\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            initialData \u003d kanBugTrackerOptional.orElseGet(SampleDataUtil::getSampleKanBugTracker);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty KanBugTracker\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            initialData \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty KanBugTracker\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            initialData \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty KanBugTracker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        logger.info(\"Starting KanBugTracker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Description Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "duynguyen24501": 8,
      "PhongTran98": 14,
      "-": 159,
      "Rogerlys": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String LOG_FILE \u003d \"kanbugtracker.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_INVALID_BUG_DISPLAYED_INDEX \u003d \"The bug index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_BUGS_LISTED_OVERVIEW \u003d \"%1$d bugs listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_EXTRA_ARGUMENTS \u003d \"Please remove extra arguments after command word\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "duynguyen24501": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code queryString}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @param queryString cannot be null, cannot be empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static boolean containsQueryStringIgnoreCase(String sentence, String queryString) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(queryString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String preppedWord \u003d queryString.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return sentence.toLowerCase().contains(queryString.toLowerCase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 14,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns the KanBugTracker."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @see seedu.address.model.Model#getKanBugTracker()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    ReadOnlyKanBugTracker getKanBugTracker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bugs */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    ObservableList\u003cBug\u003e getFilteredBugList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns the user prefs\u0027 bug tracker file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Path getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /** Returns a filtered list of bugs according to state**/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    ObservableList\u003cBug\u003e getFilteredBugListByState(String state);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 3,
      "PhongTran98": 6,
      "-": 42,
      "Rogerlys": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.logic.parser.KanBugTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final KanBugTrackerParser kanBugTrackerParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        kanBugTrackerParser \u003d new KanBugTrackerParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Command command \u003d kanBugTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            storage.saveKanBugTracker(model.getKanBugTracker());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public ReadOnlyKanBugTracker getKanBugTracker() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return model.getKanBugTracker();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public ObservableList\u003cBug\u003e getFilteredBugList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return model.getFilteredBugList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Path getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return model.getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public ObservableList\u003cBug\u003e getFilteredBugListByState(String state) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        FilteredList\u003cBug\u003e listOfBugs \u003d new FilteredList\u003c\u003e(model.getFilteredBugList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        listOfBugs.setPredicate((bug) -\u003e bug.compareState(new State(state)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return listOfBugs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 2,
      "PhongTran98": 8,
      "duynguyen24501": 3,
      "-": 68,
      "Rogerlys": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Adds a bug to the bug tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a bug to the KanBug Tracker. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + \"[\" + PREFIX_STATE + \"STATE] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + PREFIX_NAME + \"Array size error \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + PREFIX_STATE + \"backlog \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_DESCRIPTION + \"ArrayStoreException due to array being too small \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            + PREFIX_PRIORITY + \"medium \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + PREFIX_TAG + \"Array \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + PREFIX_TAG + \"Size \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New bug added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUG \u003d \"This bug already exists in the KanBug Tracker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private final Bug toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Bug}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public AddCommand(Bug bug) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(bug);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        toAdd \u003d bug;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (model.hasBug(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.addBug(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "PhongTran98": 6,
      "the-reefshark": 5,
      "duynguyen24501": 2,
      "-": 42,
      "Rogerlys": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTagByStateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class AddTagByStateCommand extends AddTagCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private final State targetState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Creates a new instance of AddTagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param index  of bug to add the tag to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param newTags to add to the bug"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param  targetState which indicates which state to modify"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public AddTagByStateCommand(Index index, Set\u003cTag\u003e newTags, State targetState) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        super(index, newTags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(targetState);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.targetState \u003d targetState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugListByState(targetState);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!(other instanceof AddTagByStateCommand)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        AddTagByStateCommand e \u003d (AddTagByStateCommand) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                   \u0026\u0026 newTags.equals(e.newTags)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                   \u0026\u0026 targetState.equals(e.targetState);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 6,
      "Rogerlys": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWTAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTag\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    //TODO Update the DG such that only valid tags are used"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \" bug identified by the index number used in the displayed bug list.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"[\" + PREFIX_COLUMN + \"COLUMN] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_NEWTAG + \"NEW_TAG\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_NEWTAG + \"Ui\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_ADD_BUG_SUCCESS \u003d \"Added Tag: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_NOT_ADDED \u003d \"Input values cannot be null.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_INVALID_NEW \u003d \"The new tag already exists!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    protected Set\u003cTag\u003e newTags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Creates a new instance of AddTagCommand."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param index of bug to add the tag to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param newTags to add to the bug"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public AddTagCommand(Index index, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(newTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.newTags \u003d newTags;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected CommandResult updateList(List\u003cBug\u003e lastShownList, Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug bugToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug editedBug \u003d addTagsToBug(bugToEdit, newTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        model.setBug(bugToEdit, editedBug);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        model.updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_BUG_SUCCESS, editedBug));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Adds a new tag to the specified bug."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param bugToEdit bug to add the new tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param newTags to add"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @return updated bug"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @throws CommandException if the {@code newTag} already exists or the inputs are null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static Bug addTagsToBug(Bug bugToEdit, Set\u003cTag\u003e newTags) throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (bugToEdit \u003d\u003d null || newTags \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ADDED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e existingTagSet \u003d bugToEdit.getTags();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (existingTagSet.stream().anyMatch(newTags::contains)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_NEW);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Name bugName \u003d bugToEdit.getName();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State bugState \u003d bugToEdit.getState();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Description bugDescription \u003d bugToEdit.getDescription();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d addTagsToSet(existingTagSet, newTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Priority bugPriority \u003d bugToEdit.getPriority();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Optional\u003cNote\u003e updatedNote \u003d bugToEdit.getOptionalNote();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Bug(bugName, bugState, bugDescription, updatedNote, updatedTags, bugPriority);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static Set\u003cTag\u003e addTagsToSet(Set\u003cTag\u003e existingTagSet, Set\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e setCopy \u003d new HashSet\u003c\u003e(existingTagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        setCopy.addAll(newTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return setCopy;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!(other instanceof AddTagCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand e \u003d (AddTagCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                       \u0026\u0026 newTags.equals(e.newTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 122,
      "the-reefshark": 4,
      "Rogerlys": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Clears the bug tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"KanBug Tracker has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.setKanBugTracker(new KanBugTracker());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 2,
      "PhongTran98": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private final boolean showBoard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showBoard) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.showBoard \u003d showBoard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isShowBoard() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return showBoard;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "Rogerlys": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteByStateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeleteByStateCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private State targetState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param targetIndex index of the bug in the filtered bug list to delete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param targetState current state of the bug to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DeleteByStateCommand(Index targetIndex, State targetState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.targetState \u003d targetState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugListByState(targetState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (!(other instanceof DeleteByStateCommand)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return false; // different object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand d \u003d (DeleteByStateCommand) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return targetState.equals(d.targetState)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            \u0026\u0026 targetIndex.equals(d.targetIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Deletes a bug identified using it\u0027s displayed index from the bug tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \": Deletes the bug identified by the index number used in the displayed bug list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"[\" + PREFIX_COLUMN + \"STATE]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_DELETE_BUG_SUCCESS \u003d \"Deleted Bug: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected CommandResult updateList(List\u003cBug\u003e lastShownList, Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug bugToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.deleteBug(bugToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BUG_SUCCESS, bugToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "PhongTran98": 2,
      "-": 40,
      "Rogerlys": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditByStateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class EditByStateCommand extends EditCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private State targetState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param index of the bug in the filtered bug list to edit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param editBugDescriptor details to edit the bug with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public EditByStateCommand(Index index, EditBugDescriptor editBugDescriptor, State targetState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(index, editBugDescriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.targetState \u003d targetState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugListByState(targetState);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!(other instanceof EditByStateCommand)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditByStateCommand e \u003d (EditByStateCommand) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                   \u0026\u0026 editBugDescriptor.equals(e.editBugDescriptor)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                   \u0026\u0026 targetState.equals(e.targetState);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUGS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Edits the details of an existing bug in the bug tracker."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the bug identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"by the index number used in the displayed bug list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"[\" + PREFIX_STATE + \"STATE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            + PREFIX_STATE + \"backlog\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"[\" + PREFIX_COLUMN + \"STATE]\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + PREFIX_STATE + \"todo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_EDIT_BUG_SUCCESS \u003d \"Edited Bug: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUG \u003d \"This bug already exists in the KanBug Tracker.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    protected final EditBugDescriptor editBugDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @param index of the bug in the filtered bug list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @param editBugDescriptor details to edit the bug with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditCommand(Index index, EditBugDescriptor editBugDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(editBugDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.editBugDescriptor \u003d new EditBugDescriptor(editBugDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected CommandResult updateList(List\u003cBug\u003e lastShownList, Model model) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug bugToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug editedBug \u003d createEditedBug(bugToEdit, editBugDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!bugToEdit.isSameBug(editedBug) \u0026\u0026 model.hasBug(editedBug)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.setBug(bugToEdit, editedBug);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BUG_SUCCESS, editedBug));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Creates and returns a {@code Bug} with the details of {@code bugToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * edited with {@code editBugDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected static Bug createEditedBug(Bug bugToEdit, EditBugDescriptor editBugDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert bugToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Name updatedName \u003d editBugDescriptor.getName().orElse(bugToEdit.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        State updatedState \u003d editBugDescriptor.getState().orElse(bugToEdit.getState());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Description updatedDescription \u003d editBugDescriptor.getDescription().orElse(bugToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Optional\u003cNote\u003e updatedOptionalNote \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (editBugDescriptor.getOptionalNote() \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            updatedOptionalNote \u003d bugToEdit.getOptionalNote();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        } else if (editBugDescriptor.getOptionalNote().isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            updatedOptionalNote \u003d Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            updatedOptionalNote \u003d editBugDescriptor.getOptionalNote();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editBugDescriptor.getTags().orElse(bugToEdit.getTags());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority updatedPriority \u003d editBugDescriptor.getPriority().orElse(bugToEdit.getPriority());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Bug(updatedName, updatedState, updatedDescription, updatedOptionalNote, updatedTags ,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                updatedPriority);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u0026\u0026 editBugDescriptor.equals(e.editBugDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Stores the details to edit the bug with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * corresponding field value of the bug."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static class EditBugDescriptor {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        private State state;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        private Optional\u003cNote\u003e note;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public EditBugDescriptor() {}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public EditBugDescriptor(EditBugDescriptor toCopy) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            setState(toCopy.state);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            setOptionalNote(toCopy.note);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, state, description, note, tags, priority);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        public void setState(State state) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            this.state \u003d state;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        public Optional\u003cState\u003e getState() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return Optional.ofNullable(state);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        public void setOptionalNote(Optional\u003cNote\u003e note) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        public Optional\u003cNote\u003e getOptionalNote() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            return this.note;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            if (!(other instanceof EditBugDescriptor)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            EditBugDescriptor e \u003d (EditBugDescriptor) other;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            boolean noteEqual \u003d getOptionalNote() \u003d\u003d null ? (getOptionalNote() \u003d\u003d null \u0026\u0026 e.getOptionalNote() \u003d\u003d null)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                    : getOptionalNote().equals(e.getOptionalNote());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    \u0026\u0026 getState().equals(e.getState())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                    \u0026\u0026 noteEqual"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 22,
      "the-reefshark": 25,
      "PhongTran98": 14,
      "duynguyen24501": 23,
      "-": 157,
      "Rogerlys": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTagByStateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class EditTagByStateCommand extends EditTagCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private final State targetState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param index  of the bug in the filtered bug list to edit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param oldTag to be modified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param newTag to replace old tag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param targetState the state that we are targeting"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public EditTagByStateCommand(Index index, Tag oldTag, Tag newTag, State targetState) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(index, oldTag, newTag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(targetState);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.targetState \u003d targetState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugListByState(targetState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!(other instanceof EditTagByStateCommand)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand e \u003d (EditTagByStateCommand) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 oldTag.equals(e.oldTag)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 newTag.equals(e.newTag)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 targetState.equals(e.targetState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 20,
      "Rogerlys": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWTAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLDTAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class EditTagCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTag\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the tags of \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"the bug identified by the index number used in the displayed bug list.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"The existing tag supplied by the user will be replaced with the new tag given\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"as input.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"[\" + PREFIX_COLUMN + \"]\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_OLDTAG + \"OLD_TAG \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_NEWTAG + \"NEW_TAG\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + PREFIX_OLDTAG + \"display \" + PREFIX_NEWTAG + \"Ui\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_EDIT_BUG_SUCCESS \u003d \"Edited Tag: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_INVALID_OLD \u003d \"A valid existing tag must be supplied.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_INVALID_NEW \u003d \"The new tag already exists!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"Input values cannot be null.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected Tag oldTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected Tag newTag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Creates a new instance of an EditTagCommand with the appropriate {@code index},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * {@code oldTag} and {@code newTag}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param index of the bug in the filtered bug list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param oldTag to be modified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param newTag to replace old tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public EditTagCommand(Index index, Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(oldTag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(newTag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.oldTag \u003d oldTag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.newTag \u003d newTag;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected CommandResult updateList(List\u003cBug\u003e lastShownList, Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug bugToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug editedBug \u003d updateTagInBug(bugToEdit, oldTag, newTag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        model.setBug(bugToEdit, editedBug);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        model.updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BUG_SUCCESS, editedBug));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Updates the old tag in the specified bug and replaces it with the new tag."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param bugToEdit bug whose tag is to be edited"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param oldTag to be replaced"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param newTag to replace the old tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @return updated bug"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @throws CommandException if {@code oldTag} does not exist, the {@code newTag} already exists or the inputs are"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static Bug updateTagInBug(Bug bugToEdit, Tag oldTag, Tag newTag) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (bugToEdit \u003d\u003d null || oldTag \u003d\u003d null || newTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e existingTagSet \u003d bugToEdit.getTags();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!existingTagSet.contains(oldTag)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException((MESSAGE_INVALID_OLD));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (existingTagSet.contains(newTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new CommandException((MESSAGE_INVALID_NEW));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Name bugName \u003d bugToEdit.getName();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State bugState \u003d bugToEdit.getState();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Description bugDescription \u003d bugToEdit.getDescription();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateTagSet(existingTagSet, oldTag, newTag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Priority bugPriority \u003d bugToEdit.getPriority();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Optional\u003cNote\u003e updatedNote \u003d bugToEdit.getOptionalNote();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Bug(bugName, bugState, bugDescription, updatedNote, updatedTags, bugPriority);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected static Set\u003cTag\u003e updateTagSet(Set\u003cTag\u003e existingTagSet, Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert existingTagSet.contains(oldTag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e setCopy \u003d new HashSet\u003c\u003e(existingTagSet);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        setCopy.remove(oldTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        setCopy.add(newTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return setCopy;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!(other instanceof EditTagCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagCommand e \u003d (EditTagCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                       \u0026\u0026 oldTag.equals(e.oldTag)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                       \u0026\u0026 newTag.equals(e.newTag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 135,
      "the-reefshark": 4,
      "Rogerlys": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting KanBug Tracker as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 17,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Lists all bugs in the bug tracker to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bugs\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 2,
      "PhongTran98": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MoveByStateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class MoveByStateCommand extends MoveCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private State tagetState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param index of the bug in the filtered bug list to edit"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param state details to edit the bug with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public MoveByStateCommand(Index index, State state, State tagetState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(index, state);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.tagetState \u003d tagetState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugListByState(tagetState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!(other instanceof MoveCommand)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        MoveByStateCommand e \u003d (MoveByStateCommand) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                   \u0026\u0026 state.equals(e.state)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                   \u0026\u0026 tagetState.equals(e.tagetState);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class MoveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Move the bug to new state identified \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + \"by the index number used in the displayed bug list. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + PREFIX_STATE + \"STATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"[\" + PREFIX_COLUMN + \"STATE]\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + PREFIX_STATE + \"done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_MOVE_BUG_SUCCESS \u003d \"Moved Bug: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUG \u003d \"This bug already exists in the KanBug Tracker.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected final State state;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @param index of the bug in the filtered bug list to edit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @param state details to edit the bug with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public MoveCommand(Index index, State state) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        List\u003cBug\u003e lastShownList \u003d model.getFilteredBugList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return updateList(lastShownList, model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected static Bug createMovedBug(Bug bugToMove, State destination) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assert bugToMove !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return new Bug(bugToMove.getName(), destination, bugToMove.getDescription(), bugToMove.getOptionalNote(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                bugToMove.getTags(), bugToMove.getPriority());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected CommandResult updateList(List\u003cBug\u003e lastShownList, Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug bugToMove \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug movedBug \u003d createMovedBug(bugToMove, state);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (model.hasBug(movedBug)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        model.setBug(bugToMove, movedBug);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        model.updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MOVE_BUG_SUCCESS, movedBug));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!(other instanceof MoveCommand)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        MoveCommand e \u003d (MoveCommand) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u0026\u0026 state.equals(e.state);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 67,
      "PhongTran98": 12,
      "Rogerlys": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUERYSTRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.BugContainsQueryStringPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Search all bugs whose names/descriptions/tags contain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + \"the specified query-string (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + \"Parameters: \" + PREFIX_QUERYSTRING + \"QUERYSTRING\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_QUERYSTRING + \" Ui bug\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String MESSAGE_EMPTY_QUERY_STRING \u003d \"The query-string cannot be empty!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final BugContainsQueryStringPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public SearchCommand(BugContainsQueryStringPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                String.format(Messages.MESSAGE_BUGS_LISTED_OVERVIEW, model.getFilteredBugList().size()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return new CommandResult(\"\", false, false, true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final State DEFAULT_STATE \u003d new State(\"backlog\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final Priority DEFAULT_PRIORITY \u003d new Priority();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STATE, PREFIX_DESCRIPTION, PREFIX_NOTE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        PREFIX_TAG, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assert argMultimap.getValue(PREFIX_NAME).isPresent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assert argMultimap.getValue(PREFIX_DESCRIPTION).isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        State state \u003d DEFAULT_STATE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Optional\u003cNote\u003e optionalNote \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Priority priority \u003d DEFAULT_PRIORITY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_STATE)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            assert argMultimap.getValue(PREFIX_STATE).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            state \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_STATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NOTE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                \u0026\u0026 !Note.isValidNote(argMultimap.getValue(PREFIX_NOTE).get())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            optionalNote \u003d Optional.of(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Bug bug \u003d new Bug(name, state, description, optionalNote, tagList, priority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new AddCommand(bug);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 5,
      "the-reefshark": 23,
      "PhongTran98": 7,
      "duynguyen24501": 3,
      "-": 46,
      "Rogerlys": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWTAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.AddTagByStateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final int NUMBER_OF_PREFIXES_EXPECTED \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final int NUMBER_OF_COLUMN \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTagCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * and returns an EditTagCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NEWTAG, PREFIX_COLUMN);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        int numberOfPrefixesExpected \u003d NUMBER_OF_PREFIXES_EXPECTED;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COLUMN)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            numberOfPrefixesExpected++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        boolean hasExtraPrefixes \u003d argMultimap.getSize() !\u003d numberOfPrefixesExpected;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        boolean hasIncorrectNumberOfColumn \u003d argMultimap.numberOfPrefixElements(PREFIX_COLUMN) \u003e NUMBER_OF_COLUMN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NEWTAG)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                || argMultimap.getPreamble().isEmpty() || hasExtraPrefixes || hasIncorrectNumberOfColumn) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert argMultimap.getValue(PREFIX_NEWTAG).isPresent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d parseTagsForEdit(argMultimap.getAllValues(PREFIX_NEWTAG)).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COLUMN)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            State targetState \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_COLUMN).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return new AddTagByStateCommand(index, tagsToAdd, targetState);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new AddTagCommand(index, tagsToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert (!tags.isEmpty() \u003d\u003d true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 71,
      "Rogerlys": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Gets the size of the list mapped to the input prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param prefix of list to check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @return size of the list mapped to the input prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public int numberOfPrefixElements(Prefix prefix) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return argValues.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 16,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final Prefix PREFIX_STATE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"note/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final Prefix PREFIX_OLDTAG \u003d new Prefix(\"ot/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final Prefix PREFIX_NEWTAG \u003d new Prefix(\"nt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Prefix PREFIX_QUERYSTRING \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final Prefix PREFIX_COLUMN \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 4,
      "the-reefshark": 1,
      "duynguyen24501": 1,
      "PhongTran98": 1,
      "-": 12,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.DeleteByStateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_COLUMN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_COLUMN)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                State targetState \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_COLUMN).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return new DeleteByStateCommand(index, targetState);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "Rogerlys": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.EditByStateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBugDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_NOTE, PREFIX_TAG, PREFIX_PRIORITY, PREFIX_COLUMN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditBugDescriptor editBugDescriptor \u003d new EditBugDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            assert argMultimap.getValue(PREFIX_NAME).get() !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            editBugDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            editBugDescriptor.setState(ParserUtil.parseState(argMultimap.getValue(PREFIX_STATE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            editBugDescriptor.setPriority(parsePriorityForEdit(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            editBugDescriptor.setDescription("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            String editedNoteContent \u003d argMultimap.getValue(PREFIX_NOTE).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            if (editedNoteContent.isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                editBugDescriptor.setOptionalNote(Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            if (!editedNoteContent.isBlank()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                editBugDescriptor.setOptionalNote(Optional.of(ParserUtil.parseNote(editedNoteContent)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBugDescriptor::setTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!editBugDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLUMN).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            State targetState \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_COLUMN).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new EditByStateCommand(index, editBugDescriptor, targetState);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return new EditCommand(index, editBugDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assert (!tags.isEmpty() \u003d\u003d true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Parses {@code String priority} into a {@code Priority} if {@conde priority} is a non-empty string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * If {@code priority} is an empty string, it will be parsed into a \u0027null\u0027 priority."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Priority parsePriorityForEdit(String priority) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assert priority !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (priority.equals(\"\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            return new Priority();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return ParserUtil.parsePriority(priority);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 2,
      "the-reefshark": 11,
      "PhongTran98": 17,
      "duynguyen24501": 8,
      "-": 65,
      "Rogerlys": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWTAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLDTAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.EditTagByStateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final int NUMBER_OF_PREFIXES_EXPECTED \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final int NUMBER_OF_OLDTAG \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final int NUMBER_OF_NEWTAG \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final int NUMBER_OF_COLUMN \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    //TODO clean up all documentation details for EditTagCommandParser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    // AddTagCommand, AddTagCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTagCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * and returns an EditTagCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param args string to be parsed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public EditTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_OLDTAG, PREFIX_NEWTAG, PREFIX_COLUMN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        int numberOfPrefixExpected \u003d NUMBER_OF_PREFIXES_EXPECTED;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Tag oldTag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Tag newTag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COLUMN)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            numberOfPrefixExpected++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        boolean hasExtraPrefixes \u003d argMultimap.getSize() !\u003d numberOfPrefixExpected;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        boolean hasIncorrectNumberOfNewTag \u003d argMultimap.numberOfPrefixElements(PREFIX_NEWTAG) !\u003d NUMBER_OF_NEWTAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        boolean hasIncorrectNumberOfOldTag \u003d argMultimap.numberOfPrefixElements(PREFIX_OLDTAG) !\u003d NUMBER_OF_OLDTAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        boolean hasIncorrectNumberOfColumn \u003d argMultimap.numberOfPrefixElements(PREFIX_COLUMN) \u003e NUMBER_OF_COLUMN;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        boolean hasIncorrectNumberOfPrefixValues \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                hasIncorrectNumberOfNewTag || hasIncorrectNumberOfOldTag || hasIncorrectNumberOfColumn;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_OLDTAG, PREFIX_NEWTAG, PREFIX_COLUMN)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    || argMultimap.getPreamble().isEmpty() || hasExtraPrefixes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    || hasIncorrectNumberOfPrefixValues) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert argMultimap.getValue(PREFIX_OLDTAG).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assert argMultimap.getValue(PREFIX_NEWTAG).isPresent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            oldTag \u003d new Tag(argMultimap.getValue(PREFIX_OLDTAG).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            newTag \u003d new Tag(argMultimap.getValue(PREFIX_NEWTAG).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_COLUMN)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            State targetState \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_COLUMN).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new EditTagByStateCommand(index, oldTag, newTag, targetState);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new EditTagCommand(index, oldTag, newTag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 68,
      "Rogerlys": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/KanBugTrackerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXTRA_ARGUMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "public class KanBugTrackerParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case EditTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return new EditTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        case MoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return new MoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            ensureNoArguments(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            ensureNoArguments(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            ensureNoArguments(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            ensureNoArguments(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            ensureNoArguments(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new SwitchCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private void ensureNoArguments(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new ParseException(MESSAGE_EXTRA_ARGUMENTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 23,
      "duynguyen24501": 7,
      "PhongTran98": 1,
      "-": 71,
      "Rogerlys": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.MoveByStateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * Parses input arguments and creates a new MoveCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class MoveCommandParser implements Parser\u003cMoveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MoveCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * and returns an MoveCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public MoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STATE, PREFIX_COLUMN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        State state \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_STATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLUMN).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            State targetState \u003d ParserUtil.parseState(argMultimap.getValue(PREFIX_COLUMN).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new MoveByStateCommand(index, state, targetState);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return new MoveCommand(index, state);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 47,
      "PhongTran98": 4,
      "Rogerlys": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (!Name.isValidNote(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Parses a {@code String address} into a {@code Note}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * @throws ParseException if the given {@code note} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static Note parseNote(String note) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String trimmedNote \u003d note.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Note(trimmedNote);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Parses a {@code String state} into an {@code State}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static State parseState(String state) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String trimmedState \u003d state.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!State.isValidState(trimmedState)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new ParseException(State.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return new State(trimmedState);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Parses {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Parses a {@code String queryString}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static String parseQueryString(String queryString) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(queryString);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String trimmedQueryString \u003d queryString.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return trimmedQueryString;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "the-reefshark": 16,
      "PhongTran98": 16,
      "duynguyen24501": 11,
      "-": 95,
      "Rogerlys": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUERYSTRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.BugContainsQueryStringPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of SearchCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_QUERYSTRING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUERYSTRING)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String queryString \u003d ParserUtil.parseQueryString(argMultimap.getValue(PREFIX_QUERYSTRING).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (queryString.trim().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new ParseException(String.format(SearchCommand.MESSAGE_EMPTY_QUERY_STRING,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                    SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return new SearchCommand(new BugContainsQueryStringPredicate(queryString));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/KanBugTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.UniqueBugList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Wraps all data at the kanbug-tracker level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Duplicates are not allowed (by .isSameBug comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class KanBugTracker implements ReadOnlyKanBugTracker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final UniqueBugList bugs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        bugs \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanBugTracker() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Creates an KanBugTracker using the Bugs in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanBugTracker(ReadOnlyKanBugTracker toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Replaces the contents of the bug list with {@code bugs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * {@code bugs} must not contain duplicate bugs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setBugs(List\u003cBug\u003e bugs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.bugs.setBugs(bugs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Resets the existing data of this {@code KanBugTracker} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void resetData(ReadOnlyKanBugTracker newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        setBugs(newData.getBugList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    //// bug-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns true if a bug with the same identity as {@code bug} exists in the bug tracker."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean hasBug(Bug bug) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(bug);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return bugs.contains(bug);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Adds a bug to the KanBug Tracker."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * The bug must not already exist in the KanBug Tracker."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void addBug(Bug p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        bugs.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Replaces the given bug {@code target} in the list with {@code editedBug}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * {@code target} must exist in the KanBug Tracker."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The bug identity of {@code editedBug} must not be the same as another existing bug in the KanBug Tracker."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setBug(Bug target, Bug editedBug) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(editedBug);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugs.setBug(target, editedBug);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Removes {@code key} from this {@code KanBugTracker}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * {@code key} must exist in the KanBug Tracker."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void removeBug(Bug key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        bugs.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return bugs.asUnmodifiableObservableList().size() + \" bugs\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public ObservableList\u003cBug\u003e getBugList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return bugs.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                || (other instanceof KanBugTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u0026\u0026 bugs.equals(((KanBugTracker) other).bugs));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return bugs.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 113,
      "PhongTran98": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    Predicate\u003cBug\u003e PREDICATE_SHOW_ALL_BUGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns the user prefs\u0027 bug tracker file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    Path getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the user prefs\u0027 bug tracker file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    void setKanBugTrackerFilePath(Path kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Replaces bug tracker data with the data in {@code kanBugTracker}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    void setKanBugTracker(ReadOnlyKanBugTracker kanBugTracker);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /** Returns the KanBugTracker */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    ReadOnlyKanBugTracker getKanBugTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns true if a bug with the same identity as {@code bug} exists in the bug tracker."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    boolean hasBug(Bug bug);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Deletes the given bug."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The bug must exist in the bug tracker."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    void deleteBug(Bug target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Adds the given bug."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * {@code bug} must not already exist in the bug tracker."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    void addBug(Bug bug);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Replaces the given bug {@code target} with {@code editedBug}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * {@code target} must exist in the bug tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The bug identity of {@code editedBug} must not be the same as another existing bug in the bug tracker."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    void setBug(Bug target, Bug editedBug);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered bug list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    ObservableList\u003cBug\u003e getFilteredBugList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns a filterd bug list by state"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    ObservableList\u003cBug\u003e getFilteredBugListByState(State state);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Updates the filter of the filtered bug list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    void updateFilteredBugList(Predicate\u003cBug\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 6,
      "duynguyen24501": 10,
      "PhongTran98": 10,
      "-": 62,
      "Rogerlys": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Represents the in-memory model of the bug tracker data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final KanBugTracker kanBugTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private final FilteredList\u003cBug\u003e filteredBugs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Initializes a ModelManager with the given kanBugTracker and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public ModelManager(ReadOnlyKanBugTracker kanBugTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        requireAllNonNull(kanBugTracker, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        logger.fine(\"Initializing with bug tracker: \" + kanBugTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.kanBugTracker \u003d new KanBugTracker(kanBugTracker);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        filteredBugs \u003d new FilteredList\u003c\u003e(this.kanBugTracker.getBugList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this(new KanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public Path getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return userPrefs.getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setKanBugTrackerFilePath(Path kanBugTrackerFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireNonNull(kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        userPrefs.setKanBugTrackerFilePath(kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d KanBugTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setKanBugTracker(ReadOnlyKanBugTracker kanBugTracker) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.kanBugTracker.resetData(kanBugTracker);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public ReadOnlyKanBugTracker getKanBugTracker() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return kanBugTracker;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean hasBug(Bug bug) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(bug);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return kanBugTracker.hasBug(bug);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void deleteBug(Bug target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanBugTracker.removeBug(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void addBug(Bug bug) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanBugTracker.addBug(bug);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setBug(Bug target, Bug editedBug) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireAllNonNull(target, editedBug);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanBugTracker.setBug(target, editedBug);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Bug List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Bug} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * {@code versionedKanBugTracker}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public ObservableList\u003cBug\u003e getFilteredBugList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return filteredBugs;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns an a filtered list of bugs backed by the internal list of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * {@code versionedKanBugTracker}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public ObservableList\u003cBug\u003e getFilteredBugListByState(State state) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        FilteredList\u003cBug\u003e filteredBugsByState \u003d new FilteredList\u003c\u003e(filteredBugs);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        filteredBugsByState.setPredicate(bug -\u003e bug.getState().equals(state));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return filteredBugsByState;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void updateFilteredBugList(Predicate\u003cBug\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        filteredBugs.setPredicate(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return kanBugTracker.equals(other.kanBugTracker)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 filteredBugs.equals(other.filteredBugs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "PhongTran98": 10,
      "duynguyen24501": 21,
      "-": 112,
      "Rogerlys": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyKanBugTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Unmodifiable view of an bug tracker"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public interface ReadOnlyKanBugTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns an unmodifiable view of the bugs list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * This list will not contain any duplicate bugs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    ObservableList\u003cBug\u003e getBugList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 3,
      "PhongTran98": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Path getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Path kanBugTrackerFilePath \u003d Paths.get(\"data\" , \"kanbugtracker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        setKanBugTrackerFilePath(newUserPrefs.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Path getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return kanBugTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setKanBugTrackerFilePath(Path kanBugTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        requireNonNull(kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.kanBugTrackerFilePath \u003d kanBugTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u0026\u0026 kanBugTrackerFilePath.equals(o.kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return Objects.hash(guiSettings, kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + kanBugTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/Bug.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Represents a Bug in the bug tracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class Bug {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private final State state;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    private final Optional\u003cNote\u003e optionalNote;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public Bug(Name name, State state, Description description, Optional\u003cNote\u003e optionalNote, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "               Priority priority) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        requireAllNonNull(name, state, description, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        this.optionalNote \u003d optionalNote;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public State getState() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public Optional\u003cNote\u003e getOptionalNote() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return optionalNote;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns true if both bugs of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * This defines a weaker notion of equality between two bugs."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public boolean isSameBug(Bug otherBug) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (otherBug \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return otherBug !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 otherBug.getName().equals(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                \u0026\u0026 otherBug.getState().equals(getState());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns true if both bugs have the same identity and data fields."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * This defines a stronger notion of equality between two bugs."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!(other instanceof Bug)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug otherBug \u003d (Bug) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return otherBug.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                \u0026\u0026 otherBug.getState().equals(getState())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 otherBug.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                \u0026\u0026 otherBug.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                \u0026\u0026 otherBug.getOptionalNote().equals(getOptionalNote())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 otherBug.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return Objects.hash(name, state, description, optionalNote, tags, priority);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                .append(\" State: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                .append(getState())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (getOptionalNote() !\u003d null \u0026\u0026 getOptionalNote().isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            builder.append(\" Note: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                   .append(getOptionalNote().get().toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (!getPriority().isNull()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            builder.append(\" Priority: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                   .append(getPriority());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean compareState(State state) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return this.state.equals(state);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 15,
      "the-reefshark": 31,
      "PhongTran98": 12,
      "-": 71,
      "Rogerlys": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/BugContainsQueryStringPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugContainsQueryStringPredicate implements Predicate\u003cBug\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final String queryString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugContainsQueryStringPredicate(String queryString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.queryString \u003d queryString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean test(Bug bug) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return StringUtil.containsQueryStringIgnoreCase(bug.getName().fullName, queryString)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                || StringUtil.containsQueryStringIgnoreCase(bug.getDescription().value, queryString)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                || bug.getTags().stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .anyMatch(tag -\u003e StringUtil.containsQueryStringIgnoreCase(tag.tagName, queryString));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return other \u003d\u003d this // shortcut circuit if the same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                || (other instanceof BugContainsQueryStringPredicate) // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u0026\u0026 queryString.equals(((BugContainsQueryStringPredicate) other).queryString); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " * Represents a Bug\u0027s description in the bug tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 13,
      "the-reefshark": 3,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Represents a Bug\u0027s name in the bug tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    // MAX_LENGTH \u003e 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final int MAX_LENGTH \u003d 70;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, between 1 and 70 characters, inclusively.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"[\\\\p{Alnum}][\\\\p{Alnum} ]{0,%d}\", MAX_LENGTH - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        checkArgument(isValidNote(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "PhongTran98": 6,
      "the-reefshark": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * Tests that a {@code Bug}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBug\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public boolean test(Bug bug) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(bug.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " * Represents a Bug\u0027s optional note in the bug tracker."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Note can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Constructs an {@code Note}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * @param note A valid note."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public Note(String note) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        value \u003d note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Returns true if a given string is a valid note."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                \u0026\u0026 value.equals(((Note) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "the-reefshark": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Represents a bug\u0027s priority (low, medium or high)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority level should only be either low, medium or high.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String EMPTY_PRIORITY \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String LOW_REGEX \u003d \"((?i)\\\\blow\\\\b)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String MEDIUM_REGEX \u003d \"((?i)\\\\bmedium\\\\b)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String HIGH_REGEX \u003d \"((?i)\\\\bhigh\\\\b)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            LOW_REGEX + \"|\" + MEDIUM_REGEX + \"|\" + HIGH_REGEX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Construct a (@code Priority} object (low, medium or high priority)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.priority \u003d priority.toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Construct a {@code Priority} object (priority not indicated)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Priority() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        priority \u003d Priority.EMPTY_PRIORITY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return priority.equals(Priority.EMPTY_PRIORITY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return isNull() ? \"\" : priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                || (other instanceof Priority)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u0026\u0026 this.priority.equals(((Priority) other).priority);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return priority.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Represents a Bug\u0027s state in the bug tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidState(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public enum Value {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        BACKLOG,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        ONGOING,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        DONE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"States should be of the four allowed states:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"1. backlog\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"2. todo\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"3. ongoing\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            + \"4. done\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String BACKLOG_REGEX \u003d \"((?i)\\\\bbacklog\\\\b)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String TODO_REGEX \u003d \"((?i)\\\\btodo\\\\b)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String ONGOING_REGEX \u003d \"((?i)\\\\bongoing\\\\b)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String DONE_REGEX \u003d \"((?i)\\\\bdone\\\\b)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            BACKLOG_REGEX + \"|\" + TODO_REGEX + \"|\" + ONGOING_REGEX + \"|\" + DONE_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public final Value value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Constructs an {@code State}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param state A valid state address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public State(String state) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        checkArgument(isValidState(state), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        value \u003d getValueOfState(state.toLowerCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns if a given string is a valid state."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static boolean isValidState(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public Value getValueOfState(String state) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case \"backlog\" :"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return Value.BACKLOG;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return Value.TODO;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case \"ongoing\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return Value.ONGOING;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return Value.DONE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public String getStringOfValue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case BACKLOG:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return \"backlog\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return \"todo\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case ONGOING:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return \"ongoing\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return \"done\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new IllegalArgumentException(\"Illegal state object!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return getStringOfValue();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                || (other instanceof State // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                \u0026\u0026 value.equals(((State) other).value)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 53,
      "PhongTran98": 1,
      "-": 34,
      "Rogerlys": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/UniqueBugList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.exceptions.BugNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.exceptions.DuplicateBugException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * A list of bugs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * A bug is considered unique by comparing using {@code Bug#isSameBug(Bug)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * bugs uses Bug#isSameBug(Bug) for equality so as to ensure that the bug being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * unique in terms of identity in the UniqueBugList. However, the removal of a bug uses Bug#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * as to ensure that the bug with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * @see Bug#isSameBug(Bug)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class UniqueBugList implements Iterable\u003cBug\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final ObservableList\u003cBug\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final ObservableList\u003cBug\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns true if the list contains an equivalent bug as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean contains(Bug toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBug);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Adds a bug to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The bug must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void add(Bug toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new DuplicateBugException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Replaces the bug {@code target} in the list with {@code editedBug}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The bug identity of {@code editedBug} must not be the same as another existing bug in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug(Bug target, Bug editedBug) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireAllNonNull(target, editedBug);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new BugNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!target.isSameBug(editedBug) \u0026\u0026 contains(editedBug)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new DuplicateBugException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        internalList.set(index, editedBug);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Removes the equivalent bug from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * The bug must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void remove(Bug toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new BugNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setBugs(UniqueBugList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Replaces the contents of this list with {@code bugs}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * {@code bugs} must not contain duplicate bugs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void setBugs(List\u003cBug\u003e bugs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        requireAllNonNull(bugs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!bugsAreUnique(bugs)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            throw new DuplicateBugException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        internalList.setAll(bugs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public ObservableList\u003cBug\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public Iterator\u003cBug\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                || (other instanceof UniqueBugList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBugList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns true if {@code bugs} contains only unique bugs."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private boolean bugsAreUnique(List\u003cBug\u003e bugs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        for (int i \u003d 0; i \u003c bugs.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bugs.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                if (bugs.get(i).isSameBug(bugs.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 26,
      "PhongTran98": 22,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/exceptions/BugNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model.bug.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Signals that the operation is unable to find the specified bug."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 5,
      "PhongTran98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bug/exceptions/DuplicateBugException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model.bug.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Signals that the operation will result in duplicate Bugs (Bugs are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class DuplicateBugException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public DuplicateBugException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        super(\"Operation would result in duplicate bugs\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 3,
      "PhongTran98": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Represents a Tag in the bug tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final int MAX_LENGTH \u003d 30;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \"Tags names should be alphanumeric and no more than 30 characters.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"[\\\\p{Alnum}]{1,%d}\", MAX_LENGTH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Contains utility methods for populating {@code KanBugTracker} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static Bug[] getSampleBugs() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new Bug[]{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new Bug(new Name(\"UI Homepage bug\"), new State(\"backlog\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Description(\"Homepage UI does not scale correctly\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Optional.empty(), getTagSet(\"UI\"), new Priority()),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new Bug(new Name(\"AddCommandParser\"), new State(\"todo\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Description(\"Parser to add command insert incorrect input\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Optional.empty(), getTagSet(\"Parser\", \"Add\"), new Priority()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new Bug(new Name(\"Delete command\"), new State(\"done\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Description(\"Delete command removes incorrect index\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Optional.empty(), getTagSet(\"Delete\"), new Priority()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new Bug(new Name(\"Exit command\"), new State(\"ongoing\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Description(\"Data is not being saved\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Optional.empty(), getTagSet(\"Storage\", \"Exit\"), new Priority()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new Bug(new Name(\"Help Command\"), new State(\"done\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Description(\"Help command does not appear when executed\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Optional.empty(), getTagSet(\"help\"), new Priority()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new Bug(new Name(\"List command\"), new State(\"backlog\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Description(\"List command does not show the full list\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Optional.empty(), getTagSet(\"List\"), new Priority())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static ReadOnlyKanBugTracker getSampleKanBugTracker() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTracker sampleAb \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        for (Bug sampleBug : getSampleBugs()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            sampleAb.addBug(sampleBug);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                       .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                       .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "the-reefshark": 7,
      "duynguyen24501": 5,
      "PhongTran98": 5,
      "-": 27,
      "Rogerlys": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBug.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * Jackson-friendly version of {@link Bug}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "class JsonAdaptedBug {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Bug\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private final String state;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Constructs a {@code JsonAdaptedBug} with the given bug details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public JsonAdaptedBug(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                          @JsonProperty(\"state\") String state,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                          @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                          @JsonProperty(\"note\") String note,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                          @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                          @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Converts a given {@code Bug} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public JsonAdaptedBug(Bug source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        state \u003d source.getState().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Optional\u003cNote\u003e tempNote \u003d source.getOptionalNote();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        this.note \u003d (tempNote !\u003d null \u0026\u0026 tempNote.isPresent()) ? tempNote.get().value : \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        priority \u003d source.getPriority().getValue();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Converts this Jackson-friendly adapted bug object into the model\u0027s {@code Bug} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted bug."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public Bug toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        final List\u003cTag\u003e bugTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            bugTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (!Name.isValidNote(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (state \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, State.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!State.isValidState(state)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new IllegalValueException(State.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        final State modelState \u003d new State(state);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!Priority.isValidPriority(priority) \u0026\u0026 !priority.equals(Priority.EMPTY_PRIORITY)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        final Priority modelPriority \u003d priority.equals(Priority.EMPTY_PRIORITY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                ? new Priority() : new Priority(priority);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                    Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        final Optional\u003cNote\u003e modelOptionalNote \u003d note.isBlank() ? Optional.empty() : Optional.of(new Note(note));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(bugTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Bug(modelName, modelState, modelDescription, modelOptionalNote, modelTags, modelPriority);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 19,
      "the-reefshark": 24,
      "duynguyen24501": 3,
      "PhongTran98": 19,
      "-": 57,
      "Rogerlys": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonKanBugTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * A class to access KanBugTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class JsonKanBugTrackerStorage implements KanBugTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonKanBugTrackerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public JsonKanBugTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Path getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return readKanBugTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Similar to {@link #readKanBugTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Optional\u003cJsonSerializableKanBugTracker\u003e jsonKanBugTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                filePath, JsonSerializableKanBugTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!jsonKanBugTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            return Optional.of(jsonKanBugTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        saveKanBugTracker(kanBugTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Similar to {@link #saveKanBugTracker(ReadOnlyKanBugTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        requireNonNull(kanBugTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableKanBugTracker(kanBugTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 5,
      "PhongTran98": 15,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableKanBugTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * An Immutable KanBugTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "@JsonRootName(value \u003d \"kanbugtracker\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "class JsonSerializableKanBugTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUG \u003d \"Bugs list contains duplicate bug(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final List\u003cJsonAdaptedBug\u003e bugs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Constructs a {@code JsonSerializableKanBugTracker} with the given bugs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public JsonSerializableKanBugTracker(@JsonProperty(\"bugs\") List\u003cJsonAdaptedBug\u003e bugs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.bugs.addAll(bugs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Converts a given {@code ReadOnlyKanBugTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableKanBugTracker}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public JsonSerializableKanBugTracker(ReadOnlyKanBugTracker source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugs.addAll(source.getBugList().stream().map(JsonAdaptedBug::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Converts this KanBug tracker into the model\u0027s {@code KanBugTracker} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanBugTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTracker kanBugTracker \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        for (JsonAdaptedBug jsonAdaptedBug : bugs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            Bug bug \u003d jsonAdaptedBug.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            if (kanBugTracker.hasBug(bug)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            kanBugTracker.addBug(bug);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return kanBugTracker;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "duynguyen24501": 10,
      "PhongTran98": 13,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/KanBugTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * Represents a storage for {@link KanBugTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public interface KanBugTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Path getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns KanBugTracker data as a {@link ReadOnlyKanBugTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * @see #getKanBugTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Saves the given {@link ReadOnlyKanBugTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * @param kanBugTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * @see #saveKanBugTracker(ReadOnlyKanBugTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 5,
      "PhongTran98": 9,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public interface Storage extends KanBugTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Path getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 2,
      "PhongTran98": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Manages storage of KanBugTracker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private KanBugTrackerStorage kanBugTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code KanBugTrackerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public StorageManager(KanBugTrackerStorage kanBugTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.kanBugTrackerStorage \u003d kanBugTrackerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d KanBugTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Path getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return kanBugTrackerStorage.getKanBugTrackerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return readKanBugTracker(kanBugTrackerStorage.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker(Path filePath)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return kanBugTrackerStorage.readKanBugTracker(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        saveKanBugTracker(kanBugTracker, kanBugTrackerStorage.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        kanBugTrackerStorage.saveKanBugTracker(kanBugTracker, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 4,
      "PhongTran98": 14,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BugCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * An UI component that displays information of a {@code Bug}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String FXML \u003d \"BugListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public final Bug bug;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Label state;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private HBox noteContainer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Creates a {@code BugCard} with the given {@code Bug} and index to display."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugCard(Bug bug, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.bug \u003d bug;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        name.setText(bug.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        description.setText(bug.getDescription().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        state.setText(bug.getState().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (!bug.getPriority().isNull()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            priority.setText(\"  \" + bug.getPriority().getValue().toUpperCase() + \"  \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            switch (bug.getPriority().getValue()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                priority.setStyle(\"-fx-background-color: #E3C012;\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            case \"medium\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                priority.setStyle(\"-fx-background-color: #E15E13;\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                priority.setStyle(\"-fx-background-color: #D81616;\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            priority.setVisible(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            priority.setManaged(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        if (bug.getOptionalNote().isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            note.setText(bug.getOptionalNote().get().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            note.setWrapText(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            noteContainer.setVisible(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            noteContainer.setManaged(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            note.setVisible(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            note.setManaged(false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        bug.getTags().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!(other instanceof BugCard)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugCard card \u003d (BugCard) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u0026\u0026 bug.equals(card.bug);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "duynguyen24501": 9,
      "PhongTran98": 35,
      "-": 59,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BugCardKanban.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * An UI component that displays information of a {@code Bug}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugCardKanban extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String FXML \u003d \"BugListCardKanban.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public final Bug bug;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Creates a {@code BugCardKanban} with the given {@code Bug} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugCardKanban(Bug bug, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.bug \u003d bug;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Improve the UI of \u0027name\u0027 field"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        name.setText(bug.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Improve the UI of \u0027description\u0027 field"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        description.setText(bug.getDescription().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        description.setMaxHeight(60);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Improve the UI of \u0027priority\u0027 field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!bug.getPriority().isNull()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            priority.setText(\"  \" + bug.getPriority().getValue().toUpperCase() + \"  \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            switch (bug.getPriority().getValue()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                priority.setStyle(\"-fx-background-color: #E3C012;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            case \"medium\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                priority.setStyle(\"-fx-background-color: #E15E13;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                priority.setStyle(\"-fx-background-color: #D81616;\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            priority.setVisible(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            priority.setManaged(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        bug.getTags().stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (!(other instanceof BugCardKanban)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugCardKanban card \u003d (BugCardKanban) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u0026\u0026 bug.equals(card.bug);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 101,
      "PhongTran98": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BugListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Panel containing the list of bugs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String FXML \u003d \"BugListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BugListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private ListView\u003cBug\u003e bugListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Creates a {@code BugListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugListPanel(ObservableList\u003cBug\u003e bugList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListView.setItems(bugList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListView.setCellFactory(listView -\u003e new BugListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Bug} using a {@code BugCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    class BugListViewCell extends ListCell\u003cBug\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        protected void updateItem(Bug bug, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            super.updateItem(bug, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            if (empty || bug \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                setGraphic(new BugCard(bug, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 42,
      "PhongTran98": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BugListPanelKanban.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * Panel containing the list of bugs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugListPanelKanban extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String FXML \u003d \"BugListPanelKanban.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BugListPanelKanban.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private ListView\u003cBug\u003e bugListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Creates a {@code BugListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugListPanelKanban(ObservableList\u003cBug\u003e bugList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        bugListView.setItems(bugList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        bugListView.setCellFactory(listView -\u003e new BugListViewCellKanban());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Bug} using a {@code BugCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    class BugListViewCellKanban extends ListCell\u003cBug\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        protected void updateItem(Bug bug, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            super.updateItem(bug, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            if (empty || bug \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                setGraphic(new BugCardKanban(bug, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w17-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String FEATURES_ONE \u003d \"Words in UPPER_CASE are parameters to be supplied by the user\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String FEATURES_TWO \u003d \"Items in [...] are optional\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String SWITCH_ACTION \u003d \"switch\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String SWITCH_FORMAT \u003d \"switch\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String LIST_ACTION \u003d \"list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String LIST_FORMAT \u003d \"list\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String SEARCH_ACTION \u003d \"search\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String SEARCH_FORMAT \u003d \"search q/QUERYSTRING\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String ADD_ACTION \u003d \"add\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String ADD_FORMAT \u003d \"add n/NAME d/DESCRIPTION [s/STATE] [note/NOTE] [t/TAG]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String DELETE_ACTION \u003d \"delete\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String DELETE_FORMAT \u003d \"delete INDEX [c/COLUMN]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String EDIT_ACTION \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String EDIT_FORMAT \u003d \"edit INDEX [c/COLUMN] [n/NEW_NAME] [d/NEW_DESCRIPTION] [note/NOTE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                                                     + \"[t/TAG]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String EDIT_TAG_ACTION \u003d \"editTag\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String EDIT_TAG_FORMAT \u003d \"editTag INDEX [c/COLUMN] ot/OLD_TAG nt/NEW_TAG\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String ADD_TAG_ACTION \u003d \"addTag\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String ADD_TAG_FORMAT \u003d \"addTag INDEX [c/COLUMN] nt/NEW_TAG\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String CLEAR_ACTION \u003d \"clear\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String CLEAR_FORMAT \u003d \"clear\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MOVE_ACTION \u003d \"move\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String MOVE_FORMAT \u003d \"move INDEX [c/COLUMN] s/STATE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String EXIT_ACTION \u003d \"exit\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String EXIT_FORMAT \u003d \"exit\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String HELP_MESSAGE_HEADER \u003d FEATURES_ONE + \"\\n\" + FEATURES_TWO;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String HELP_MESSAGE_FOOTER \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            \"For a more detailed guide, refer to: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Label helpHeader;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Label helpFooter;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private TableColumn\u003cTable, String\u003e action;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private TableColumn\u003cTable, String\u003e format;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private TableView\u003cTable\u003e tableID;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private ObservableList\u003cTable\u003e data \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            FXCollections.observableArrayList("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(SWITCH_ACTION, SWITCH_FORMAT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(LIST_ACTION, LIST_FORMAT),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(SEARCH_ACTION, SEARCH_FORMAT),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(ADD_ACTION, ADD_FORMAT),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(DELETE_ACTION, DELETE_FORMAT),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(EDIT_ACTION, EDIT_FORMAT),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(EDIT_TAG_ACTION, EDIT_TAG_FORMAT),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(ADD_TAG_ACTION, ADD_TAG_FORMAT),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(CLEAR_ACTION, CLEAR_FORMAT),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(MOVE_ACTION, MOVE_FORMAT),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    new Table(EXIT_ACTION, EXIT_FORMAT));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        action.setCellValueFactory(new PropertyValueFactory\u003cTable, String\u003e(\"action\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        format.setCellValueFactory(new PropertyValueFactory\u003cTable, String\u003e(\"format\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        helpHeader.setText(HELP_MESSAGE_HEADER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tableID.setItems(data);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        helpFooter.setText(HELP_MESSAGE_FOOTER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 70,
      "duynguyen24501": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/KanbanPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Panel containing the list of bugs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class KanbanPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String FXML \u003d \"KanbanPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BugListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private StackPane bugListPanelPlaceholderBacklog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private StackPane bugListPanelPlaceholderTodo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private StackPane bugListPanelPlaceholderOngoing;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private StackPane bugListPanelPlaceholderDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Creates a {@code BugListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanbanPanel(Logic logic) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        fillInner();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private void fillInner() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugListPanelKanban bugListPanelBackLog \u003d new BugListPanelKanban(logic.getFilteredBugListByState(\"backlog\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListPanelPlaceholderBacklog.getChildren().add(bugListPanelBackLog.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugListPanelKanban bugListPanelTodo \u003d new BugListPanelKanban(logic.getFilteredBugListByState(\"todo\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListPanelPlaceholderTodo.getChildren().add(bugListPanelTodo.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugListPanelKanban bugListPanelOngoing \u003d new BugListPanelKanban(logic.getFilteredBugListByState(\"ongoing\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListPanelPlaceholderOngoing.getChildren().add(bugListPanelOngoing.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugListPanelKanban bugListPanelDone \u003d new BugListPanelKanban(logic.getFilteredBugListByState(\"done\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListPanelPlaceholderDone.getChildren().add(bugListPanelDone.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 48,
      "duynguyen24501": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private BugListPanel bugListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private KanbanPanel kanbanPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private MenuItem escMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private StackPane bugListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private StackPane kanbanPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanbanPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanbanPanelPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        primaryStage.addEventHandler(KeyEvent.KEY_RELEASED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            if (KeyCode.ESCAPE \u003d\u003d event.getCode()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        bugListPanel \u003d new BugListPanel(logic.getFilteredBugList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bugListPanelPlaceholder.getChildren().add(bugListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanbanPanel \u003d new KanbanPanel(logic);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanbanPanelPlaceholder.getChildren().add(kanbanPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void handleBoard() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        if (kanbanPanelPlaceholder.isManaged()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            kanbanPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            kanbanPanelPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            bugListPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            bugListPanelPlaceholder.setManaged(true);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            kanbanPanelPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            kanbanPanelPlaceholder.setManaged(true);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            bugListPanelPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            bugListPanelPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugListPanel getBugListPanel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return bugListPanel;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (commandResult.isShowBoard()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                handleBoard();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 18,
      "duynguyen24501": 14,
      "-": 192,
      "Rogerlys": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Table.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class Table {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private SimpleStringProperty action;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private SimpleStringProperty format;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Creates an entry of the table"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param action String under action column of Table"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * @param format String under format column of Table"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public Table(String action, String format) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.action \u003d new SimpleStringProperty(action);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.format \u003d new SimpleStringProperty(format);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public String getAction() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return action.get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void setAction(String a) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.action.set(a);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return format.get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void setFormat(String f) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        this.format.set(f);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/kanbug_logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/main/resources/view/BugListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cInsets top\u003d\"7\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cLabel fx:id\u003d\"priority\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cLabel fx:id\u003d\"state\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$state\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "      \u003cHBox fx:id\u003d\"noteContainer\" style\u003d\"-fx-background-color: #cccfeb; -fx-background-radius: 8; -fx-padding: 2 2 2 2;\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cLabel fx:id\u003d\"note\" style\u003d\"-fx-text-fill: black; -fx-font-family: Segoe UI Light; -fx-font-size: 13; \"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "PhongTran98": 6,
      "duynguyen24501": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/BugListCardKanban.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 32,
      "PhongTran98": 3
    }
  },
  {
    "path": "src/main/resources/view/BugListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \u003cListView fx:id\u003d\"bugListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/BugListPanelKanban.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  \u003cListView fx:id\u003d\"bugListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-font-family: \"Courier New\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-font-family: \"Courier New\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "#filterField, #bugListPanel, #bugWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    -fx-background-color: #B9BFFF;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "#priority {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-background-color: #517a47;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ".priority {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "#state {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    -fx-background-color: #4066E0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ".state {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 5,
      "PhongTran98": 17,
      "duynguyen24501": 5,
      "-": 352,
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "         \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpHeader\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                        \u003cInsets topRightBottomLeft\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u003cTableView fx:id\u003d\"tableID\" prefHeight\u003d\"210.0\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003ccolumns\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                        \u003cTableColumn prefWidth\u003d\"100.0\" text\u003d\"Action\" fx:id\u003d\"action\" \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                            \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                                \u003cPropertyValueFactory property\u003d\"action\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                            \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                        \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                        \u003cTableColumn prefWidth\u003d\"500.0\" text\u003d\"Format\" fx:id\u003d\"format\" \u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                            \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                                \u003cPropertyValueFactory property\u003d\"format\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                            \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                        \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003c/columns\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u003c/TableView\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpFooter\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                        \u003cInsets topRightBottomLeft\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 33,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/KanbanPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c?import javafx.scene.shape.Line?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "\u003cHBox minWidth\u003d\"450\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cLabel fx:id\u003d\"backlogLabel\" contentDisplay\u003d\"CENTER\" text\u003d\"Backlog\" textAlignment\u003d\"CENTER\" styleClass\u003d\"state\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bugListPanelPlaceholderBacklog\" HBox.Hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cLine/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cLabel fx:id\u003d\"todoLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"state\" text\u003d\"Todo\" textAlignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bugListPanelPlaceholderTodo\" HBox.Hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cLine /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cLabel fx:id\u003d\"ongoingLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"state\" text\u003d\"Ongoing\" textAlignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bugListPanelPlaceholderOngoing\" HBox.Hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cLine /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cLabel fx:id\u003d\"doneLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"state\" text\u003d\"Done\" textAlignment\u003d\"RIGHT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bugListPanelPlaceholderDone\" HBox.Hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 55,
      "duynguyen24501": 2
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "         title\u003d\"Kanbug Tracker\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003cImage url\u003d\"@/images/kanbug_logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"escMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003cVBox fx:id\u003d\"bugList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "          \u003cStackPane fx:id\u003d\"kanbanPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "          \u003cStackPane fx:id\u003d\"bugListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "duynguyen24501": 8,
      "-": 50,
      "Rogerlys": 2
    }
  },
  {
    "path": "src/test/data/JsonKanBugTrackerStorageTest/invalidAndValidBugKanBugTracker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"bugs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"name\": \"Valid Bug\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"description\": \"Valid input\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\": \"\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\": \"Bug With Invalid state field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"state\": \"Invalid state\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"description\": \"Invalid input\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\": \"\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 2,
      "the-reefshark": 4,
      "duynguyen24501": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonKanBugTrackerStorageTest/invalidBugKanBugTracker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"bugs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"name\": \"Bug with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"state\": \"backlog\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"description\": \"Invalid name field bug\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\": \"\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 2,
      "duynguyen24501": 1,
      "the-reefshark": 2,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableKanBugTrackerTest/duplicateBugKanBugTracker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"bugs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\": \"Exit command hangs\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\": \"done\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\": \"Exit command did not work normally\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"tagged\": [ \"Command\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\": \"low\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\": \"Exit command hangs\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\": \"done\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"description\": \"Need to implement Exit command again\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\": \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 2,
      "PhongTran98": 5,
      "duynguyen24501": 3,
      "the-reefshark": 2,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableKanBugTrackerTest/duplicateBugKanBugTracker2.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  \"bugs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\": \"Ui bug\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"state\": \"done\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\": \"Ui displays the messages wrongly\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"note\" : \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\": [ \"Ui\", \"frontend\", \"JavaFx\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\": \"Search command bug\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"state\": \"ongoing\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\": \"The prefixes are incorrectly parsed\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\": [\"Java\",\"backend\",\"Command\"],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"note\" : \"\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 15
    }
  },
  {
    "path": "src/test/data/JsonSerializableKanBugTrackerTest/invalidBugKanBugTracker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"bugs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\": \"Ui display bug\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"state\": \"invalid state\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\": \"The window application overflows\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "duynguyen24501": 3,
      "the-reefshark": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableKanBugTrackerTest/typicalBugsKanBugTracker.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"_comment\": \"KanBugTracker save file which contains the same Bug values as in TypicalBugs#getTypicalKanBugTracker()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"bugs\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Add command bug\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"todo\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"Cannot add a bug with multiple tags\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is a note\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"low\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\" : [\"AddCommand\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Edit command parsing\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"todo\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"The prefixes of edit command are wrongly parsed\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is the second note\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\" : [ \"EditCommand\", \"backend\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Main window overflows\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"done\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"If there is a huge number of bugs, the main window cannot display\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is the third note\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"low\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\" : [\"Ui\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Search command test\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"ongoing\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"Need to add more search test to cover all equivalence partition\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is the fourth note\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\" : [\"SearchCommand\", \"backend\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Exit command hangs\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"done\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"Exit command hangs more than 10 seconds\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is the fifth note\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"medium\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Note rendering\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"ongoing\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"Note field does not show up in the main window\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is the sixth note\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"low\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"tagged\" : [\"JavaFx\",\"Ui\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"name\" : \"Jar file does not work\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    \"state\" : \"backlog\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    \"description\" : \"Current jar file cannot work on Mac OS system\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    \"note\" : \"this is the seventh note\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    \"priority\" : \"high\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 7,
      "PhongTran98": 9,
      "duynguyen24501": 19,
      "the-reefshark": 7,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"kanBugTrackerFilePath\" : \"kanbugtracker.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "  \"kanBugTrackerFilePath\" : \"kanbugtracker.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        final Index fifthBugIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(fifthBugIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(fifthBugIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(fifthBugIndex.equals(fifthBugIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(fifthBugIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(fifthBugIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(fifthBugIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGFIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGFOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGNINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGSEVEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGSIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTHREE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.storage.JsonKanBugTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class LogicManagerListTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        JsonKanBugTrackerStorage kanBugTrackerStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new JsonKanBugTrackerStorage(temporaryFolder.resolve(\"kanbugtracker.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        StorageManager storage \u003d new StorageManager(kanBugTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void addBugs() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGTHREE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGFOUR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGFIVE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGSIX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGSEVEN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGEIGHT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGNINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.addBug(BUGTEN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void filteredBugListTestSameState() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e todoList \u003d logic.getFilteredBugListByState(\"todo\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e backlogList \u003d logic.getFilteredBugListByState(\"backlog\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e ongoingList \u003d logic.getFilteredBugListByState(\"ongoing\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e doneList \u003d logic.getFilteredBugListByState(\"done\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertStateEquals(todoList, new State(\"todo\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertStateEquals(backlogList, new State(\"backlog\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertStateEquals(doneList, new State(\"done\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertStateEquals(ongoingList, new State(\"ongoing\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void filterBugListTestIncorrectState() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e allStateList \u003d logic.getFilteredBugList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e todoList \u003d logic.getFilteredBugListByState(\"todo\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e ongoingList \u003d logic.getFilteredBugListByState(\"ongoing\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(allStateList, new State(\"todo\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(allStateList, new State(\"backlog\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(allStateList, new State(\"ongoing\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(allStateList, new State(\"done\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(todoList, new State(\"ongoing\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(todoList, new State(\"backlog\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(todoList, new State(\"done\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(ongoingList, new State(\"backlog\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(ongoingList, new State(\"todo\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assetStateNotEquals(ongoingList, new State(\"backlog\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void assertStateEquals(ObservableList\u003cBug\u003e list, State state) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        for (Bug bug: list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            assertEquals(bug.getState(), state);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void assetStateNotEquals(ObservableList\u003cBug\u003e list, State state) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        boolean hasOtherState \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        for (Bug bug: list) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (!bug.getState().equals(state)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                hasOtherState \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(hasOtherState);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PARSER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_PARSER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PARSER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATE_DESC_PARSER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.storage.JsonKanBugTrackerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonKanBugTrackerStorage kanBugTrackerStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                new JsonKanBugTrackerStorage(temporaryFolder.resolve(\"kanbugtracker.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        StorageManager storage \u003d new StorageManager(kanBugTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // Setup LogicManager with JsonKanBugTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonKanBugTrackerStorage kanBugTrackerStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                new JsonKanBugTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionKanBugTracker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        StorageManager storage \u003d new StorageManager(kanBugTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_PARSER + STATE_DESC_PARSER + PRIORITY_DESC_PARSER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_PARSER + DESCRIPTION_DESC_PARSER;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug expectedBug \u003d new BugBuilder(BUGTEN).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.addBug(expectedBug);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void getFilteredBugList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBugList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static class JsonKanBugTrackerIoExceptionThrowingStub extends JsonKanBugTrackerStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        private JsonKanBugTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        public void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 3,
      "duynguyen24501": 9,
      "the-reefshark": 3,
      "PhongTran98": 11,
      "-": 134,
      "Rogerlys": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_newBug_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug validBug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.addBug(validBug);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBug), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBug), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_duplicateBug_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug bugInList \u003d model.getKanBugTracker().getBugList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertCommandFailure(new AddCommand(bugInList), model, AddCommand.MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 5,
      "duynguyen24501": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void constructor_nullBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_bugAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ModelStubAcceptingBugAdded modelStub \u003d new ModelStubAcceptingBugAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug validBug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBug).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBug), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(Arrays.asList(validBug), modelStub.bugsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_duplicateBug_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug validBug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBug);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBug(validBug);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_BUG, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug alice \u003d new BugBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug bob \u003d new BugBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // different bug -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public Path getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void setKanBugTrackerFilePath(Path kanBugTrackerFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void addBug(Bug bug) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void setKanBugTracker(ReadOnlyKanBugTracker newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public ReadOnlyKanBugTracker getKanBugTracker() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public boolean hasBug(Bug bug) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void deleteBug(Bug target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void setBug(Bug target, Bug editedBug) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        public ObservableList\u003cBug\u003e getFilteredBugList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        public ObservableList\u003cBug\u003e getFilteredBugListByState(State state) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void updateFilteredBugList(Predicate\u003cBug\u003e predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * A Model stub that contains a single bug."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private class ModelStubWithBug extends ModelStub {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        private final Bug bug;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ModelStubWithBug(Bug bug) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            requireNonNull(bug);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            this.bug \u003d bug;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public boolean hasBug(Bug bug) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            requireNonNull(bug);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            return this.bug.isSameBug(bug);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * A Model stub that always accept the bug being added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private class ModelStubAcceptingBugAdded extends ModelStub {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        final ArrayList\u003cBug\u003e bugsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public boolean hasBug(Bug bug) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            requireNonNull(bug);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            return bugsAdded.stream().anyMatch(bug::isSameBug);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public void addBug(Bug bug) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            requireNonNull(bug);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            bugsAdded.add(bug);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public ReadOnlyKanBugTracker getKanBugTracker() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            return new KanBugTracker();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 14,
      "duynguyen24501": 26,
      "PhongTran98": 9,
      "-": 148,
      "Rogerlys": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTagByStateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.AddTagCommand.addTagsToBug;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class AddTagByStateCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private State initialState \u003d VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Tag newTagLogic \u003d new Tag(VALID_TAG_LOGIC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Tag newTagComponent \u003d new Tag(VALID_TAG_COMPONENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    // tests the case where the user inputs the wrong column as well since it would be considered out of bounds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_invalidBugIndexFilteredListByState_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State newState \u003d VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommand \u003d new AddTagByStateCommand(outOfBoundIndex, tagsToAdd, newState);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertCommandFailure(addTagByStateCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_allFieldsSpecifiedFilteredListByState_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            State initialState \u003d VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug bug \u003d model.getFilteredBugListByState(initialState).get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug tagAddedBug \u003d addTagsToBug(bug, tagsToAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            AddTagByStateCommand addTagByStateCommand \u003d new AddTagByStateCommand(INDEX_FIRST_BUG, tagsToAdd,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    initialState);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_BUG_SUCCESS, tagAddedBug);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            expectedModel.setBug(model.getFilteredBugListByState(initialState).get(0), tagAddedBug);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertCommandSuccess(addTagByStateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_validTag_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug bug \u003d model.getFilteredBugListByState(initialState).get(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Name bugName \u003d bug.getName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            State bugState \u003d bug.getState();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Description bugDescription \u003d bug.getDescription();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Priority bugPriority \u003d bug.getPriority();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Optional\u003cNote\u003e optionalNote \u003d bug.getOptionalNote();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Set\u003cTag\u003e tagsOfBug \u003d new HashSet\u003cTag\u003e(bug.getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            tagsOfBug.add(newTagLogic);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            //copy bug details to reflect edited bug"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug editedBug \u003d new Bug(bugName, bugState, bugDescription, optionalNote, tagsOfBug, bugPriority);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(editedBug, AddTagCommand.addTagsToBug(bug, tagsToAdd));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_invalidTag_commandExceptionThrown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug validBug \u003d model.getFilteredBugListByState(initialState).get(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d AddTagCommand.MESSAGE_NOT_ADDED;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            addTagsToBug(validBug, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedString, e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagsToBug_tagAlreadyExists_commandExceptionThrown() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug validBug \u003d new BugBuilder().withTags(VALID_TAG_LOGIC).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d AddTagCommand.MESSAGE_INVALID_NEW;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            addTagsToBug(validBug, tagsToAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedString, e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_invalidBug_commandExceptionThrown() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d AddTagCommand.MESSAGE_NOT_ADDED;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            addTagsToBug(null, tagsToAdd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedString, e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddLogic \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddComponent \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddLogic.add(newTagLogic);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddComponent.add(newTagComponent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommand \u003d new AddTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                tagsToAddLogic, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommandDuplicate \u003d new AddTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                tagsToAddLogic, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommandDifferentIndex \u003d new AddTagByStateCommand(INDEX_SECOND_BUG,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                tagsToAddLogic, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommandDifferentTag \u003d new AddTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                tagsToAddComponent, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommandDifferentState \u003d new AddTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                tagsToAddComponent, VALID_STATE_BUG2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagByStateCommand \u003d new EditTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_LOGIC), new Tag(VALID_TAG_COMPONENT), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //same command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(addTagByStateCommand.equals(addTagByStateCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //null command"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagByStateCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different command types"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagByStateCommand.equals(editTagByStateCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //duplicate commands"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(addTagByStateCommand.equals(addTagByStateCommandDuplicate));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different indexes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagByStateCommand.equals(addTagByStateCommandDifferentIndex));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different tags"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagByStateCommand.equals(addTagByStateCommandDifferentTag));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different state"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagByStateCommand.equals(addTagByStateCommandDifferentState));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 183,
      "duynguyen24501": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.AddTagCommand.addTagsToBug;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Tag newTagLogic \u003d new Tag(VALID_TAG_LOGIC);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Tag newTagComponent \u003d new Tag(VALID_TAG_COMPONENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_invalidBugIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(outOfBoundIndex, tagsToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertCommandFailure(addTagCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug bug \u003d model.getFilteredBugList().get(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug tagAddedBug \u003d addTagsToBug(bug, tagsToAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_BUG, tagsToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            String expectedMessage \u003d String.format(AddTagCommand.MESSAGE_ADD_BUG_SUCCESS, tagAddedBug);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            expectedModel.setBug(model.getFilteredBugList().get(0), tagAddedBug);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertCommandSuccess(addTagCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_validTag_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug bug \u003d model.getFilteredBugList().get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Name bugName \u003d bug.getName();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            State bugState \u003d bug.getState();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Description bugDescription \u003d bug.getDescription();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Priority bugPriority \u003d bug.getPriority();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            Optional\u003cNote\u003e optionalNote \u003d bug.getOptionalNote();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Set\u003cTag\u003e tagsOfBug \u003d new HashSet\u003cTag\u003e(bug.getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            tagsOfBug.add(newTagLogic);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            //copy bug details to reflect edited bug"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "            Bug editedBug \u003d new Bug(bugName, bugState, bugDescription, optionalNote, tagsOfBug, bugPriority);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(editedBug, AddTagCommand.addTagsToBug(bug, tagsToAdd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_invalidTag_commandExceptionThrown() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug validBug \u003d model.getFilteredBugList().get(0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d AddTagCommand.MESSAGE_NOT_ADDED;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            addTagsToBug(validBug, null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedString, e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_tagAlreadyExists_commandExceptionThrown() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug validBug \u003d new BugBuilder().withTags(VALID_TAG_LOGIC).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d AddTagCommand.MESSAGE_INVALID_NEW;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            addTagsToBug(validBug, tagsToAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedString, e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void addTagToBug_invalidBug_commandExceptionThrown() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d AddTagCommand.MESSAGE_NOT_ADDED;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAdd.add(newTagLogic);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            addTagsToBug(null, tagsToAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedString, e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddLogic \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddComponent \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddLogic.add(newTagLogic);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddComponent.add(newTagComponent);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_BUG, tagsToAddLogic);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand addTagCommandDuplicate \u003d new AddTagCommand(INDEX_FIRST_BUG, tagsToAddLogic);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand addTagCommandDifferentIndex \u003d new AddTagCommand(INDEX_SECOND_BUG, tagsToAddLogic);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand addTagCommandDifferentTag \u003d new AddTagCommand(INDEX_FIRST_BUG, tagsToAddComponent);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagCommand editTagCommand \u003d new EditTagCommand(INDEX_FIRST_BUG, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //same command"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(addTagCommand.equals(addTagCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //null command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different command types"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagCommand.equals(editTagCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //duplicate commands"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(addTagCommand.equals(addTagCommandDuplicate));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different indexes"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagCommand.equals(addTagCommandDifferentIndex));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different tags"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(addTagCommand.equals(addTagCommandDifferentTag));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 163,
      "duynguyen24501": 3,
      "the-reefshark": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_emptyKanBugTracker_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_nonEmptyKanBugTracker_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.setKanBugTracker(new KanBugTracker());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 5,
      "duynguyen24501": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "Rogerlys": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLUMN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWTAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLDTAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.EditBugDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_NAME_PARSER \u003d \"Program cannot start up\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_NAME_HOMEPAGE \u003d \"Duplicate items in list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_NAME_UI \u003d \"ArrayOutOfBounds Error\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String VALID_STATE_PARSER \u003d \"backlog\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String VALID_STATE_HOMEPAGE \u003d \"done\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_DESCRIPTION_PARSER \u003d \"Blank screen on launching application\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_DESCRIPTION_HOMEPAGE \u003d \"Duplicates in list when searching for a specific bug\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_DESCRIPTION_UI \u003d \"No input validation for invalid index\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String VALID_NOTE_PARSER \u003d \"this bug has been encountered on numerous occasions in the parser\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String VALID_NOTE_HOMEPAGE \u003d \"this is a very rare problem that has not been encountered before\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String VALID_NOTE_BLANK \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String VALID_PRIORITY_PARSER \u003d \"medium\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String VALID_PRIORITY_HOMEPAGE \u003d \"high\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_TAG_COMPONENT \u003d \"UI\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String VALID_TAG_LOGIC \u003d \"Logic\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String VALID_COLUMN_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final State VALID_STATE_BUG1 \u003d new State(\"todo\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final State VALID_STATE_BUG2 \u003d new State(\"backlog\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String NAME_DESC_PARSER \u003d \" \" + PREFIX_NAME + VALID_NAME_PARSER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String NAME_DESC_HOMEPAGE \u003d \" \" + PREFIX_NAME + VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String NAME_DESC_UI \u003d \" \" + PREFIX_NAME + VALID_NAME_UI;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String STATE_DESC_PARSER \u003d \" \" + PREFIX_STATE + VALID_STATE_PARSER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String STATE_DESC_HOMEPAGE \u003d \" \" + PREFIX_STATE + VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String DESCRIPTION_DESC_PARSER \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PARSER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String DESCRIPTION_DESC_HOMEPAGE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String DESCRIPTION_DESC_UI \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_UI;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String NOTE_DESC_PARSER \u003d \" \" + PREFIX_NOTE + VALID_NOTE_PARSER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String NOTE_DESC_HOMEPAGE \u003d \" \" + PREFIX_NOTE + VALID_NOTE_HOMEPAGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String TAG_DESC_FRONTEND \u003d \" \" + PREFIX_TAG + VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String TAG_DESC_BACKEND \u003d \" \" + PREFIX_TAG + VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String TAG_DESC_OLD \u003d \" \" + PREFIX_OLDTAG + VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String TAG_DESC_NEW \u003d \" \" + PREFIX_NEWTAG + VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String PRIORITY_DESC_PARSER \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PARSER;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String PRIORITY_DESC_HOMEPAGE \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HOMEPAGE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String COLUMN_DESC_TODO \u003d \" \" + PREFIX_COLUMN + VALID_COLUMN_TODO;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Bug\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String INVALID_STATE_DESC \u003d \" \" + PREFIX_STATE + \"backklog\"; // typo of backog"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION; // descriptions cannot be empty"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String INVALID_NOTE_DESC \u003d \" \" + PREFIX_NOTE; // note cannot be empty when bug is being added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Ui*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String INVALID_TAG_OLD \u003d \" \" + PREFIX_OLDTAG + \"prints.java\"; // \u0027.\u0027 not allowed in tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final String INVALID_TAG_NEW \u003d \" \" + PREFIX_NEWTAG + \"Javafs(\"; // \u0027(\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"hig\"; // typo of high"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String INVALID_COLUMN_DESC \u003d \" \" + PREFIX_COLUMN + \"todos\"; // typo of todo"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final EditCommand.EditBugDescriptor DESC_PARSER;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final EditCommand.EditBugDescriptor DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        DESC_PARSER \u003d new EditBugDescriptorBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withName(VALID_NAME_PARSER)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withState(VALID_STATE_PARSER)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PARSER)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withNote(VALID_NOTE_PARSER)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withTags(VALID_TAG_LOGIC)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withPriority(VALID_PRIORITY_PARSER)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        DESC_HOMEPAGE \u003d new EditBugDescriptorBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withName(VALID_NAME_HOMEPAGE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withState(VALID_STATE_HOMEPAGE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_HOMEPAGE)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withNote(VALID_NOTE_HOMEPAGE)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withTags(VALID_TAG_COMPONENT, VALID_TAG_LOGIC)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withPriority(VALID_PRIORITY_HOMEPAGE)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * - the bug tracker, filtered bug list and selected  bug in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTracker expectedKanBugTracker \u003d new KanBugTracker(actualModel.getKanBugTracker());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBugList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(expectedKanBugTracker, actualModel.getKanBugTracker());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBugList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the bug at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * {@code model}\u0027s bug tracker."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static void showBugAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBugList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug bug \u003d model.getFilteredBugList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        final String[] splitName \u003d bug.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.updateFilteredBugList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(1, model.getFilteredBugList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 26,
      "the-reefshark": 7,
      "PhongTran98": 13,
      "duynguyen24501": 29,
      "-": 75,
      "Rogerlys": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteByStateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBugAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeleteByStateCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cBug\u003e todoList \u003d model.getFilteredBugListByState(new State(\"todo\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(todoList.size() + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteCommand \u003d new DeleteByStateCommand(outOfBoundIndex, new State(\"todo\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_validIndexFilteredListTodoState_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug bugToDelete \u003d model.getFilteredBugListByState(new State(\"todo\")).get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteCommand \u003d new DeleteByStateCommand(INDEX_FIRST_BUG, new State(\"todo\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BUG_SUCCESS, bugToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        expectedModel.deleteBug(bugToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        showNoBug(expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bug tracker list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getKanBugTracker().getBugList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteByStateCommand(outOfBoundIndex, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_validIndexFilteredListDoneState_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        showBugAtIndex(model, INDEX_THIRD_BUG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug bugToDelete \u003d model.getFilteredBugListByState(new State(\"done\")).get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteCommand \u003d new DeleteByStateCommand(INDEX_FIRST_BUG, new State(\"done\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BUG_SUCCESS, bugToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        expectedModel.deleteBug(bugToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        showNoBug(expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteFirstStateBug1 \u003d new DeleteByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteFirstStateBug2 \u003d new DeleteByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            VALID_STATE_BUG2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteSecondStateBug1 \u003d new DeleteByStateCommand(INDEX_SECOND_BUG,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(deleteFirstStateBug1.equals(deleteFirstStateBug1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(deleteFirstStateBug1.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DeleteByStateCommand deleteFirstStateBug1Copy \u003d new DeleteByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //copy -\u003e true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(deleteFirstStateBug1.equals(deleteFirstStateBug1Copy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //different Index -\u003e false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(deleteFirstStateBug1.equals(deleteSecondStateBug1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //different target state -\u003e flase"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(deleteFirstStateBug1.equals(deleteFirstStateBug2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void showNoBug(Model model) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        model.updateFilteredBugList(p -\u003e false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(model.getFilteredBugList().isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBugAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugToDelete \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BUG_SUCCESS, bugToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.deleteBug(bugToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugToDelete \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BUG_SUCCESS, bugToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.deleteBug(bugToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showNoBug(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bug tracker list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getKanBugTracker().getBugList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_BUG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // different bug -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private void showNoBug(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        model.updateFilteredBugList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(model.getFilteredBugList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 4,
      "PhongTran98": 20,
      "duynguyen24501": 8,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBugDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PARSER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HOMEPAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBugDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.EditBugDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class EditBugDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor descriptorWithSameValues \u003d new EditCommand.EditBugDescriptor(DESC_PARSER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(DESC_PARSER.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(DESC_PARSER.equals(DESC_PARSER));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(DESC_PARSER.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(DESC_PARSER.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(DESC_PARSER.equals(DESC_HOMEPAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditBugDescriptor editedBug \u003d new EditBugDescriptorBuilder(DESC_PARSER).withName(VALID_NAME_HOMEPAGE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(DESC_PARSER.equals(editedBug));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // different state -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        editedBug \u003d new EditBugDescriptorBuilder(DESC_PARSER).withState(VALID_STATE_HOMEPAGE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(DESC_PARSER.equals(editedBug));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        editedBug \u003d new EditBugDescriptorBuilder(DESC_PARSER).withDescription(VALID_DESCRIPTION_HOMEPAGE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(DESC_PARSER.equals(editedBug));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        editedBug \u003d new EditBugDescriptorBuilder(DESC_PARSER).withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(DESC_PARSER.equals(editedBug));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBug \u003d new EditBugDescriptorBuilder(DESC_PARSER).withPriority(VALID_PRIORITY_HOMEPAGE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(DESC_PARSER.equals(editedBug));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "PhongTran98": 6,
      "duynguyen24501": 2,
      "-": 28,
      "Rogerlys": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditByStateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PARSER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLUMN_TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.testutil.EditBugDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class EditByStateCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void executeIncorrectTargetStateFailure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditByStateCommand editByStateCommandBacklog \u003d new EditByStateCommand(INDEX_SECOND_BUG,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            new EditBugDescriptorBuilder().withName(VALID_NAME_HOMEPAGE).build(), new State(\"backlog\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_BUG_DISPLAYED_INDEX, ()-\u003e editByStateCommandBacklog"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                                                                                           .execute(model));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug editedBug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder(editedBug).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditByStateCommand editCommand \u003d new EditByStateCommand(INDEX_FIRST_BUG, descriptor, new State(\"todo\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BUG_SUCCESS, editedBug);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugListByState(new State(\"todo\")).get(0), editedBug);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_duplicateBugUnfilteredList_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        State todo \u003d new State(VALID_COLUMN_TODO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug firstBug \u003d model.getFilteredBugListByState(todo).get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder(firstBug).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditByStateCommand editCommand \u003d new EditByStateCommand(INDEX_SECOND_BUG, descriptor, todo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_invalidBugIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugListByState(VALID_STATE_BUG1).size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withName(VALID_NAME_HOMEPAGE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditByStateCommand editCommand \u003d new EditByStateCommand(outOfBoundIndex, descriptor, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        final EditByStateCommand standardCommand \u003d new EditByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                            DESC_PARSER, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor copyDescriptor \u003d new EditCommand.EditBugDescriptor(DESC_PARSER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditByStateCommand commandWithSameValues \u003d new EditByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            copyDescriptor, new State(\"todo\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // normal EditCommand -\u003e false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        final EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BUG, DESC_PARSER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(editCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(new EditByStateCommand(INDEX_SECOND_BUG, DESC_PARSER, new State(\"todo\"))));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(new EditByStateCommand(INDEX_FIRST_BUG, DESC_HOMEPAGE, new State(\"todo\"))));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // different target state -\u003e false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(new EditByStateCommand(INDEX_FIRST_BUG, DESC_PARSER, new State(\"backlog\"))));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PARSER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBugAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBugDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.EditBugDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug editedBug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditCommand.EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder(editedBug).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BUG, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BUG_SUCCESS, editedBug);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugList().get(0), editedBug);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index indexLastBug \u003d Index.fromOneBased(model.getFilteredBugList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug lastBug \u003d model.getFilteredBugList().get(indexLastBug.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        BugBuilder bugInList \u003d new BugBuilder(lastBug);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug editedBug \u003d bugInList.withName(VALID_NAME_HOMEPAGE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                .withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withName(VALID_NAME_HOMEPAGE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                .withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastBug, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BUG_SUCCESS, editedBug);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.setBug(lastBug, editedBug);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BUG, new EditBugDescriptor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug editedBug \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BUG_SUCCESS, editedBug);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugInFilteredList \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug editedBug \u003d new BugBuilder(bugInFilteredList).withName(VALID_NAME_HOMEPAGE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new EditBugDescriptorBuilder().withName(VALID_NAME_HOMEPAGE).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BUG_SUCCESS, editedBug);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugList().get(0), editedBug);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_duplicateBugUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug firstBug \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder(firstBug).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_BUG, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_duplicateBugFilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // edit bug in filtered list into a duplicate in bug tracker"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugInList \u003d model.getKanBugTracker().getBugList().get(INDEX_SECOND_BUG.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new EditBugDescriptorBuilder(bugInList).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_invalidBugIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withName(VALID_NAME_HOMEPAGE).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * but smaller than size of bug tracker"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_invalidBugIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bug tracker list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getKanBugTracker().getBugList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new EditBugDescriptorBuilder().withName(VALID_NAME_HOMEPAGE).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_BUG, DESC_PARSER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor copyDescriptor \u003d new EditBugDescriptor(DESC_PARSER);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_BUG, copyDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_BUG, DESC_PARSER)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_BUG, DESC_HOMEPAGE)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 7,
      "PhongTran98": 30,
      "duynguyen24501": 22,
      "-": 100,
      "Rogerlys": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTagByStateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class EditTagByStateCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private State initialStateBacklog \u003d VALID_STATE_BUG2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private State initialStateToDo \u003d VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Tag newTag \u003d new Tag(VALID_TAG_LOGIC);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Tag oldTag \u003d new Tag(VALID_TAG_COMPONENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    //Todo refactor this to pulll out all the declarations of new and old tag"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    // tests the case where the user inputs the wrong column as well since it would be considered out of bounds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_invalidBugIndexFilteredListByState_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagCommand \u003d new EditTagByStateCommand(outOfBoundIndex, oldTag, newTag,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                initialStateToDo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertCommandFailure(editTagCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_validEditTagInput_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug initialBug \u003d new BugBuilder().withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug tagEditedBug \u003d EditTagByStateCommand.updateTagInBug(initialBug, oldTag, newTag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagByStateCommand editTagCommand \u003d new EditTagByStateCommand(INDEX_FIRST_BUG, oldTag, newTag,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                    initialStateBacklog);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_EDIT_BUG_SUCCESS, tagEditedBug);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            //set initial model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Model initialModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            initialModel.setBug(model.getFilteredBugListByState(initialStateBacklog).get(0), initialBug);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            //set expected model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            expectedModel.setBug(model.getFilteredBugListByState(initialStateBacklog).get(0), tagEditedBug);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertCommandSuccess(editTagCommand, initialModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_invalidEditTagInputTagNotInBug_throwCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug initialBug \u003d model.getFilteredBugListByState(initialStateToDo).get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagCommand \u003d new EditTagByStateCommand(INDEX_FIRST_BUG, oldTag, newTag,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                initialStateToDo);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_INVALID_OLD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //set initial model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Model initialModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        initialModel.setBug(model.getFilteredBugListByState(initialStateToDo).get(0), initialBug);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //set expected model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugListByState(initialStateToDo).get(0), initialBug);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertCommandFailure(editTagCommand, initialModel, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddLogic \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddLogic.add(new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagByStateCommand \u003d new EditTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_LOGIC), new Tag(VALID_TAG_COMPONENT), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagByStateCommandDuplicate \u003d new EditTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_LOGIC), new Tag(VALID_TAG_COMPONENT), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagByStateCommandDifferentIndex \u003d new EditTagByStateCommand(INDEX_SECOND_BUG,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_LOGIC), new Tag(VALID_TAG_COMPONENT), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagByStateCommandDifferentTags \u003d new EditTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT), new Tag(VALID_TAG_LOGIC), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagByStateCommand editTagByStateCommandDifferentState \u003d new EditTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT), new Tag(VALID_TAG_LOGIC), VALID_STATE_BUG2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand addTagByStateCommand \u003d new AddTagByStateCommand(INDEX_FIRST_BUG,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                tagsToAddLogic, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //same command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(editTagByStateCommand.equals(editTagByStateCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //null command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagByStateCommand.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different command types"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagByStateCommand.equals(addTagByStateCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //duplicate command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(editTagByStateCommand.equals(editTagByStateCommandDuplicate));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different indexes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagByStateCommand.equals(editTagByStateCommandDifferentIndex));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different tags"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagByStateCommand.equals(editTagByStateCommandDifferentTags));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different STATE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagByStateCommand.equals(editTagByStateCommandDifferentState));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 120,
      "duynguyen24501": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class EditTagCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    //Todo refactor this to pulll out all the declarations of new and old tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Tag newTag \u003d new Tag(VALID_TAG_LOGIC);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Tag oldTag \u003d new Tag(VALID_TAG_COMPONENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_invalidBugIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagCommand editTagCommand \u003d new EditTagCommand(outOfBoundIndex, oldTag, newTag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertCommandFailure(editTagCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_validEditTagInput_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug initialBug \u003d new BugBuilder().withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug tagEditedBug \u003d EditTagCommand.updateTagInBug(initialBug, oldTag, newTag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagCommand editTagCommand \u003d new EditTagCommand(INDEX_FIRST_BUG, oldTag, newTag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_EDIT_BUG_SUCCESS, tagEditedBug);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            //set initial model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Model initialModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            initialModel.setBug(model.getFilteredBugList().get(0), initialBug);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            //set expected model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            expectedModel.setBug(model.getFilteredBugList().get(0), tagEditedBug);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertCommandSuccess(editTagCommand, initialModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void execute_invalidEditTagInputTagNotInBug_throwCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug initialBug \u003d model.getFilteredBugList().get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagCommand editTagCommand \u003d new EditTagCommand(INDEX_FIRST_BUG, oldTag, newTag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_INVALID_OLD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //set initial model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Model initialModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        initialModel.setBug(model.getFilteredBugList().get(0), initialBug);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //set expected model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugList().get(0), initialBug);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertCommandFailure(editTagCommand, initialModel, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void updateTagInBug_validInputs_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug initialBug \u003d new BugBuilder().withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug expectedFinalBug \u003d new BugBuilder().withTags(VALID_TAG_LOGIC).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            Bug updatedBug \u003d EditTagCommand.updateTagInBug(initialBug, oldTag, newTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedFinalBug, updatedBug);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void updateTagInBug_oldTagDoesNotExist_throwCommandException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug initialBug \u003d model.getFilteredBugList().get(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_INVALID_OLD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagCommand.updateTagInBug(initialBug, oldTag, newTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void updateTagInBug_newTagAlreadyExists_throwCommandException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug initialBug \u003d new BugBuilder().withTags(VALID_TAG_LOGIC, VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_INVALID_NEW);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagCommand.updateTagInBug(initialBug, oldTag, newTag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void updateTagInBug_nullNewTag_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug initialBug \u003d new BugBuilder().withTags(VALID_TAG_LOGIC, VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagCommand.updateTagInBug(initialBug, oldTag, null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void updateTagInBug_nullOldTag_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug initialBug \u003d new BugBuilder().withTags(VALID_TAG_LOGIC, VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagCommand.updateTagInBug(initialBug, null, newTag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void updateTagInBug_nullInitialBug_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(EditTagCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            EditTagCommand.updateTagInBug(null, oldTag, newTag);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddLogic \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddLogic.add(new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagCommand editTagCommand \u003d new EditTagCommand(INDEX_FIRST_BUG, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagCommand editTagCommandDuplicate \u003d new EditTagCommand(INDEX_FIRST_BUG, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagCommand editTagCommandDifferentIndex \u003d new EditTagCommand(INDEX_SECOND_BUG, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditTagCommand editTagCommandDifferentTags \u003d new EditTagCommand(INDEX_FIRST_BUG, new Tag(VALID_TAG_COMPONENT),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_LOGIC));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand addTagCommand \u003d new AddTagCommand(INDEX_FIRST_BUG, tagsToAddLogic);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //same command"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(editTagCommand.equals(editTagCommand));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //null command"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagCommand.equals(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different command types"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagCommand.equals(addTagCommand));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //duplicate command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(editTagCommand.equals(editTagCommandDuplicate));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different indexes"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagCommand.equals(editTagCommandDifferentIndex));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        //different tags"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(editTagCommand.equals(editTagCommandDifferentTags));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 185,
      "duynguyen24501": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBugAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 5,
      "duynguyen24501": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MoveByStateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_PARSER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBugAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class MoveByStateCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_invalidBugIndexUnfilteredListTodo_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugListByState(VALID_STATE_BUG1).size() + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        MoveByStateCommand moveCommand \u003d new MoveByStateCommand(outOfBoundIndex, VALID_STATE_BUG1, VALID_STATE_BUG2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandFailure(moveCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        showBugAtIndex(model, INDEX_SECOND_BUG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug bugInFilteredList \u003d model.getFilteredBugListByState(VALID_STATE_BUG1).get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug movedBug \u003d new BugBuilder(bugInFilteredList).withState(VALID_STATE_PARSER).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        MoveByStateCommand moveCommand \u003d new MoveByStateCommand(INDEX_FIRST_BUG, movedBug.getState(), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String expectedMessage \u003d String.format(MoveCommand.MESSAGE_MOVE_BUG_SUCCESS, movedBug);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugListByState(VALID_STATE_BUG1).get(0),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            movedBug);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandSuccess(moveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        MoveByStateCommand command \u003d new MoveByStateCommand(INDEX_FIRST_BUG, VALID_STATE_BUG1, VALID_STATE_BUG2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        MoveByStateCommand sameCommand \u003d new MoveByStateCommand(INDEX_FIRST_BUG, VALID_STATE_BUG1,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            VALID_STATE_BUG2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //same object -\u003e true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //same items -\u003e true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertTrue(command.equals(sameCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //null -\u003e false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //different command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(command.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //different index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(command.equals(new MoveByStateCommand(INDEX_SECOND_BUG, VALID_STATE_BUG1, VALID_STATE_BUG2)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //different new state"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(command.equals(new MoveByStateCommand(INDEX_FIRST_BUG, VALID_STATE_BUG2,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            VALID_STATE_BUG1)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        //different target state"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(command.equals(new MoveByStateCommand(INDEX_FIRST_BUG, VALID_STATE_BUG1, VALID_STATE_BUG1)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_PARSER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBugAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for MoveCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "class MoveCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_fieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug movedBug \u003d new BugBuilder(model.getFilteredBugList().get(0))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                .withState(VALID_STATE_PARSER).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST_BUG, movedBug.getState());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String expectedMessage \u003d String.format(MoveCommand.MESSAGE_MOVE_BUG_SUCCESS, movedBug);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugList().get(0), movedBug);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertCommandSuccess(moveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        showBugAtIndex(model, INDEX_FIRST_BUG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugInFilteredList \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Bug movedBug \u003d new BugBuilder(bugInFilteredList).withState(VALID_STATE_PARSER).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(INDEX_FIRST_BUG, movedBug.getState());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String expectedMessage \u003d String.format(MoveCommand.MESSAGE_MOVE_BUG_SUCCESS, movedBug);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedModel.setBug(model.getFilteredBugList().get(0), movedBug);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertCommandSuccess(moveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_invalidBugIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBugList().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(outOfBoundIndex, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertCommandFailure(moveCommand, model, Messages.MESSAGE_INVALID_BUG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void execute_createDuplicateBugs_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugInList \u003d model.getFilteredBugList().get(INDEX_FIRST_BUG.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // make sure that this bug is different from a bug in the model only in state"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug bugWithDifferentState \u003d new BugBuilder(bugInList)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                .withState(bugInList.getState().getStringOfValue().equals(VALID_STATE_HOMEPAGE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                        ? VALID_STATE_PARSER : VALID_STATE_HOMEPAGE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // set the 2nd bug as the bugWithDifferentState"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Model newModel \u003d new ModelManager(new KanBugTracker(model.getKanBugTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        newModel.setBug(model.getFilteredBugList().get(1), bugWithDifferentState);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        MoveCommand moveCommand \u003d new MoveCommand(Index.fromZeroBased(1), bugInList.getState());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertCommandFailure(moveCommand, model, MoveCommand.MESSAGE_DUPLICATE_BUG);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        final MoveCommand standardCommand \u003d new MoveCommand(INDEX_FIRST_BUG, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        MoveCommand commandWithSameValues \u003d new MoveCommand(INDEX_FIRST_BUG, VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(standardCommand.equals(new MoveCommand(INDEX_SECOND_BUG, VALID_STATE_BUG1)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different state -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(standardCommand.equals(new MoveCommand(INDEX_FIRST_BUG, VALID_STATE_BUG2)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 110,
      "Rogerlys": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BUGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGFIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGFOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGSEVEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGSIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTHREE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTWO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.BugContainsQueryStringPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalKanBugTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new BugContainsQueryStringPredicate(\"first\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new BugContainsQueryStringPredicate(\"second\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // different bug -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_emptyData_noBugFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"No data\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBugList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_oneKeywordQueryString_oneBugFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"jar\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Arrays.asList(BUGSEVEN), model.getFilteredBugList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_oneMixedCaseKeywordQueryString_oneBugFound() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"eXiT\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Arrays.asList(BUGFIVE), model.getFilteredBugList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_multipleKeywordsQueryString_oneBugFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"Note rendering\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Arrays.asList(BUGSIX), model.getFilteredBugList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_oneKeywordQueryString_multipleBugsFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"command\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Arrays.asList(BUGONE, BUGTWO, BUGFOUR, BUGFIVE), model.getFilteredBugList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_oneMixedCaseKeywordQueryString_multipleBugsFound() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"cOmMaND\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Arrays.asList(BUGONE, BUGTWO, BUGFOUR, BUGFIVE), model.getFilteredBugList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void execute_multipleMixedCaseKeywordsQueryString_multipleBugsFound() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BUGS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d preparePredicate(\"mAiN wINDow\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        expectedModel.updateFilteredBugList(predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Arrays.asList(BUGTHREE, BUGSIX), model.getFilteredBugList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private BugContainsQueryStringPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return new BugContainsQueryStringPredicate(userInput);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void execute_kanban_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(\"\", false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertCommandSuccess(new SwitchCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PARSER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOTE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_UI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_PARSER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PARSER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATE_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATE_DESC_PARSER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BACKEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRONTEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HOMEPAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGELEVEN;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGNINE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTEN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTWELVE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug expectedBug \u003d new BugBuilder(BUGELEVEN).withTags(VALID_TAG_LOGIC).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PARSER + NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + PRIORITY_DESC_PARSER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // multiple state - last state accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HOMEPAGE + STATE_DESC_PARSER + STATE_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug expectedBugMultipleTags \u003d new BugBuilder(BUGELEVEN).withTags(VALID_TAG_LOGIC, VALID_TAG_COMPONENT)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                new AddCommand(expectedBugMultipleTags));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug expectedBug \u003d new BugBuilder(BUGTEN).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PARSER + STATE_DESC_PARSER"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        + DESCRIPTION_DESC_PARSER + NOTE_DESC_PARSER + PRIORITY_DESC_PARSER,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedBug \u003d new BugBuilder(BUGNINE).withTags().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_UI + DESCRIPTION_DESC_UI,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // no priority"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedBug \u003d new BugBuilder(BUGELEVEN).withPriority().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND, new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // no note"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        expectedBug \u003d new BugBuilder(BUGTWELVE).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + PRIORITY_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND, new AddCommand(expectedBug));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_HOMEPAGE + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + VALID_DESCRIPTION_HOMEPAGE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_HOMEPAGE + VALID_STATE_HOMEPAGE + VALID_DESCRIPTION_HOMEPAGE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        + NOTE_DESC_HOMEPAGE + VALID_PRIORITY_HOMEPAGE, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // invalid state"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HOMEPAGE + INVALID_STATE_DESC + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                State.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                + NOTE_DESC_HOMEPAGE + PRIORITY_DESC_HOMEPAGE + INVALID_TAG_DESC + VALID_TAG_LOGIC,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_HOMEPAGE + INVALID_PRIORITY_DESC + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + INVALID_NOTE_DESC + PRIORITY_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + STATE_DESC_HOMEPAGE + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + DESCRIPTION_DESC_HOMEPAGE + NOTE_DESC_HOMEPAGE + TAG_DESC_BACKEND + TAG_DESC_FRONTEND,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 9,
      "the-reefshark": 44,
      "PhongTran98": 22,
      "duynguyen24501": 6,
      "-": 63,
      "Rogerlys": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COLUMN_DESC_TODO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLUMN_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_NEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_OLD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_OLD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PARSER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.AddTagByStateCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class AddTagCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    //TODO Add in test for multiple tags being added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private AddTagCommandParser parser \u003d new AddTagCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_extraPrefixes_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputOne \u003d targetIndex.getOneBased() + TAG_DESC_NEW + TAG_DESC_NEW + NAME_DESC_UI;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputTwo \u003d targetIndex.getOneBased() + TAG_DESC_NEW + NAME_DESC_UI + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputThree \u003d targetIndex.getOneBased() + NAME_DESC_UI + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // since n/ is not a valid prefix for this command, it is read together with the earlier input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputOne, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputTwo, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // n/ will be read before tag, together with prefix."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputThree, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // missing new tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_OLD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidValueCorrectFormat_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_NEW, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" nt/print array\", Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValueWithoutColumn_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddLogic \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddLogic.add(new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagCommand expectedCommand \u003d new AddTagCommand(targetIndex, tagsToAddLogic);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValueWithColumn_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Set\u003cTag\u003e tagsToAddLogic \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tagsToAddLogic.add(new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COLUMN_DESC_TODO + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        AddTagByStateCommand expectedCommand \u003d new AddTagByStateCommand(targetIndex, tagsToAddLogic,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValueWithRepeatedColumn_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COLUMN_DESC_TODO + TAG_DESC_NEW + COLUMN_DESC_TODO;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagByStateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInput, expectedString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidColumnValue_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_COLUMN_DESC + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d State.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInput, expectedString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidUserInputs_throwParseExeception() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputOne \u003d targetIndex.getOneBased() + \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputTwo \u003d targetIndex.getOneBased() + TAG_DESC_OLD;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputOne, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputTwo, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_BUG));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PARSER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOTE_DESC_PARSER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PARSER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATE_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATE_DESC_PARSER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BACKEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRONTEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PARSER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PARSER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_HOMEPAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_PARSER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HOMEPAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PARSER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_PARSER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBugDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.EditBugDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String PRIORITY_EMPTY \u003d \" \" + PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    private static final String NOTE_EMPTY \u003d \" \" + PREFIX_NOTE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATE_DESC, State.MESSAGE_CONSTRAINTS); // invalid state"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Bug} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRONTEND + TAG_DESC_BACKEND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRONTEND + TAG_EMPTY + TAG_DESC_BACKEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRONTEND + TAG_DESC_BACKEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_STATE_DESC + VALID_DESCRIPTION_PARSER,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_BACKEND + PRIORITY_DESC_PARSER"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + STATE_DESC_PARSER + DESCRIPTION_DESC_PARSER + NOTE_DESC_PARSER + NAME_DESC_PARSER + TAG_DESC_FRONTEND;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withName(VALID_NAME_PARSER)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                .withState(VALID_STATE_PARSER).withDescription(VALID_DESCRIPTION_PARSER)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withNote(VALID_NOTE_PARSER).withTags(VALID_TAG_COMPONENT, VALID_TAG_LOGIC)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                .withPriority(VALID_PRIORITY_PARSER).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATE_DESC_PARSER + PRIORITY_DESC_PARSER;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditCommand.EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                .withState(VALID_STATE_PARSER).withPriority(VALID_PRIORITY_PARSER).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditCommand.EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withName(VALID_NAME_PARSER).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // state"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STATE_DESC_PARSER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        descriptor \u003d new EditBugDescriptorBuilder().withState(VALID_STATE_PARSER).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PARSER;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        descriptor \u003d new EditBugDescriptorBuilder().withDescription(VALID_DESCRIPTION_PARSER).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRONTEND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        descriptor \u003d new EditBugDescriptorBuilder().withTags(VALID_TAG_LOGIC).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_PARSER;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        descriptor \u003d new EditBugDescriptorBuilder().withPriority(VALID_PRIORITY_PARSER).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // note"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NOTE_DESC_PARSER;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        descriptor \u003d new EditBugDescriptorBuilder().withNote(VALID_NOTE_PARSER).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PARSER + PRIORITY_DESC_PARSER"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + NOTE_DESC_PARSER + STATE_DESC_PARSER + TAG_DESC_FRONTEND + DESCRIPTION_DESC_PARSER"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + STATE_DESC_PARSER + TAG_DESC_FRONTEND + DESCRIPTION_DESC_HOMEPAGE + STATE_DESC_HOMEPAGE"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                + PRIORITY_DESC_HOMEPAGE + TAG_DESC_BACKEND + NOTE_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                .withState(VALID_STATE_HOMEPAGE).withDescription(VALID_DESCRIPTION_HOMEPAGE)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                .withNote(VALID_NOTE_HOMEPAGE).withTags(VALID_TAG_LOGIC, VALID_TAG_COMPONENT)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                .withPriority(VALID_PRIORITY_HOMEPAGE).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATE_DESC_HOMEPAGE + DESCRIPTION_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withState(VALID_STATE_HOMEPAGE)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_HOMEPAGE).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test void parse_resetPriority_success() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_EMPTY;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withPriority().build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Test void parse_resetNote_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NOTE_EMPTY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withNote(\"\").build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parse_multipleRepeatedPriorityIncludingEmpty_acceptsLast() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // empty priority is the last priority"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_HOMEPAGE + PRIORITY_EMPTY;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder().withPriority().build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // empty priority is not the last priority"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_EMPTY + PRIORITY_DESC_HOMEPAGE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        descriptor \u003d new EditBugDescriptorBuilder().withPriority(VALID_PRIORITY_HOMEPAGE).build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "PhongTran98": 57,
      "the-reefshark": 27,
      "duynguyen24501": 7,
      "-": 118,
      "Rogerlys": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditTagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COLUMN_DESC_TODO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLUMN_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_NEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_OLD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_OLD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PARSER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_BUG1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEWTAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.EditTagByStateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class EditTagCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private EditTagCommandParser parser \u003d new EditTagCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_extraPrefixes_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputOne \u003d targetIndex.getOneBased() + TAG_DESC_OLD + TAG_DESC_NEW + NAME_DESC_UI;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputTwo \u003d targetIndex.getOneBased() + TAG_DESC_OLD + NAME_DESC_UI + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // since n/ is not a valid prefix for this command, it is read together with the earlier input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputOne, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputTwo, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // missing new tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_OLD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // missing old tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_NEW, MESSAGE_INVALID_FORMAT); // invalid format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidValueCorrectFormat_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_OLD + TAG_DESC_NEW, Tag.MESSAGE_CONSTRAINTS); //invalid tag"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_OLD + INVALID_TAG_NEW, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_OLD + \" nt/print array\", Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValueWithoutColumn_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_OLD + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagCommand expectedCommand \u003d new EditTagCommand(targetIndex, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValueWithColumn_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COLUMN_DESC_TODO + TAG_DESC_OLD + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagByStateCommand expectedCommand \u003d new EditTagByStateCommand(targetIndex, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new Tag(VALID_TAG_COMPONENT), VALID_STATE_BUG1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_multipleRepeatedFieldsWithoutColumn_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_OLD + \" \" + PREFIX_NEWTAG + VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditTagCommand expectedCommand \u003d new EditTagCommand(targetIndex, new Tag(VALID_TAG_LOGIC),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new Tag(VALID_TAG_LOGIC));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_validValueWithRepeatedColumn_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                targetIndex.getOneBased() + COLUMN_DESC_TODO + TAG_DESC_OLD + TAG_DESC_NEW + COLUMN_DESC_TODO;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagByStateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInput, expectedString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidColumnValue_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_COLUMN_DESC + TAG_DESC_OLD + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedString \u003d State.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInput, expectedString);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parse_invalidUserInputs_throwParseExeception() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BUG;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputOne \u003d targetIndex.getOneBased() + \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputTwo \u003d targetIndex.getOneBased() + TAG_DESC_OLD;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String userInputThree \u003d targetIndex.getOneBased() + TAG_DESC_NEW;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputOne, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputTwo, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertParseFailure(parser, userInputThree, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 151,
      "duynguyen24501": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/KanBugTrackerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXTRA_ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBugDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.EditBugDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class KanBugTrackerParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final KanBugTrackerParser parser \u003d new KanBugTrackerParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug bug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BugUtil.getAddCommand(bug));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(new AddCommand(bug), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_EXTRA_ARGUMENTS, ()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            -\u003e parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BUG.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_BUG), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug bug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        EditBugDescriptor descriptor \u003d new EditBugDescriptorBuilder(bug).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                + INDEX_FIRST_BUG.getOneBased() + \" \" + BugUtil.getEditBugDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_BUG, descriptor), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_EXTRA_ARGUMENTS, ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            -\u003e parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_EXTRA_ARGUMENTS, ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            -\u003e parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_EXTRA_ARGUMENTS, ()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            -\u003e parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 9,
      "PhongTran98": 6,
      "duynguyen24501": 11,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARSER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATE_DESC_PARSER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_PARSER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "class MoveCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private MoveCommandParser parser \u003d new MoveCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"s/backlog\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // no state specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // no index and no state specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_PARSER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parse_invalidState_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATE_DESC, State.MESSAGE_CONSTRAINTS); // invalid state"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parse_correctIndexAndState_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BUG;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + STATE_DESC_PARSER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        MoveCommand expectedCommand \u003d new MoveCommand(targetIndex, new State(VALID_STATE_PARSER));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 59,
      "Rogerlys": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BUG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String INVALID_STATE \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"super high\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String VALID_STATE \u003d \"ongoing\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    private static final String VALID_NOTE \u003d \"this is a valid note with additional information\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"high\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(INDEX_FIRST_BUG, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(INDEX_FIRST_BUG, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public void parseNote_validValueWithoutWhitespace_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public void parseNote_validValueWithWhitespace_returnsTrimmedNote() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String noteWithWhitespace \u003d WHITESPACE + VALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void parseState_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseState((String) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void parseState_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseState(INVALID_STATE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void parseState_validValueWithoutWhitespace_returnsState() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        State expectedState \u003d new State(VALID_STATE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(expectedState, ParserUtil.parseState(VALID_STATE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void parseState_validValueWithWhitespace_returnsTrimmedState() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String stateWithWhitespace \u003d WHITESPACE + VALID_STATE + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        State expectedState \u003d new State(VALID_STATE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(expectedState, ParserUtil.parseState(stateWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parsePriorityNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedState() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 14,
      "PhongTran98": 20,
      "the-reefshark": 13,
      "-": 159,
      "Rogerlys": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.BugContainsQueryStringPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void parse_emptyPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertParseFailure(parser, \"search q/  \", String.format(SearchCommand.MESSAGE_EMPTY_QUERY_STRING,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void parse_valid_returnsSearchCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d new SearchCommand(new BugContainsQueryStringPredicate(\"Ui bug\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertParseSuccess(parser, \"search q/Ui bug\", expectedSearchCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertParseSuccess(parser, \" search  q/ Ui bug     \", expectedSearchCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // multiple repetitive prefixes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertParseSuccess(parser, \" search q/Skip q/Skip q/Ui bug\", expectedSearchCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/KanBugTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.exceptions.DuplicateBugException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class KanBugTrackerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private final KanBugTracker kanBugTracker \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(Collections.emptyList(), kanBugTracker.getBugList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e kanBugTracker.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void resetData_withValidReadOnlyKanBugTracker_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        KanBugTracker newData \u003d getTypicalKanBugTracker();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanBugTracker.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(newData, kanBugTracker);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void resetData_withDuplicateBugs_throwsDuplicateBugException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // Two bugs with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug editedAlice \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new BugBuilder(BUGONE).withDescription(VALID_DESCRIPTION_HOMEPAGE).withTags(VALID_TAG_COMPONENT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e newBugs \u003d Arrays.asList(BUGONE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTrackerStub newData \u003d new KanBugTrackerStub(newBugs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertThrows(DuplicateBugException.class, () -\u003e kanBugTracker.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_nullBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e kanBugTracker.hasBug(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_bugNotInKanBugTracker_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(kanBugTracker.hasBug(BUGONE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_bugInKanBugTracker_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        kanBugTracker.addBug(BUGONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(kanBugTracker.hasBug(BUGONE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_bugWithSameIdentityFieldsInKanBugTracker_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        kanBugTracker.addBug(BUGONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug editedAlice \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new BugBuilder(BUGONE).withDescription(VALID_DESCRIPTION_HOMEPAGE).withTags(VALID_TAG_COMPONENT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(kanBugTracker.hasBug(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void getBugList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e kanBugTracker.getBugList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * A stub ReadOnlyKanBugTracker whose bugs list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static class KanBugTrackerStub implements ReadOnlyKanBugTracker {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        private final ObservableList\u003cBug\u003e bugs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTrackerStub(Collection\u003cBug\u003e bugs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            this.bugs.setAll(bugs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        public ObservableList\u003cBug\u003e getBugList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "            return bugs;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 15,
      "PhongTran98": 11,
      "duynguyen24501": 16,
      "-": 61,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BUGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.KanBugTrackerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(new KanBugTracker(), new KanBugTracker(modelManager.getKanBugTracker()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        userPrefs.setKanBugTrackerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        userPrefs.setKanBugTrackerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setKanBugTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setKanBugTrackerFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setKanBugTrackerFilePath_validPath_setsKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        modelManager.setKanBugTrackerFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(path, modelManager.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_nullBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBug(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_bugNotInKanBugTracker_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(modelManager.hasBug(BUGONE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void hasBug_bugInKanBugTracker_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        modelManager.addBug(BUGONE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(modelManager.hasBug(BUGONE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void getFilteredBugList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBugList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        KanBugTracker kanBugTracker \u003d new KanBugTrackerBuilder().withBug(BUGONE).withBug(BUGTWO).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTracker differentKanBugTracker \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        modelManager \u003d new ModelManager(kanBugTracker, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(kanBugTracker, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different kanBugTracker -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentKanBugTracker, userPrefs)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        modelManager.updateFilteredBugList(PREDICATE_SHOW_ALL_BUGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        differentUserPrefs.setKanBugTrackerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(kanBugTracker, differentUserPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 7,
      "duynguyen24501": 13,
      "PhongTran98": 10,
      "-": 95,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setKanBugTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setKanBugTrackerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/BugContainsQueryStringPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugContainsQueryStringPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String firstPredicateQueryString \u003d \"first\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String secondPredicateQueryString \u003d \"second\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new BugContainsQueryStringPredicate(firstPredicateQueryString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new BugContainsQueryStringPredicate(secondPredicateQueryString);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                new BugContainsQueryStringPredicate(firstPredicateQueryString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // different bug -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void test_nameContainsQueryString_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // One keyword query-string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d new BugContainsQueryStringPredicate(\"message\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Print wrong messages\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Multiple keywords query-string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"Ui display\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Ui display\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // One mixed-case keyword query-string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"ui\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Ui Bug\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Multiple mixed-case keywords query-string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"uI bUG\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Ui Bug\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void test_descriptionContainsQueryString_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // One keyword query-string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d new BugContainsQueryStringPredicate(\"message\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withDescription(\"Print wrong messages\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Multiple keywords query-string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"Ui display\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withDescription(\"Ui display\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // One mixed-case keyword query-string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"ui\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withDescription(\"Ui Bug\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Multiple mixed-case keywords query-string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"uI bUG\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withDescription(\"Ui Bug\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void test_tagContainsQueryString_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // One keyword query-string"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String[] tags \u003d {\"Ui\", \"frontend\", \"JavaFX\"};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d new BugContainsQueryStringPredicate(\"frontend\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Multiple keywords query-string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"uI\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"Java\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        predicate \u003d new BugContainsQueryStringPredicate(\"fx\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void test_nameDoesNotContainQueryString_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Non-matching keyword query-string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d new BugContainsQueryStringPredicate(\"Ui\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(predicate.test(new BugBuilder().withName(\"Print wrong messages\").build()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public void test_descriptionDoesNotContainQueryString_returnsFalse() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        // Non-matching keyword query-string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        String[] tags \u003d {\"Ui\", \"frontend\", \"JavaFX\"};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        BugContainsQueryStringPredicate predicate \u003d new BugContainsQueryStringPredicate(\"backend\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(predicate.test(new BugBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/BugTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_HOMEPAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HOMEPAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGELEVEN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class BugTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        Bug bug \u003d new BugBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e bug.getTags().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void isSameBug() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(BUGONE.isSameBug(BUGONE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(BUGONE.isSameBug(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // different state -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug editedBugOne \u003d new BugBuilder(BUGONE).withState(VALID_STATE_HOMEPAGE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(BUGONE.isSameBug(editedBugOne));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withName(VALID_NAME_HOMEPAGE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(BUGONE.isSameBug(editedBugOne));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // same name, same state, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withDescription(VALID_DESCRIPTION_HOMEPAGE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                .withTags(VALID_TAG_COMPONENT).withPriority(VALID_PRIORITY_HOMEPAGE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(BUGONE.isSameBug(editedBugOne));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // same name, state and attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(BUGONE.isSameBug(editedBugOne));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug aliceCopy \u003d new BugBuilder(BUGONE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(BUGONE, aliceCopy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(BUGONE, BUGONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(null, BUGONE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(5, BUGONE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // different bug -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(BUGONE, BUGELEVEN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Bug editedBugOne \u003d new BugBuilder(BUGONE).withName(VALID_NAME_HOMEPAGE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(BUGONE, editedBugOne);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // different state -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withState(VALID_STATE_HOMEPAGE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(BUGONE, editedBugOne);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withDescription(VALID_DESCRIPTION_HOMEPAGE).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(BUGONE, editedBugOne);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withTags(VALID_TAG_COMPONENT).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(BUGONE, editedBugOne);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withNote(VALID_NOTE_HOMEPAGE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertNotEquals(BUGONE, editedBugOne);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        editedBugOne \u003d new BugBuilder(BUGONE).withPriority(VALID_PRIORITY_HOMEPAGE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(BUGONE, editedBugOne);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 10,
      "PhongTran98": 32,
      "the-reefshark": 7,
      "duynguyen24501": 2,
      "-": 41,
      "Rogerlys": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // different bug -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertTrue(predicate.test(new BugBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(predicate.test(new BugBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertFalse(predicate.test(new BugBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // Keywords match phone, state and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(predicate.test(new BugBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                .withState(\"done\").withDescription(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 4,
      "duynguyen24501": 7,
      "-": 63,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidNote(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertFalse(Name.isValidNote(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertFalse(Name.isValidNote(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertFalse(Name.isValidNote(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertFalse(Name.isValidNote(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Name.isValidNote(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Name.isValidNote(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Name.isValidNote(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Name.isValidNote(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Name.isValidNote(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 1,
      "the-reefshark": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Note(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public void isValidNote() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // null note"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isValidNote(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertFalse(Note.isValidNote(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertFalse(Note.isValidNote(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Note.isValidNote(\"this is a note\")); // alphabets only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Note.isValidNote(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Note.isValidNote(\"note the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Note.isValidNote(\"This Is Also A Note\")); // with capital letters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertTrue(Note.isValidNote(\"This is an incredibly detailed and long note\")); // long note"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "the-reefshark": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "class PriorityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // null state"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // blank state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // incomplete word"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"hig\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"lo\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"very high\")); // one valid word"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"low high\")); // multiple valid words"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"medium medium\")); // multiple valid words"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"highlow\")); // multiple valid words concatenated"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"fillertext\")); // only filler text"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"mediumfiller\")); // trailing filler text"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"fillerhigh\")); // leading filler text"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"fillerlowtext\")); // sandwiched valid word"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"  medium\")); // leading space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"medium  \")); // trailing space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"  medium  \")); // leading and trailing space"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"low\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"medium\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"high\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"Low\")); // uppercase is allowed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"HIGH\")); // uppercase is allowed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"meDiUm\")); // uppercase is allowed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void isEqualPriority() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p1 \u003d new Priority(\"low\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p2 \u003d new Priority(\"low\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p3 \u003d new Priority(\"medium\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p4 \u003d new Priority(\"meDIuM\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Object p5 \u003d new Priority(\"medium\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(p1, p1); // same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(p1, p2); // same value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(p3, p4); // same value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(p3, p5); // same value and runtime type but different compile time types"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void isNotEqualPriority() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p1 \u003d new Priority(\"low\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p2 \u003d new Priority(\"medium\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p3 \u003d new Priority(\"meDIuM\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p4 \u003d new Priority(\"high\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p5 \u003d new Priority();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(p1, p2); // different values"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(p3, p4); // different values"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(p3, null); // compare to null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(p1, \"low\"); // different types"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotEquals(p1, p5);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void isEqualHashCodePriority() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p1 \u003d new Priority(\"low\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p2 \u003d new Priority(\"low\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Priority p3 \u003d new Priority(\"LOw\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(p1.hashCode(), p2.hashCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(p1.hashCode(), p3.hashCode());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void isNull() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(new Priority(\"low\").isNull());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(new Priority(\"medium\").isNull());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(new Priority(\"high\").isNull());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(new Priority().isNull());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/StateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class StateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new State(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void constructor_invalidState_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String invalidState \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new State(invalidState));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void isValidState() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // null state"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e State.isValidState(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // blank state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(State.isValidState(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertFalse(State.isValidState(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlo\")); // incomplete word"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"don\")); // incomplete word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"ongoin\")); // incomplete word"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"tod\")); // incomplete word"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        // invalid inputs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlog todo\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlog done\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlog ongoing\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"todo done\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"todo backlog\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"todo ongoing\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"done backlog\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"done todo\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"done ongoing\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"ongoing todo\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"ongoing done\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"ongoing backlog\")); // multiple valid words should be invalid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\" backlog\")); //leading space"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlog \")); //trailing space"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\" backlog \")); //leading and trailing space"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"fillertextbacklog\")); //leading filler text"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlogfillertext\")); //trailing filler text"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"fillertextbacklogfillertext\")); //sandwiched valid word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(State.isValidState(\"backlogtododoneongoing\")); //valid words in invalid string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // valid state"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"backlog\")); // minimal valid word"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"todo\")); // minimal valid word"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"ongoing\")); // minimal valid word"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"done\")); // minimal valid word"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"Backlog\")); // valid word with upper case character"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"toDo\")); // valid word with upper case character"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"onGoinG\")); // valid word with upper case character"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(State.isValidState(\"DonE\")); // valid word with upper case character"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void isEqualState() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s1 \u003d new State(\"backlog\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s2 \u003d new State(\"backlog\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s3 \u003d new State(\"todo\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s4 \u003d new State(\"todo\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s5 \u003d new State(\"ongoing\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s6 \u003d new State(\"ongoing\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s7 \u003d new State(\"done\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s8 \u003d new State(\"done\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s1, s1); // same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s1, s2); // same value"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s3, s3); // same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s3, s4); // same value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s5, s5); // same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s5, s6); // same value"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s7, s7); // same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(s7, s8); // same value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void isNotEqualState() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s1 \u003d new State(\"backlog\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s2 \u003d new State(\"backlog\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s3 \u003d new State(\"todo\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s4 \u003d new State(\"todo\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s5 \u003d new State(\"ongoing\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s6 \u003d new State(\"ongoing\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s7 \u003d new State(\"done\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State s8 \u003d new State(\"done\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s1, s3); // different object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s1, s6); // different object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s1, s8); // different object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s3, s8); // different object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s3, s2); // different object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s3, s5); // different object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s5, s1); // different object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertNotEquals(s5, s4); // different object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertNotEquals(s5, s8); //// different object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void isCorrectStateValue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        State testState \u003d new State(\"backlog\"); // just to give me access to the method used below"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(State.Value.BACKLOG, testState.getValueOfState(\"backlog\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(State.Value.TODO, testState.getValueOfState(\"todo\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(State.Value.ONGOING, testState.getValueOfState(\"ongoing\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(State.Value.DONE, testState.getValueOfState(\"done\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 87,
      "Rogerlys": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/bug/UniqueBugListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "package seedu.address.model.bug;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGELEVEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.exceptions.BugNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.exceptions.DuplicateBugException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.BugBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class UniqueBugListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private final UniqueBugList uniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void contains_nullBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void contains_bugNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertFalse(uniqueBugList.contains(BUGONE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void contains_bugInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertTrue(uniqueBugList.contains(BUGONE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void contains_bugWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug editedAlice \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new BugBuilder(BUGONE).withDescription(VALID_DESCRIPTION_HOMEPAGE).withTags(VALID_TAG_COMPONENT)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertTrue(uniqueBugList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void add_nullBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void add_duplicateBug_throwsDuplicateBugException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(DuplicateBugException.class, () -\u003e uniqueBugList.add(BUGONE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_nullTargetBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.setBug(null, BUGONE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_nullEditedBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.setBug(BUGONE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_targetBugNotInList_throwsBugNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(BugNotFoundException.class, () -\u003e uniqueBugList.setBug(BUGONE, BUGONE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_editedBugIsSameBug_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.setBug(BUGONE, BUGONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        UniqueBugList expectedUniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedUniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedUniqueBugList, uniqueBugList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_editedBugHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        Bug editedAlice \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                new BugBuilder(BUGONE).withDescription(VALID_DESCRIPTION_HOMEPAGE).withTags(VALID_TAG_COMPONENT)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.setBug(BUGONE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        UniqueBugList expectedUniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        expectedUniqueBugList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedUniqueBugList, uniqueBugList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_editedBugHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.setBug(BUGONE, BUGELEVEN);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        UniqueBugList expectedUniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedUniqueBugList.add(BUGELEVEN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedUniqueBugList, uniqueBugList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBug_editedBugHasNonUniqueIdentity_throwsDuplicateBugException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGELEVEN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(DuplicateBugException.class, () -\u003e uniqueBugList.setBug(BUGONE, BUGELEVEN));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void remove_nullBug_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void remove_bugDoesNotExist_throwsBugNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertThrows(BugNotFoundException.class, () -\u003e uniqueBugList.remove(BUGONE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void remove_existingBug_removesBug() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.remove(BUGONE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        UniqueBugList expectedUniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedUniqueBugList, uniqueBugList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBugs_nullUniqueBugList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.setBugs((UniqueBugList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBugs_uniqueBugList_replacesOwnListWithProvidedUniqueBugList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        UniqueBugList expectedUniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedUniqueBugList.add(BUGELEVEN);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        uniqueBugList.setBugs(expectedUniqueBugList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedUniqueBugList, uniqueBugList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBugs_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBugList.setBugs((List\u003cBug\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBugs_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        uniqueBugList.add(BUGONE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e bugList \u003d Collections.singletonList(BUGELEVEN);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        uniqueBugList.setBugs(bugList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        UniqueBugList expectedUniqueBugList \u003d new UniqueBugList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        expectedUniqueBugList.add(BUGELEVEN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(expectedUniqueBugList, uniqueBugList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void setBugs_listWithDuplicateBugs_throwsDuplicateBugException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        List\u003cBug\u003e listWithDuplicateBugs \u003d Arrays.asList(BUGONE, BUGONE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(DuplicateBugException.class, () -\u003e uniqueBugList.setBugs(listWithDuplicateBugs));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            -\u003e uniqueBugList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 38,
      "PhongTran98": 48,
      "duynguyen24501": 1,
      "-": 85,
      "Rogerlys": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBugTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBug.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGTWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "public class JsonAdaptedBugTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String INVALID_NAME \u003d \"C@mmand\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String INVALID_STATE \u003d \"Invalid state\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#Command\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"loww\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String VALID_NAME \u003d BUGTWO.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String VALID_STATE \u003d BUGTWO.getState().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BUGTWO.getDescription().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    private static final String VALID_NOTE \u003d BUGTWO.getOptionalNote().get().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final String VALID_PRIORITY \u003d BUGTEN.getPriority().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BUGTWO.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void toModelType_validBugDetails_returnsBug() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        JsonAdaptedBug bug \u003d new JsonAdaptedBug(BUGTWO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        assertEquals(BUGTWO, bug.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        bug \u003d new JsonAdaptedBug(BUGTEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(BUGTEN, bug.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonAdaptedBug bug \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new JsonAdaptedBug(INVALID_NAME, VALID_STATE, VALID_DESCRIPTION, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        JsonAdaptedBug bug \u003d new JsonAdaptedBug(null, VALID_STATE, VALID_DESCRIPTION, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void toModelType_invalidState_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonAdaptedBug bug \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new JsonAdaptedBug(VALID_NAME, INVALID_STATE, VALID_DESCRIPTION, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String expectedMessage \u003d State.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void toModelType_nullState_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        JsonAdaptedBug bug \u003d new JsonAdaptedBug(VALID_NAME, null, VALID_DESCRIPTION, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, State.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonAdaptedBug bug \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new JsonAdaptedBug(VALID_NAME, VALID_STATE, INVALID_DESCRIPTION, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        JsonAdaptedBug bug \u003d new JsonAdaptedBug(VALID_NAME, VALID_STATE, null, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonAdaptedBug bug \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new JsonAdaptedBug(VALID_NAME, VALID_STATE, VALID_DESCRIPTION, VALID_NOTE, INVALID_PRIORITY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        JsonAdaptedBug bug \u003d new JsonAdaptedBug(VALID_NAME, VALID_STATE, VALID_DESCRIPTION, VALID_NOTE, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public void toModelType_nullNote_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        JsonAdaptedBug bug \u003d new JsonAdaptedBug(VALID_NAME, VALID_STATE, VALID_DESCRIPTION, null, VALID_PRIORITY,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bug::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonAdaptedBug bug \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                new JsonAdaptedBug(VALID_NAME, VALID_STATE, VALID_DESCRIPTION, VALID_NOTE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "                        invalidTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, bug::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 15,
      "duynguyen24501": 4,
      "PhongTran98": 32,
      "the-reefshark": 28,
      "-": 50,
      "Rogerlys": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonKanBugTrackerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGNINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.BUGONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class JsonKanBugTrackerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "            \"JsonKanBugTrackerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void readKanBugTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readKanBugTracker(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private java.util.Optional\u003cReadOnlyKanBugTracker\u003e readKanBugTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return new JsonKanBugTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                .readKanBugTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertFalse(readKanBugTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readKanBugTracker(\"notJsonFormatKanBugTracker.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void readKanBugTracker_invalidBugKanBugTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readKanBugTracker(\"invalidBugKanBugTracker.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void readKanBugTracker_invalidAndValidBugKanBugTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readKanBugTracker(\"invalidAndValidBugKanBugTracker.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void readAndSaveKanBugTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempKanBugTracker.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        KanBugTracker original \u003d getTypicalKanBugTracker();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonKanBugTrackerStorage jsonKanBugTrackerStorage \u003d new JsonKanBugTrackerStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        jsonKanBugTrackerStorage.saveKanBugTracker(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        ReadOnlyKanBugTracker readBack \u003d jsonKanBugTrackerStorage.readKanBugTracker(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(original, new KanBugTracker(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        original.addBug(BUGEIGHT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        original.removeBug(BUGONE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        jsonKanBugTrackerStorage.saveKanBugTracker(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        readBack \u003d jsonKanBugTrackerStorage.readKanBugTracker(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(original, new KanBugTracker(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        original.addBug(BUGNINE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        jsonKanBugTrackerStorage.saveKanBugTracker(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        readBack \u003d jsonKanBugTrackerStorage.readKanBugTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(original, new KanBugTracker(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void saveKanBugTracker_nullKanBugTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveKanBugTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Saves {@code kanBugTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private void saveKanBugTracker(ReadOnlyKanBugTracker kanBugTracker, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            new JsonKanBugTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                    .saveKanBugTracker(kanBugTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void saveKanBugTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveKanBugTracker(new KanBugTracker(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 6,
      "PhongTran98": 31,
      "duynguyen24501": 7,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableKanBugTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.testutil.TypicalBugs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class JsonSerializableKanBugTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableKanBugTrackerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final Path TYPICAL_BUGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBugsKanBugTracker.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final Path INVALID_BUG_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBugKanBugTracker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private static final Path DUPLICATE_BUG_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBugKanBugTracker.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void toModelType_typicalBugsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonSerializableKanBugTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BUGS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                JsonSerializableKanBugTracker.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTracker kanBugTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        KanBugTracker typicalBugsKanBugTracker \u003d TypicalBugs.getTypicalKanBugTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertEquals(kanBugTrackerFromFile, typicalBugsKanBugTracker);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void toModelType_invalidBugFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonSerializableKanBugTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BUG_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                JsonSerializableKanBugTracker.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void toModelType_duplicateBugs_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonSerializableKanBugTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BUG_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "                JsonSerializableKanBugTracker.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableKanBugTracker.MESSAGE_DUPLICATE_BUG,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duynguyen24501": 7,
      "PhongTran98": 13,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        userPrefs.setKanBugTrackerFilePath(Paths.get(\"kanbugtracker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.testutil.TypicalBugs.getTypicalKanBugTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.ReadOnlyKanBugTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        JsonKanBugTrackerStorage kanBugTrackerStorage \u003d new JsonKanBugTrackerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        storageManager \u003d new StorageManager(kanBugTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void kanBugTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "         * {@link JsonKanBugTrackerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonKanBugTrackerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        KanBugTracker original \u003d getTypicalKanBugTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        storageManager.saveKanBugTracker(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        ReadOnlyKanBugTracker retrieved \u003d storageManager.readKanBugTracker().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        assertEquals(original, new KanBugTracker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public void getKanBugTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        assertNotNull(storageManager.getKanBugTrackerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 11,
      "duynguyen24501": 3,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BugBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * A utility class to help with building Bug objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Default bug\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static final String DEFAULT_STATE \u003d \"backlog\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"just some random description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d \"just a test note\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private State state;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    private Optional\u003cNote\u003e note;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Creates a {@code BugBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        state \u003d new State(DEFAULT_STATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        note \u003d Optional.of(new Note(DEFAULT_NOTE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        priority \u003d new Priority();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Initializes the BugBuilder with the data of {@code bugToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugBuilder(Bug bugToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        name \u003d bugToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        state \u003d bugToCopy.getState();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        description \u003d bugToCopy.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        note \u003d bugToCopy.getOptionalNote();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bugToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        priority \u003d bugToCopy.getPriority();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Sets the {@code Name} of the {@code Bug} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Bug} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public BugBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Sets the {@code Description} of the {@code Bug} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public BugBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Sets the {@code Note} of the {@code Bug} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public BugBuilder withNote(String note) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        this.note \u003d note.isBlank() ? Optional.empty() : Optional.of(new Note(note));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Sets the {@code State} of the {@code Bug} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public BugBuilder withState(String state) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.state \u003d new State(state);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code Priority} of the {@code Bug} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public BugBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code Priority} of the {@code Bug} that we are building as empty priority."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public BugBuilder withPriority() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        this.priority \u003d new Priority();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public Bug build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return new Bug(name, state, description, note, tags, priority);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 13,
      "the-reefshark": 17,
      "duynguyen24501": 6,
      "PhongTran98": 23,
      "-": 50,
      "Rogerlys": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BugUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditBugDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * A utility class for Bug."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class BugUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns an add command string for adding the {@code bug}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public static String getAddCommand(Bug bug) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getBugDetails(bug);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns the part of command string for the given {@code bug}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static String getBugDetails(Bug bug) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        sb.append(PREFIX_NAME + bug.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        sb.append(PREFIX_STATE + bug.getState().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + bug.getDescription().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        sb.append(PREFIX_NOTE + (bug.getOptionalNote().isEmpty() ? \"\" : bug.getOptionalNote().get().value) + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        bug.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns the part of command string for the given {@code EditBugDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static String getEditBugDescriptorDetails(EditBugDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        descriptor.getState().ifPresent(state -\u003e sb.append(PREFIX_STATE).append(state.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        descriptor.getDescription().ifPresent(address -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "                                                                 .append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        descriptor.getOptionalNote().ifPresent(note -\u003e sb.append(PREFIX_NOTE).append(note.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        descriptor.getPriority().ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "                .append(priority.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 12,
      "the-reefshark": 3,
      "PhongTran98": 8,
      "duynguyen24501": 2,
      "-": 40,
      "Rogerlys": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBugDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import seedu.address.model.bug.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import seedu.address.model.bug.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import seedu.address.model.bug.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * A utility class to help with building EditBugDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class EditBugDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private EditCommand.EditBugDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditBugDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        descriptor \u003d new EditCommand.EditBugDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditBugDescriptorBuilder(EditCommand.EditBugDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditBugDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns an {@code EditBugDescriptor} with fields containing {@code bug}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditBugDescriptorBuilder(Bug bug) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        descriptor \u003d new EditCommand.EditBugDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        descriptor.setName(bug.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        descriptor.setState(bug.getState());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        descriptor.setDescription(bug.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        descriptor.setOptionalNote(bug.getOptionalNote());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        descriptor.setTags(bug.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        descriptor.setPriority(bug.getPriority());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBugDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditBugDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code State} of the {@code EditBugDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public EditBugDescriptorBuilder withState(String state) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        descriptor.setState(new State(state));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code Description} of the {@code EditBugDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public EditBugDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     * Sets the {@code Note} of the {@code EditBugDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    public EditBugDescriptorBuilder withNote(String note) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "        descriptor.setOptionalNote(note.isBlank() ? Optional.empty() : Optional.of(new Note(note)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditBugDescriptor}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditBugDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditBugDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public EditBugDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditBugDescriptor} that we are building as empty priority."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public EditBugDescriptorBuilder withPriority() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        descriptor.setPriority(new Priority());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public EditCommand.EditBugDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 5,
      "the-reefshark": 13,
      "duynguyen24501": 13,
      "PhongTran98": 24,
      "-": 47,
      "Rogerlys": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/KanBugTrackerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " * A utility class to help with building KanBugTracker objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": " *     {@code KanBugTracker ab \u003d new KanBugTrackerBuilder().withBug(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class KanBugTrackerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private KanBugTracker kanBugTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanBugTrackerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanBugTracker \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanBugTrackerBuilder(KanBugTracker kanBugTracker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        this.kanBugTracker \u003d kanBugTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Adds a new {@code Bug} to the {@code KanBugTracker} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "    public KanBugTrackerBuilder withBug(Bug bug) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        kanBugTracker.addBug(bug);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public KanBugTracker build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        return kanBugTracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 1,
      "duynguyen24501": 30,
      "PhongTran98": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns the middle index of the bug in the {@code model}\u0027s bug list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBugList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns the last index of the bug in the {@code model}\u0027s bug list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBugList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "     * Returns the bug in the {@code model}\u0027s bug list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static Bug getBug(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return model.getFilteredBugList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 7,
      "PhongTran98": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBugs.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_HOMEPAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PARSER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HOMEPAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PARSER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_BLANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_HOMEPAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NOTE_PARSER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HOMEPAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PARSER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_HOMEPAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATE_PARSER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPONENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LOGIC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "import seedu.address.model.KanBugTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "import seedu.address.model.bug.Bug;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": " * A utility class containing a list of {@code Bug} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "public class TypicalBugs {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGONE \u003d new BugBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Add command bug\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"Cannot add a bug with multiple tags\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is a note\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"todo\").withTags(\"AddCommand\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(\"low\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGTWO \u003d new BugBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Edit command parsing\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"The prefixes of edit command are wrongly parsed\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is the second note\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"todo\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(\"EditCommand\", \"backend\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGTHREE \u003d new BugBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Main window overflows\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"done\").withDescription(\"If there is a huge number of bugs, the main window cannot display\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is the third note\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(\"low\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(\"Ui\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGFOUR \u003d new BugBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Search command test\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"ongoing\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"Need to add more search test to cover all equivalence partition\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is the fourth note\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(\"SearchCommand\", \"backend\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGFIVE \u003d new BugBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Exit command hangs\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"done\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"Exit command hangs more than 10 seconds\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is the fifth note\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(\"medium\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGSIX \u003d new BugBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Note rendering\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"ongoing\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"Note field does not show up in the main window\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is the sixth note\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(\"low\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(\"JavaFx\", \"Ui\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGSEVEN \u003d new BugBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Jar file does not work\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"backlog\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"Current jar file cannot work on Mac OS system\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"this is the seventh note\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(\"high\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "the-reefshark"
        },
        "content": "    // Manually added - default state backlog"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGEIGHT \u003d new BugBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"Nested if statements\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"backlog\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"There are a lot of deep nested if blocks in Command package\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGNINE \u003d new BugBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(\"ArrayOutOfBounds Error\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(\"backlog\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(\"No input validation for invalid index\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(\"\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    // Manually added - Bug\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGTEN \u003d new BugBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(VALID_NAME_PARSER)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(VALID_STATE_PARSER)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_PARSER)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(VALID_NOTE_PARSER)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(VALID_TAG_LOGIC)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(VALID_PRIORITY_PARSER).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGELEVEN \u003d new BugBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(VALID_NAME_HOMEPAGE)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(VALID_STATE_HOMEPAGE)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_HOMEPAGE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(VALID_NOTE_HOMEPAGE)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(VALID_PRIORITY_HOMEPAGE)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(VALID_TAG_COMPONENT, VALID_TAG_LOGIC)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    public static final Bug BUGTWELVE \u003d new BugBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withName(VALID_NAME_HOMEPAGE)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withState(VALID_STATE_HOMEPAGE)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_HOMEPAGE)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withPriority(VALID_PRIORITY_HOMEPAGE)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withNote(VALID_NOTE_BLANK)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .withTags(VALID_TAG_COMPONENT, VALID_TAG_LOGIC)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "    private TypicalBugs() {} // prevents instantiation"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "     * Returns an {@code KanBugTracker} with all the typical bugs."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static KanBugTracker getTypicalKanBugTracker() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "        KanBugTracker ab \u003d new KanBugTracker();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "        for (Bug bug : getTypicalBugs()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duynguyen24501"
        },
        "content": "            ab.addBug(bug);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static List\u003cBug\u003e getTypicalBugs() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KishenKumarrrrr"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BUGONE, BUGTWO, BUGTHREE, BUGFOUR, BUGFIVE, BUGSIX, BUGSEVEN));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KishenKumarrrrr": 4,
      "the-reefshark": 4,
      "PhongTran98": 7,
      "duynguyen24501": 100,
      "-": 23,
      "Rogerlys": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final Index INDEX_FIRST_BUG \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final Index INDEX_SECOND_BUG \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhongTran98"
        },
        "content": "    public static final Index INDEX_THIRD_BUG \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhongTran98": 3,
      "-": 9
    }
  }
]
